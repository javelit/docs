{
  "0.19.0": {
    "Jt.textInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(String value)",
          "name": "value",
          "description": "The text value of this widget when it first renders. Defaults to empty string.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "maxChars",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxChars(Integer maxChars)",
          "name": "maxChars",
          "description": "The maximum number of characters allowed in the text input.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "Can be \"default\" or \"password\". Determines if input masks the user's typed value.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "autocomplete",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "autocomplete(String autocomplete)",
          "name": "autocomplete",
          "description": "An optional value that will be passed to the  <input>  element's autocomplete property. If unspecified, this value will be set to \"new-password\" for \"password\" inputs, and the empty string for \"default\" inputs.\n For more details, see  <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\" target=\"_blank\"> https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete </a> .",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "An optional string displayed when the text input is empty.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disable the text input if set to true. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(.JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "The visibility of the label. The default is  {@code VISIBLE} .\n If this is  {@code HIDDEN} , Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is  {@code COLLAPSED} , Jeamlit displays no label or spacer.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "An icon to display with the error message. The following values are valid:\n  <ul> \n      <li> A single-character emoji. For example:  {@code \\ud83d\\udd25} . Emoji short codes are not supported. </li> \n      <li> An icon from the Material Symbols library (rounded style) in the format \":icon_name:\" where \"icon_name\" is the name of the icon in snake case. For example:  {@code :search:} . See full list of icons  <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\"> here </a> . </li> \n  </ul> \n If null (default), no icon is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "Controls the widget width. Can be \"stretch\" (default) or a pixel value.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Consumer<String>",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer<String> onChange)",
          "name": "onChange",
          "description": "An optional callback invoked when the text input's value changes.\n The value passed in the callback is the previous value of the component.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "A short label explaining to the user what this input is for. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.textInput(String label)"
        }
      ],
      "name": "textInput",
      "description": "Display a single-line text input widget.",
      "returns": [
        {
          "type_name": "string",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.code": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "language",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "language(String language)",
          "name": "language",
          "description": "The language that the code is written in, for syntax highlighting. This defaults to  {@code java} .\n If this is  {@code null} , the code will be plain, monospace text.\n  <p> \n For a list of available language values, see list on  <a href=\"https://prismjs.com/#supported-languages\"> prismjs documentation </a> .",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "lineNumbers",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "lineNumbers(boolean lineNumbers)",
          "name": "lineNumbers",
          "description": "An optional boolean indicating whether to show line numbers to the left of the code block. This defaults to  {@code false} .",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "wrapLines",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "wrapLines(boolean wrapLines)",
          "name": "wrapLines",
          "description": "An optional boolean indicating whether to wrap lines. This defaults to  {@code false} .",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "The height of the code block element. This can be one of the following:\n  <p> \n  <ul> \n   <li> {@code content}  (default): The height of the element matches the height of its content. </li> \n   <li> {@code stretch} : The height of the element matches the height of its content or the height of the parent container, whichever is larger. If the element is not in a parent container, the height of the element matches the height of its content. </li> \n   <li> An integer specifying the height in pixels: The element has a fixed height. If the content is larger than the specified height, scrolling is enabled. </li> \n  </ul>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "heightPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int heightPixels)",
          "name": "height",
          "description": "The height of the element in pixels. The element will have a fixed height. If the content is larger than the specified height, scrolling is enabled.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"content\" (default): The width of the element matches the width of its content, but doesn't exceed the width of the parent container.\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "The string to display as code or monospace text.",
              "is_optional": false
            }
          ],
          "signature": "Jt.code(String body)"
        }
      ],
      "name": "code",
      "description": "Display a code block with optional syntax highlighting.",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.pageLink": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "label(String label)",
          "name": "label",
          "description": "The text to display for the link. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "An icon to display with the error message. The following values are valid:\n  <ul> \n      <li> A single-character emoji. For example:  {@code \\ud83d\\udd25} . Emoji short codes are not supported. </li> \n      <li> An icon from the Material Symbols library (rounded style) in the format \":icon_name:\" where \"icon_name\" is the name of the icon in snake case. For example:  {@code :search:} . See full list of icons  <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\"> here </a> . </li> \n  </ul> \n If null (default), no icon is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disable the link if set to true.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the link element. Use \"content\" to fit content, \"stretch\" to fill container, or a pixel value.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class<?>",
              "default": null,
              "name": "pageClass",
              "description": "The class of the page to link to in a multipage app.",
              "is_optional": false
            }
          ],
          "signature": "Jt.pageLink(Class<?> pageClass)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "url",
              "description": "The URL to link to",
              "is_optional": false
            },
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "The text to display for the link. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.pageLink(String url, String label)"
        }
      ],
      "name": "pageLink",
      "description": "Display a link to another page in a multipage app or to an external page.\n  <p> \n If another page in a multipage app is specified, clicking the {Jt.pageLink} element stops the current page execution\n and runs the specified page as if the user clicked on it in the sidebar navigation.\n  <p> \n If an external page is specified, clicking the  {@code Jt.pageLink}  element opens a new tab to the specified page.\n The current script run will continue if not complete.",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.textArea": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(String value)",
          "name": "value",
          "description": "The initial text value when the widget renders. Defaults to empty string.\n If  {@code null} , will initialize empty and return  {@code null}  until the user provides input.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "The text area widget height. This can be \"content\", \"stretch\", or a pixel value. Minimum height is 2 lines.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "heightInPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int heightInPixels)",
          "name": "height",
          "description": "The text area widget height in pixels. Minimum height is 2 lines.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "maxChars",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxChars(Integer maxChars)",
          "name": "maxChars",
          "description": "The maximum number of characters allowed in the text area.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "The text displayed when the text area is empty.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disable the text area input if set to true. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(.JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "The visibility of the label. The default is  {@code VISIBLE} .\n If this is  {@code HIDDEN} , Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is  {@code COLLAPSED} , Jeamlit displays no label or spacer.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The widget width. Can be \"stretch\" (default) or a pixel value.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Consumer<String>",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer<String> onChange)",
          "name": "onChange",
          "description": "An optional callback function that will be called when the text area value changes.\n The value passed in the callback is the previous value of the component.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "A short label explaining to the user what this input is for. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.textArea(String label)"
        }
      ],
      "name": "textArea",
      "description": "Display a multi-line text input widget.",
      "returns": [
        {
          "type_name": "string",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.text": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "body(String body)",
          "name": "body",
          "description": "The string to display.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"content\" (default): The width of the element matches the width of its content, but doesn't exceed the width of the parent container.\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "The string to display.",
              "is_optional": false
            }
          ],
          "signature": "Jt.text(String body)"
        }
      ],
      "name": "text",
      "description": "Write text without Markdown or HTML parsing.\n For monospace text, use  {@link Jt#code}",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.checkbox": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(boolean value)",
          "name": "value",
          "description": "Preselect the checkbox when first rendered.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Consumer<@org.jetbrains.annotations.NotNull Boolean>",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer<@org.jetbrains.annotations.NotNull Boolean> onChange)",
          "name": "onChange",
          "description": "An optional callback function invoked when the checkbox value changes.\n The value passed to the callback is the previous value of the component.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disable the checkbox if set to true. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(.JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "The visibility of the label. The default is  {@code VISIBLE} .\n If this is  {@code HIDDEN} , Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is  {@code COLLAPSED} , Jeamlit displays no label or spacer.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"content\" (default): The width of the element matches the width of its content, but doesn't exceed the width of the parent container.\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "A short label explaining to the user what this checkbox is for. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.checkbox(String label)"
        }
      ],
      "name": "checkbox",
      "description": "Display a checkbox widget.",
      "returns": [
        {
          "type_name": "NotNull Boolean",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.selectBox": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "index",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "index(Integer index)",
          "name": "index",
          "description": "The index of the preselected option on first render. If  {@code null} , initializes empty and returns  {@code null}  until user selection.\n Defaults to 0 (the first option).",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Function<@org.jetbrains.annotations.Nullable T,String>",
              "default": null,
              "name": "formatFunction",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "formatFunction(function.Function<@org.jetbrains.annotations.Nullable T,String> formatFunction)",
          "name": "formatFunction",
          "description": "Function to modify the display of the options. The  {@code Function}  receives the raw option object and returns a String that will be used as display label.\n Does not impact the return value of the component.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the widget label. If null, no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Consumer<@org.jetbrains.annotations.NotNull T>",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer<@org.jetbrains.annotations.NotNull T> onChange)",
          "name": "onChange",
          "description": "An optional callback invoked when the selectbox value changes.\n The value passed to the callback is the previous value of the component.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disables the selectbox if set to true. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(.JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "The visibility of the label. The default is  {@code VISIBLE} .\n If this is  {@code HIDDEN} , Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is  {@code COLLAPSED} , Jeamlit displays no label or spacer.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"content\" (default): The width of the element matches the width of its content, but doesn't exceed the width of the parent container.\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the selectbox in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "Text displayed when no option is selected. Default varies based on widget configuration.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "acceptNewOptions",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "acceptNewOptions(boolean acceptNewOptions)",
          "name": "acceptNewOptions",
          "description": "Whether the user can add a selection that isn't included in options.\n If this is  {@code false}  (default), the user can only select from the items in options.\n If this is  {@code true} , the user can enter a new item that doesn't exist in options.\n  <p> \n When a user enters a new item, it is returned by the widget as a string.\n The new item is not added to the widget's drop-down menu. Jeamlit will use a case-insensitive match\n from options before adding a new item.\n  <p> \n Only compatible with selectbox of  {@code String}  values.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "A short label explaining to the user what this selection is for. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            },
            {
              "type_name": "List<T>",
              "default": null,
              "name": "options",
              "description": "The list of options to choose from",
              "is_optional": false
            }
          ],
          "signature": "Jt.selectBox(String label, List<T> options)"
        }
      ],
      "name": "selectBox",
      "description": "Display a select widget.",
      "returns": [
        {
          "type_name": "Nullable T",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.expander": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "expanded",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "expanded(boolean expanded)",
          "name": "expanded",
          "description": "The initial state of the expander. When set to  {@code true} , the expander starts in the expanded state. When  {@code false}  (default), the expander starts collapsed.\n Note that all content within the expander is computed and sent to the frontend regardless of the initial state.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "A unique string used to identify this expander",
              "is_optional": false
            },
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "The label for the expander header",
              "is_optional": false
            }
          ],
          "signature": "Jt.expander(String key, String label)"
        }
      ],
      "name": "expander",
      "description": "Insert a multi-element container that can be expanded/collapsed.\n  <p> \n Insert a container into your app that can be used to hold multiple elements and can be expanded or collapsed by the user.\n When collapsed, all that is visible is the provided label.\n  <p> \n To add elements to the returned expander:\n  <pre> \n  {@code\n var expander = Jt.expander(\"my-expander\", \"More details\").use();\n Jt.yourElement().use(expander);\n } \n  </pre> \n See examples below.",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.formSubmitButton": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "The button type that determines its appearance and emphasis level. Can be \"primary\", \"secondary\" (default), or \"tertiary\".",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "An icon to display with the error message. The following values are valid:\n  <ul> \n      <li> A single-character emoji. For example:  {@code \\ud83d\\udd25} . Emoji short codes are not supported. </li> \n      <li> An icon from the Material Symbols library (rounded style) in the format \":icon_name:\" where \"icon_name\" is the name of the icon in snake case. For example:  {@code :search:} . See full list of icons  <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\"> here </a> . </li> \n  </ul> \n If null (default), no icon is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disables the button if set to True. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "Controls the button width. If True, the button width matches the parent container width. If False (default), the button width matches its content width. This parameter is deprecated - use width() instead.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Consumer<Boolean>",
              "default": null,
              "name": "onClick",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onClick(function.Consumer<Boolean> onClick)",
          "name": "onClick",
          "description": "An optional callable function that is invoked when the button is clicked.\n The callback receives the previous button click state as a parameter. In this case, the previous click state is always  {@code false} .",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "The text to display on the submit button",
              "is_optional": false
            }
          ],
          "signature": "Jt.formSubmitButton(String label)"
        }
      ],
      "name": "formSubmitButton",
      "description": "Display a form submit button.\n  <p> \n When clicked, all widget values inside the form will be sent from the user's browser to the Jeamlit server in a batch.\n  <p> \n Every form must have at least one  {@code Jt.formSubmitButton} . A  {@code Jt.formSubmitButton}  cannot exist outside a form.",
      "returns": [
        {
          "type_name": "boolean",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.container": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(Integer height)",
          "name": "height",
          "description": "The height of the container in pixels. When a fixed height is specified, the container will enable scrolling if content exceeds the specified height. It is recommended to use scrolling containers sparingly and avoid heights that exceed 500 pixels for optimal mobile experience.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(Boolean border)",
          "name": "border",
          "description": "Whether to show a border around the container. If not specified (null), the border is automatically shown when the container has a fixed height, and hidden when height adapts to content.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "A unique string used to identify this container",
              "is_optional": false
            }
          ],
          "signature": "Jt.container(String key)"
        }
      ],
      "name": "container",
      "description": "Insert a multi-element container.\n  <p> \n Insert an invisible container into your app that can be used to hold multiple elements.\n This allows you to, for example, insert multiple elements into your app out of order.\n  <p> \n To add elements to the returned container:\n  <pre> \n  {@code\n var container = Jt.container(\"container-1\").use();\n Jt.yourElement().use(container);\n } \n  </pre> \n See examples below.",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.popover": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disables the popover button if set to True. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "Controls the button width. If True, the button width matches the parent container width. If False (default), the button width matches its content width. This parameter is deprecated - use width() instead.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "A unique string used to identify this popover",
              "is_optional": false
            },
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "The label for the popover button. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.popover(String key, String label)"
        }
      ],
      "name": "popover",
      "description": "Insert a popover container.\n  <p> \n Inserts a multi-element container as a popover. It consists of a button-like element and a container that opens when the button is clicked.\n  <p> \n Opening and closing the popover will not trigger a rerun. Interacting with widgets inside of an open popover will\n rerun the app while keeping the popover open. Clicking outside of the popover will close it.\n  <p> \n To add elements to the returned popover:\n  <pre> \n  {@code\n var popover = Jt.popover(\"my-popover\", \"Advanced configuration\").use();\n Jt.yourElement().use(popover);\n } \n  </pre> \n See examples below.",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.numberInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(T value)",
          "name": "value",
          "description": "The value of this widget when it first renders.\n If  {@code null} , initializes with no value and returns null until an input is provided to the component.\n The default behavior is to return the minimum value. If the minimum value is not set, the widget initializes\n with a value of  {@code 0} .",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "minValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "minValue(T minValue)",
          "name": "minValue",
          "description": "The minimum permitted value. For  {@code Integer}  and  {@code Long} , defaults to the corresponding minimum\n possible value.\n For  {@code Float}  and  {@code Double} , no minimum by default.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "maxValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxValue(T maxValue)",
          "name": "maxValue",
          "description": "The maximum permitted value. For  {@code Integer}  and  {@code Long} , defaults to the corresponding maximum\n possible value.\n For  {@code Float}  and  {@code Double} , no maximum by default.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "step",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "step(T step)",
          "name": "step",
          "description": "The stepping interval. Defaults to 1 for  {@code Integer}  and  {@code Long} , 0.01 for floating points.\n Must be strictly positive.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "A printf-style format string controlling how numbers are displayed in the interface.\n The output must be purely numeric. This does not impact the return value of the widget.\n For more information about the formatting specification, see  <a href=\"https://github.com/alexei/sprintf.js?tab=readme-ov-file#format-specification\" target=\"_blank\"> sprintf.js </a> .\n  <p> \n For example,  {@code format=\"%0.1f\"}  adjusts the displayed decimal precision to only show one digit after the decimal.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the widget label. If null, no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "An optional text displayed when the number input is empty, providing guidance to the user.\n If None, no placeholder is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disables the number input if set to true. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(.JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "The visibility of the label. The default is  {@code VISIBLE} .\n If this is  {@code HIDDEN} , Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is  {@code COLLAPSED} , Jeamlit displays no label or spacer.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "An icon to display with the error message. The following values are valid:\n  <ul> \n      <li> A single-character emoji. For example:  {@code \\ud83d\\udd25} . Emoji short codes are not supported. </li> \n      <li> An icon from the Material Symbols library (rounded style) in the format \":icon_name:\" where \"icon_name\" is the name of the icon in snake case. For example:  {@code :search:} . See full list of icons  <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\"> here </a> . </li> \n  </ul> \n If null (default), no icon is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the number input in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Consumer<T>",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer<T> onChange)",
          "name": "onChange",
          "description": "An optional callback invoked when the number input's value changes.\n The value passed to the callback is the previous value of the component.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "A short label explaining to the user what this numeric input is for. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.numberInput(String label)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "A short label explaining to the user what this numeric input is for. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            },
            {
              "type_name": "Class<T>",
              "default": null,
              "name": "valueClass",
              "description": "The number type class (Integer, Double, Float, etc.)",
              "is_optional": false
            }
          ],
          "signature": "Jt.numberInput(String label, Class<T> valueClass)"
        }
      ],
      "name": "numberInput",
      "description": "Display a numeric input widget.",
      "returns": [
        {
          "type_name": "T",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.fileUploader": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List<String>",
              "default": null,
              "name": "types",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(List<String> types)",
          "name": "type",
          "description": "The allowed file extensions or MIME types. If  {@code null} , all file types are allowed. Use file extensions like  {@code \".pdf\"}  or MIME types like  {@code \"image/png\"} .",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.MultipleFiles",
              "default": null,
              "name": "acceptMultipleFiles",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "acceptMultipleFiles(io.jeamlit.components.media.FileUploaderComponent.MultipleFiles acceptMultipleFiles)",
          "name": "acceptMultipleFiles",
          "description": "Whether to accept more than one file in a submission. This can be one of the following values:\n  <ul> \n      <li> {@code MultipleFiles.FALSE}  (default): The user can only submit one file at a time. </li> \n      <li> {@code MultipleFiles.TRUE} : The user can upload multiple files at the same time. </li> \n      <li> {@code MultipleFiles.DIRECTORY} : The user can select a directory to upload all files in the directory and its subdirectories. If  {@code type}  is set, only files matching those type(s) will be uploaded. </li> \n  </ul>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disable the file uploader if set to true. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Consumer<List<io.jeamlit.core.JtUploadedFile>>",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer<List<.JtUploadedFile>> onChange)",
          "name": "onChange",
          "description": "An optional callback invoked when the file uploader's value changes.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(.JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "The visibility of the label. The default is  {@code VISIBLE} .\n If this is  {@code HIDDEN} , Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is  {@code COLLAPSED} , Jeamlit displays no label or spacer.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the text element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "A short label explaining to the user what this file uploader is for. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.fileUploader(String label)"
        }
      ],
      "name": "fileUploader",
      "description": "Display a file uploader widget.",
      "returns": [
        {
          "type_name": "JtUploadedFile>",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.markdown": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"content\" (default): The width of the element matches the width of its content, but doesn't exceed the width of the parent container.\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "The text to display as Markdown.",
              "is_optional": false
            }
          ],
          "signature": "Jt.markdown(String body)"
        }
      ],
      "name": "markdown",
      "description": "Display string formatted as Markdown.\n  <p> \n Supported :\n  <ul> \n      <li> Emoji shortcodes, such as :+1: and :sunglasses:. For a list of all supported codes, see  <a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\"> https://www.webfx.com/tools/emoji-cheat-sheet/ </a> . </li> \n      <li> Tables </li> \n      <li> Strikethrough </li> \n      <li> Autolink: turns plain links such as URLs and email addresses into links </li> \n  </ul>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.html": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"content\" (default): The width of the element matches the width of its content, but doesn't exceed the width of the parent container.\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.HtmlComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.HtmlComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "The HTML code to insert.",
              "is_optional": false
            }
          ],
          "signature": "Jt.html(String body)"
        },
        {
          "args": [
            {
              "type_name": "java.nio.file.Path",
              "default": null,
              "name": "filePath",
              "description": "The path of the file containing the HTML code to insert.",
              "is_optional": false
            }
          ],
          "signature": "Jt.html(java.nio.file.Path filePath)"
        }
      ],
      "name": "html",
      "description": "Insert HTML into your app.\n  <p> \n Adding custom HTML to your app impacts safety, styling, and maintainability.\n We sanitize HTML with  <a href=\"https://github.com/cure53/DOMPurify\"> DOMPurify </a> , but inserting HTML remains a developer risk.\n Passing untrusted code to Jt.html or dynamically loading external code can increase the risk of vulnerabilities in your app.\n  <p> \n  {@code Jt.html}  content is not iframed. Executing JavaScript is not supported.",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.columns": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "numColumns",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "numColumns(int numColumns)",
          "name": "numColumns",
          "description": "The number of columns to create. Must be between 2 and 12 inclusive. Each column will have equal width\n unless custom widths are specified.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List<@org.jetbrains.annotations.NotNull Double>",
              "default": null,
              "name": "widths",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "widths(List<@org.jetbrains.annotations.NotNull Double> widths)",
          "name": "widths",
          "description": "A list of relative column widths. The list size must match the number of columns. For example, [0.7, 0.3]\n creates two columns with 70% and 30% width respectively. If not specified, all columns have equal width.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.Gap",
              "default": null,
              "name": "gap",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "gap(io.jeamlit.components.layout.ColumnsComponent.Gap gap)",
          "name": "gap",
          "description": "Controls the space between columns. Options are  {@code SMALL}  ( {@code 1rem}  gap, default),  {@code MEDIUM}  ( {@code 2rem}  gap),\n  {@code LARGE}  ( {@code 4rem}  gap), or  {@code NONE}  (no gap between columns).",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.VerticalAlignment",
              "default": null,
              "name": "verticalAlignment",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "verticalAlignment(io.jeamlit.components.layout.ColumnsComponent.VerticalAlignment verticalAlignment)",
          "name": "verticalAlignment",
          "description": "The vertical alignment of the content inside the columns. Options are  {@code TOP}  (default),  {@code CENTER} , or  {@code BOTTOM} .",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "Whether to show a border around the column containers.\n If this is  {@code false}  (default), no border is shown. If this is  {@code true} ,\n a border is shown around each column.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "A unique string used to identify this columns container",
              "is_optional": false
            },
            {
              "type_name": "int",
              "default": null,
              "name": "numColumns",
              "description": "The number of columns to create",
              "is_optional": false
            }
          ],
          "signature": "Jt.columns(String key, int numColumns)"
        }
      ],
      "name": "columns",
      "description": "Insert containers laid out as side-by-side columns.\n  <p> \n Inserts a number of multi-element containers laid out side-by-side and returns a list of container objects.\n  <p> \n To add elements to the returned columns container:\n  <pre> \n  {@code\n var cols = Jt.columns(\"my-3-cols\", 3).use();\n Jt.yourElement().use(cols.col(1));\n Jt.yourElement().use(cols.col(0));\n Jt.yourElement().use(cols.col(2));\n } \n  </pre> \n See examples below.",
      "returns": [
        {
          "type_name": "Columns",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.deepCopy": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "original",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "com.fasterxml.jackson.core.type.TypeReference<T>",
              "default": null,
              "name": "typeRef",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "Jt.deepCopy(T original, com.fasterxml.jackson.core.type.TypeReference<T> typeRef)"
        }
      ],
      "name": "deepCopy",
      "description": "Return a deep copy of the provied object.\n  <p> \n Utility that may be useful in combination with the cache, to implement a copy on read behavior.\n For instance, you can get a value that is expensive to\n instantiate from the cache, but perform a deep copy to prevent mutations and side effects across sessions.",
      "returns": [
        {
          "type_name": "T",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.tableFromListColumns": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Map<@org.jetbrains.annotations.NotNull String,Values>",
              "default": null,
              "name": "col2List",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofColumnsLists(Map<@org.jetbrains.annotations.NotNull String,Values> col2List)",
          "name": "ofColumnsLists",
          "description": "Creates a table from a map where each key is a column name and each value is a list of column data.\n All columns must have the same number of elements.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Map<@org.jetbrains.annotations.NotNull String,@org.jetbrains.annotations.NotNull Object[]>",
              "default": null,
              "name": "col2Array",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofColumnsArrays(Map<@org.jetbrains.annotations.NotNull String,@org.jetbrains.annotations.NotNull Object[]> col2Array)",
          "name": "ofColumnsArrays",
          "description": "Creates a table from a map where each key is a column name and each value is an array of column data.\n All columns must have the same number of elements.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "SequencedCollection<Object>",
              "default": null,
              "name": "objsList",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofObjsList(SequencedCollection<Object> objsList)",
          "name": "ofObjsList",
          "description": "Creates a table from a list of objects, where each object represents a row and object properties become columns.\n Objects are serialized to extract their fields as table columns.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Object[]",
              "default": null,
              "name": "objsArray",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofObjsArray(Object[] objsArray)",
          "name": "ofObjsArray",
          "description": "Creates a table from an array of objects, where each object represents a row and object properties become columns.\n Objects are serialized to extract their fields as table columns.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "Map<@org.jetbrains.annotations.NotNull String,Values>",
              "default": null,
              "name": "cols",
              "description": "A map where keys are column names and values are collections of column data",
              "is_optional": false
            }
          ],
          "signature": "Jt.tableFromListColumns(Map<@org.jetbrains.annotations.NotNull String,Values> cols)"
        }
      ],
      "name": "tableFromListColumns",
      "description": "Display a static table.",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.empty": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(Integer height)",
          "name": "height",
          "description": "The height of the container in pixels. When a fixed height is specified, the container will enable scrolling if content exceeds the specified height. It is recommended to use scrolling containers sparingly and avoid heights that exceed 500 pixels for optimal mobile experience.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(Boolean border)",
          "name": "border",
          "description": "Whether to show a border around the container. If not specified (null), the border is automatically shown when the container has a fixed height, and hidden when height adapts to content.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "A unique string used to identify this container",
              "is_optional": false
            }
          ],
          "signature": "Jt.empty(String key)"
        }
      ],
      "name": "empty",
      "description": "Insert a single-element container.\n  <p> \n Insert a container into your app that can be used to hold a single element.\n This allows you to, for example, remove elements at any point, or replace several elements at once (using a child multi-element container).\n  <p> \n To insert/replace/clear an element on the returned container:\n  <pre> \n  {@code\n var container = Jt.empty(\"empty-1\").use();\n Jt.yourElement().use(container);\n } \n  </pre> \n See examples below.",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.navigation": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
              "default": null,
              "name": "page",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "addPage(io.jeamlit.components.multipage.JtPage.Builder page)",
          "name": "addPage",
          "description": "Adds a page to the navigation. Pages can be added individually using this method or passed in the constructor.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.NavigationComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "hidden()",
          "name": "hidden",
          "description": "Hides the navigation menu from the user interface. The pages will still be accessible programmatically,\n but no navigation UI will be displayed. Useful for programmatic navigation or single-page apps.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.NavigationComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder[]",
              "default": null,
              "name": "pages",
              "description": "The pages to include in the navigation",
              "is_optional": false
            }
          ],
          "signature": "Jt.navigation(io.jeamlit.components.multipage.JtPage.Builder[] pages)"
        }
      ],
      "name": "navigation",
      "description": "Create a navigation component with multiple pages to create a multipage app.\n  <p> \n Call  {@code Jt.navigation}  in your entrypoint app class to define the available pages in your app.\n  {@code Jt.navigation}  use() returns the current page.\n  <p> \n When using  {@code Jt.navigation} , your entrypoint app class acts like a frame of common elements around each of your pages.\n  <p> \n The set of available pages can be updated with each rerun for dynamic navigation.\n By default,  {@code Jt.navogation}  displays the available pages in the sidebar if there is more than one page.\n This behavior can be changed using the  {@code position}  builder method.",
      "returns": [
        {
          "type_name": "JtPage",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.componentsState": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.componentsState()"
        }
      ],
      "name": "componentsState",
      "description": "Return the components state of the session. A session corresponds to an opened tab of the app.\n  <p> \n The current value of any component can be obtained from this map.\n When putting a component in the app, us the  {@code .key()}  method to define a specific key that will be easy\n to access from this map.",
      "returns": [
        {
          "type_name": "io.jeamlit.datastructure.TypedMap",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.switchPage": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class<?>",
              "default": null,
              "name": "pageApp",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "Jt.switchPage(Class<?> pageApp)"
        }
      ],
      "name": "switchPage",
      "description": "Programmatically switch the current page in a multipage app.\n  <p> \n When  {@code Jt.switchPage}  is called, the current page execution stops and the specified page runs as if the\n user clicked on it in the sidebar navigation. The specified page must be recognized by Jeamlit's multipage\n architecture (your main app class or an app class in the available pages).",
      "returns": [],
      "source": ""
    },
    "Jt.button": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "The button appearance type. Can be \"primary\", \"secondary\" (default), or \"tertiary\".",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "An icon to display with the error message. The following values are valid:\n  <ul> \n      <li> A single-character emoji. For example:  {@code \\ud83d\\udd25} . Emoji short codes are not supported. </li> \n      <li> An icon from the Material Symbols library (rounded style) in the format \":icon_name:\" where \"icon_name\" is the name of the icon in snake case. For example:  {@code :search:} . See full list of icons  <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\"> here </a> . </li> \n  </ul> \n If null (default), no icon is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed when the button is hovered over.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disable the button if set to true. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "Makes the button fill the width of its container if set to true.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Consumer<Boolean>",
              "default": null,
              "name": "onClick",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onClick(function.Consumer<Boolean> onClick)",
          "name": "onClick",
          "description": "An optional callback invoked when this button is clicked.\n The value passed to the callback is the previous value of the component.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "A short label explaining to the user what this button is for. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.button(String label)"
        }
      ],
      "name": "button",
      "description": "Display a button widget.",
      "returns": [
        {
          "type_name": "boolean",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.dateInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(java.time.LocalDate value)",
          "name": "value",
          "description": "The value of this widget when it first renders. Can be a specific date or  {@code null}  for no initial value.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "minValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "minValue(java.time.LocalDate minValue)",
          "name": "minValue",
          "description": "The minimum selectable date. If  {@code null} , defaults to ten years before the initial value.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "maxValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxValue(java.time.LocalDate maxValue)",
          "name": "maxValue",
          "description": "The maximum selectable date. If  {@code null} , defaults to ten years after the initial value.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Consumer<java.time.@org.jetbrains.annotations.Nullable LocalDate>",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer<java.time.@org.jetbrains.annotations.Nullable LocalDate> onChange)",
          "name": "onChange",
          "description": "An optional callback invoked when the date input's value changes.\n The value passed to the callback is the previous value of the component.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "Controls how dates are displayed in the interface. Supported formats:  {@code YYYY/MM/DD} ,  {@code DD/MM/YYYY} ,  {@code MM/DD/YYYY} .\n You may also use a period ( {@code .} ) or hyphen ( {@code -} ) as separators.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disable the date input if set to true. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(.JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "The visibility of the label. The default is  {@code VISIBLE} .\n If this is  {@code HIDDEN} , Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is  {@code COLLAPSED} , Jeamlit displays no label or spacer.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "Controls the widget's width. Can be \"stretch\" to match parent container or a pixel value as string.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "A short label explaining to the user what this date input is for. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.dateInput(String label)"
        }
      ],
      "name": "dateInput",
      "description": "Display a date input widget that can be configured to accept a single date or a date range.",
      "returns": [
        {
          "type_name": "LocalDate",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.title": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "anchor",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "anchor(String anchor)",
          "name": "anchor",
          "description": "The anchor name of the header that can be accessed with #anchor in the URL.\n If omitted, it generates an anchor using the body. If False, the anchor is not shown in the UI.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"content\" (default): The width of the element matches the width of its content, but doesn't exceed the width of the parent container.\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "The text to display. Markdown is supported, see  {@link #markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.title(String body)"
        }
      ],
      "name": "title",
      "description": "Display text in title formatting.\n Each document should have a single st.title(), although this is not enforced.",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.page": {
      "builderMethods": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "title",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "title(String title)",
          "name": "title",
          "description": "",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "An icon to display with the error message. The following values are valid:\n  <ul> \n      <li> A single-character emoji. For example:  {@code \\ud83d\\udd25} . Emoji short codes are not supported. </li> \n      <li> An icon from the Material Symbols library (rounded style) in the format \":icon_name:\" where \"icon_name\" is the name of the icon in snake case. For example:  {@code :search:} . See full list of icons  <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\"> here </a> . </li> \n  </ul> \n If null (default), no icon is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "urlPath",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "urlPath(String urlPath)",
          "name": "urlPath",
          "description": "",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "home()",
          "name": "home",
          "description": "make the page the default homepage",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "section",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "section(String section)",
          "name": "section",
          "description": "",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class<?>",
              "default": null,
              "name": "pageApp",
              "description": "The class containing the main method for this page",
              "is_optional": false
            }
          ],
          "signature": "Jt.page(Class<?> pageApp)"
        }
      ],
      "name": "page",
      "description": "Create a page for  {@code Jt.navigation}  in a multipage app.",
      "returns": [
        {
          "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.error": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "body(String body)",
          "name": "body",
          "description": "The error message content to display. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "An icon to display with the error message. The following values are valid:\n  <ul> \n      <li> A single-character emoji. For example:  {@code \\ud83d\\udd25} . Emoji short codes are not supported. </li> \n      <li> An icon from the Material Symbols library (rounded style) in the format \":icon_name:\" where \"icon_name\" is the name of the icon in snake case. For example:  {@code :search:} . See full list of icons  <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\"> here </a> . </li> \n  </ul> \n If null (default), no icon is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "The error text to display. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.error(String body)"
        }
      ],
      "name": "error",
      "description": "Display error message.",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.echarts": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int height)",
          "name": "height",
          "description": "The height of the chart in pixels.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(Integer width)",
          "name": "width",
          "description": "The width of the chart in pixels. If null, the chart will use its default width.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.components.chart.EchartsComponent.Theme",
              "default": null,
              "name": "theme",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "theme(io.jeamlit.components.chart.EchartsComponent.Theme theme)",
          "name": "theme",
          "description": "The chart theme using a predefined theme from the Theme enum.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "theme",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "theme(String theme)",
          "name": "theme",
          "description": "The chart theme using a custom theme name. Custom themes can be loaded through custom headers.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "org.icepear.echarts.Chart<?,?>",
              "default": null,
              "name": "chart",
              "description": "The ECharts  {@code Chart}  object to display",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(org.icepear.echarts.Chart<?,?> chart)"
        },
        {
          "args": [
            {
              "type_name": "org.icepear.echarts.Option",
              "default": null,
              "name": "chartOption",
              "description": "The ECharts  {@code Option}  object to display",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(org.icepear.echarts.Option chartOption)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "chartOptionJson",
              "description": "The ECharts option as a JSON string",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(String chartOptionJson)"
        }
      ],
      "name": "echarts",
      "description": "Display a chart using ECharts library.\n See  <a href=\"https://echarts.icepear.org/\" target=\"_blank\"> echarts-java documentation </a>  for more info.",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.divider": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"content\" (default): The width of the element matches the width of its content, but doesn't exceed the width of the parent container.\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.divider()"
        }
      ],
      "name": "divider",
      "description": "Display a horizontal rule.",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.slider": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "min",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "min(double min)",
          "name": "min",
          "description": "The minimum permitted value.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "max",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "max(double max)",
          "name": "max",
          "description": "The maximum permitted value.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(double value)",
          "name": "value",
          "description": "The initial slider value. Defaults to the  {@code min}  value.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "step",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "step(double step)",
          "name": "step",
          "description": "The stepping interval. Default is 1.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "A printf-style format string controlling how the interface should display numbers. This does not impact the return value.\n  <p> \n For information about formatting integers and floats, see  <a href=\"https://github.com/alexei/sprintf.js?tab=readme-ov-file#format-specification\" target=\"_blank\"> sprintf.js </a> .\n For example, format=\"%0.1f\" adjusts the displayed decimal precision to only show one digit after the decimal.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disable the slider if set to true. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(.JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "The visibility of the label. The default is  {@code VISIBLE} .\n If this is  {@code HIDDEN} , Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is  {@code COLLAPSED} , Jeamlit displays no label or spacer.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Consumer<Double>",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer<Double> onChange)",
          "name": "onChange",
          "description": "An optional callback function invoked when the slider value changes.\n The value passed to the callback is the previous value of the component.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "A short label explaining to the user what this slider is for. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.slider(String label)"
        }
      ],
      "name": "slider",
      "description": "Display a slider widget.",
      "returns": [
        {
          "type_name": "double",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.radio": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "index",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "index(Integer index)",
          "name": "index",
          "description": "The index of the preselected option on first render. If  {@code null} , initializes empty and returns  {@code null}  until user selection.\n Defaults to 0 (the first option).",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Function<@org.jetbrains.annotations.Nullable T,String>",
              "default": null,
              "name": "formatFunction",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "formatFunction(function.Function<@org.jetbrains.annotations.Nullable T,String> formatFunction)",
          "name": "formatFunction",
          "description": "Function to modify the display of the radio options. The  {@code Function}  receives the raw option object\n and returns a String that will be used as display label.\n Does not impact the return value of the component.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the widget label. If null, no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Consumer<@org.jetbrains.annotations.NotNull T>",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer<@org.jetbrains.annotations.NotNull T> onChange)",
          "name": "onChange",
          "description": "An optional callback invoked when the radio button's value changes.\n The value passed to the callback is the previous value of the component.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disables the radio buttons if set to true. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "horizontal",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "horizontal(boolean horizontal)",
          "name": "horizontal",
          "description": "Orients the radio group horizontally instead of vertically when set to true.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List<String>",
              "default": null,
              "name": "captions",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "captions(List<String> captions)",
          "name": "captions",
          "description": "A list of captions to show below each radio button. If  {@code null}  (default), no captions are shown.\n Must match the size of the options list.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(.JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "The visibility of the label. The default is  {@code VISIBLE} .\n If this is  {@code HIDDEN} , Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is  {@code COLLAPSED} , Jeamlit displays no label or spacer.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"content\" (default): The width of the element matches the width of its content, but doesn't exceed the width of the parent container.\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the radio group in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder<T>",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "A short label explaining to the user what this radio selection is for. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            },
            {
              "type_name": "List<T>",
              "default": null,
              "name": "options",
              "description": "The list of options to choose from",
              "is_optional": false
            }
          ],
          "signature": "Jt.radio(String label, List<T> options)"
        }
      ],
      "name": "radio",
      "description": "Display a radio button widget.",
      "returns": [
        {
          "type_name": "Nullable T",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.table": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Map<@org.jetbrains.annotations.NotNull String,Values>",
              "default": null,
              "name": "col2List",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofColumnsLists(Map<@org.jetbrains.annotations.NotNull String,Values> col2List)",
          "name": "ofColumnsLists",
          "description": "Creates a table from a map where each key is a column name and each value is a list of column data.\n All columns must have the same number of elements.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Map<@org.jetbrains.annotations.NotNull String,@org.jetbrains.annotations.NotNull Object[]>",
              "default": null,
              "name": "col2Array",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofColumnsArrays(Map<@org.jetbrains.annotations.NotNull String,@org.jetbrains.annotations.NotNull Object[]> col2Array)",
          "name": "ofColumnsArrays",
          "description": "Creates a table from a map where each key is a column name and each value is an array of column data.\n All columns must have the same number of elements.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "SequencedCollection<Object>",
              "default": null,
              "name": "objsList",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofObjsList(SequencedCollection<Object> objsList)",
          "name": "ofObjsList",
          "description": "Creates a table from a list of objects, where each object represents a row and object properties become columns.\n Objects are serialized to extract their fields as table columns.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Object[]",
              "default": null,
              "name": "objsArray",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofObjsArray(Object[] objsArray)",
          "name": "ofObjsArray",
          "description": "Creates a table from an array of objects, where each object represents a row and object properties become columns.\n Objects are serialized to extract their fields as table columns.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "List<Object>",
              "default": null,
              "name": "rows",
              "description": "The list of objects representing table rows",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(List<Object> rows)"
        },
        {
          "args": [
            {
              "type_name": "Object[]",
              "default": null,
              "name": "rows",
              "description": "The array of objects representing table rows",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(Object[] rows)"
        }
      ],
      "name": "table",
      "description": "Display a static table.",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.toggle": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(boolean value)",
          "name": "value",
          "description": "Preselect the toggle when first rendered.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "function.Consumer<@org.jetbrains.annotations.NotNull Boolean>",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer<@org.jetbrains.annotations.NotNull Boolean> onChange)",
          "name": "onChange",
          "description": "An optional callback function invoked when the toggle value changes.\n The value passed in the callback is the previous value of the component.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "A tooltip that gets displayed next to the text. If this is null (default), no tooltip is displayed.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "Disables the toggle if set to true. When disabled, users cannot interact with the widget.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(.JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "The visibility of the label. The default is  {@code VISIBLE} .\n If this is  {@code HIDDEN} , Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is  {@code COLLAPSED} , Jeamlit displays no label or spacer.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"content\" (default): The width of the element matches the width of its content, but doesn't exceed the width of the parent container.\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "A short label explaining to the user what this toggle is for. Markdown is supported, see  {@link io.jeamlit.core.Jt#markdown(String)}  for more details.",
              "is_optional": false
            }
          ],
          "signature": "Jt.toggle(String label)"
        }
      ],
      "name": "toggle",
      "description": "Display a toggle widget.",
      "returns": [
        {
          "type_name": "NotNull Boolean",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.cache": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.cache()"
        }
      ],
      "name": "cache",
      "description": "Return the app cache. The app cache is shared across all sessions.\n Put values in this map that are meant to be shared across all users.\n For instance: database long-lived connections, ML models loaded weights, etc...\n  <p> \n See https://docs.jeamlit.io/get-started/fundamentals/advanced-concepts#caching",
      "returns": [
        {
          "type_name": "io.jeamlit.datastructure.TypedMap",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.sessionState": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.sessionState()"
        }
      ],
      "name": "sessionState",
      "description": "Return the session state Map of the session. A session corresponds to an opened tab of the app.\n  <p> \n The session state is maintained across re-runs.\n Values can be stored and persisted in this map.",
      "returns": [
        {
          "type_name": "io.jeamlit.datastructure.TypedMap",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.urlQueryParameters": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.urlQueryParameters()"
        }
      ],
      "name": "urlQueryParameters",
      "description": "Return the current query parameters as a map.\n  <p> \n For instance:  {@code ?key1=foo&key2=bar&key2=fizz}  will return\n {\"key1\": [\"foo\"], \"key2\": [\"bar\", \"fizz\"]}",
      "returns": [
        {
          "type_name": "Map<String,List<String>>",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.tableFromArrayColumns": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Map<@org.jetbrains.annotations.NotNull String,Values>",
              "default": null,
              "name": "col2List",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofColumnsLists(Map<@org.jetbrains.annotations.NotNull String,Values> col2List)",
          "name": "ofColumnsLists",
          "description": "Creates a table from a map where each key is a column name and each value is a list of column data.\n All columns must have the same number of elements.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Map<@org.jetbrains.annotations.NotNull String,@org.jetbrains.annotations.NotNull Object[]>",
              "default": null,
              "name": "col2Array",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofColumnsArrays(Map<@org.jetbrains.annotations.NotNull String,@org.jetbrains.annotations.NotNull Object[]> col2Array)",
          "name": "ofColumnsArrays",
          "description": "Creates a table from a map where each key is a column name and each value is an array of column data.\n All columns must have the same number of elements.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "SequencedCollection<Object>",
              "default": null,
              "name": "objsList",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofObjsList(SequencedCollection<Object> objsList)",
          "name": "ofObjsList",
          "description": "Creates a table from a list of objects, where each object represents a row and object properties become columns.\n Objects are serialized to extract their fields as table columns.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Object[]",
              "default": null,
              "name": "objsArray",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofObjsArray(Object[] objsArray)",
          "name": "ofObjsArray",
          "description": "Creates a table from an array of objects, where each object represents a row and object properties become columns.\n Objects are serialized to extract their fields as table columns.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "Map<@org.jetbrains.annotations.NotNull String,@org.jetbrains.annotations.NotNull Object[]>",
              "default": null,
              "name": "cols",
              "description": "A map where keys are column names and values are arrays of column data",
              "is_optional": false
            }
          ],
          "signature": "Jt.tableFromArrayColumns(Map<@org.jetbrains.annotations.NotNull String,@org.jetbrains.annotations.NotNull Object[]> cols)"
        }
      ],
      "name": "tableFromArrayColumns",
      "description": "Display a static table.",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.urlPath": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.urlPath()"
        }
      ],
      "name": "urlPath",
      "description": "Return the current url path.\n  <p> \n May be used for multipage apps.\n In a single page app, will always return  {@code \"/\"} .",
      "returns": [
        {
          "type_name": "String",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.tabs": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.TabsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.TabsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "A unique string used to identify this tabs container",
              "is_optional": false
            },
            {
              "type_name": "List<@org.jetbrains.annotations.NotNull String>",
              "default": null,
              "name": "tabs",
              "description": "A list of tab labels",
              "is_optional": false
            }
          ],
          "signature": "Jt.tabs(String key, List<@org.jetbrains.annotations.NotNull String> tabs)"
        }
      ],
      "name": "tabs",
      "description": "Insert containers separated into tabs.\n  <p> \n Inserts a number of multi-element containers as tabs.\n Tabs are a navigational element that allows users to easily move between groups of related content.\n  <p> \n To add elements to the returned tabs container:\n  <pre> \n  {@code\n var tabs = Jt.tabs(\"my-tabs\", List.of(\"E-commerce\", \"Industry\", \"Finance\")).use();\n // get tab by name\n Jt.yourElement().use(tabs.tab(\"E-commerce\"));\n // get tab by index\n Jt.yourElement().use(tabs.tab(2));\n } \n  </pre> \n See examples below.",
      "returns": [
        {
          "type_name": "Tabs",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.form": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "clearOnSubmit",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "clearOnSubmit(boolean clearOnSubmit)",
          "name": "clearOnSubmit",
          "description": "If True, all widgets inside the form will be reset to their default values after the user presses the Submit button.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "enterToSubmit",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "enterToSubmit(boolean enterToSubmit)",
          "name": "enterToSubmit",
          "description": "If True (default), pressing Enter while in a form widget is like clicking the first form submit button. If False, the user must click the submit button to submit the form.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "Whether to show a border around the form. Default is  {@code true} . It is recommended to only remove the border if there is another border or the form is small.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "The width of the element. This can be one of the following:\n - \"content\" (default): The width of the element matches the width of its content, but doesn't exceed the width of the parent container.\n - \"stretch\": The width of the element matches the width of the parent container.\n - An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "The height of the form container. Can be \"content\" (default - matches height of content), \"stretch\" (matches content or parent container height), or a specific pixel value (sets a fixed height, enabling scrolling if content exceeds it).",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "Put the widget in the app, in the MAIN container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(.JtContainer container)",
          "name": "use",
          "description": "Put the widget in the app, in the provided container.",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "A unique string used to identify this form",
              "is_optional": false
            }
          ],
          "signature": "Jt.form(String key)"
        }
      ],
      "name": "form",
      "description": "Create a form that batches elements together with a 'Submit' button.\n  <p> \n A form is a container that visually groups other elements and widgets together, and contains a Submit button.\n When the form's Submit button is pressed, all widget values inside the form will be sent to Jeamlit in a batch.\n  <p> \n To add elements to the form:\n  <pre> \n  {@code\n var form = Jt.form(\"my-form-1\").use();\n Jt.yourElement().use(form);\n ...\n Jt.formSubmitButton(\"submit form\").use();\n } \n  </pre> \n  <p> \n Forms have a few constraints:\n  <ul> \n      <li> Every form must contain a  {@code Jt.formSubmitButton)} </li> \n      <li> {@code Jt.button}  and  {@code Jt.downloadButton}  cannot be added to a form </li> \n      <li> Forms can appear anywhere in your app (sidebar, columns, etc), but they cannot be embedded inside other forms </li> \n      <li> Within a form, the only widget that can have a callback function is  {@code Jt.formSubmitButton)} </li> \n  </ul>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    }
  },
  "0.100.0": {
    "Jt.textInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(String value)",
          "name": "value",
          "description": "<p>The text value of this widget when it first renders. Defaults to empty string.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "maxChars",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxChars(Integer maxChars)",
          "name": "maxChars",
          "description": "<p>The maximum number of characters allowed in the text input.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "<p>Can be &quot;default&quot; or &quot;password&quot;. Determines if input masks the user&#39;s typed value.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "autocomplete",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "autocomplete(String autocomplete)",
          "name": "autocomplete",
          "description": "<p>An optional value that will be passed to the <input> element&#39;s autocomplete property. If unspecified, this value will be set to &quot;new-password&quot; for &quot;password&quot; inputs, and the empty string for &quot;default&quot; inputs.\n For more details, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete</a>.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>An optional string displayed when the text input is empty.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the text input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Jeamlit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>Controls the widget width. Can be &quot;stretch&quot; (default) or a pixel value.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;String&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;String&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the text input&#39;s value changes.\n The value passed in the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this input is for. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.textInput(String label)"
        }
      ],
      "name": "textInput",
      "description": "<p>Display a single-line text input widget.</p>",
      "returns": [
        {
          "type_name": "string",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.code": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "language",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "language(String language)",
          "name": "language",
          "description": "<p>The language that the code is written in, for syntax highlighting. This defaults to <code>java</code>.\n If this is <code>null</code>, the code will be plain, monospace text.\n <p>\n For a list of available language values, see list on <a href=\"https://prismjs.com/#supported-languages\">prismjs documentation</a>.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "lineNumbers",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "lineNumbers(boolean lineNumbers)",
          "name": "lineNumbers",
          "description": "<p>An optional boolean indicating whether to show line numbers to the left of the code block. This defaults to <code>false</code>.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "wrapLines",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "wrapLines(boolean wrapLines)",
          "name": "wrapLines",
          "description": "<p>An optional boolean indicating whether to wrap lines. This defaults to <code>false</code>.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "<p>The height of the code block element. This can be one of the following:\n <p>\n <ul>\n  <li><code>content</code> (default): The height of the element matches the height of its content.</li>\n  <li><code>stretch</code>: The height of the element matches the height of its content or the height of the parent container, whichever is larger. If the element is not in a parent container, the height of the element matches the height of its content.</li>\n  <li>An integer specifying the height in pixels: The element has a fixed height. If the content is larger than the specified height, scrolling is enabled.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "heightPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int heightPixels)",
          "name": "height",
          "description": "<p>The height of the element in pixels. The element will have a fixed height. If the content is larger than the specified height, scrolling is enabled.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;content&quot; (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The string to display as code or monospace text.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.code(String body)"
        }
      ],
      "name": "code",
      "description": "<p>Display a code block with optional syntax highlighting.</p>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.pageLink": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "label(String label)",
          "name": "label",
          "description": "<p>The text to display for the link. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the link if set to true.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the link element. Use &quot;content&quot; to fit content, &quot;stretch&quot; to fill container, or a pixel value.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class&lt;?&gt;",
              "default": null,
              "name": "pageClass",
              "description": "<p>The class of the page to link to in a multipage app.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.pageLink(Class&lt;?&gt; pageClass)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "url",
              "description": "<p>The URL to link to</p>",
              "is_optional": false
            },
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The text to display for the link. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.pageLink(String url, String label)"
        }
      ],
      "name": "pageLink",
      "description": "<p>Display a link to another page in a multipage app or to an external page.\n <p>\n If another page in a multipage app is specified, clicking the {Jt.pageLink} element stops the current page execution\n and runs the specified page as if the user clicked on it in the sidebar navigation.\n <p>\n If an external page is specified, clicking the <code>Jt.pageLink</code> element opens a new tab to the specified page.\n The current script run will continue if not complete.</p>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.textArea": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(String value)",
          "name": "value",
          "description": "<p>The initial text value when the widget renders. Defaults to empty string.\n If <code>null</code>, will initialize empty and return <code>null</code> until the user provides input.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "<p>The text area widget height. This can be &quot;content&quot;, &quot;stretch&quot;, or a pixel value. Minimum height is 2 lines.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "heightInPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int heightInPixels)",
          "name": "height",
          "description": "<p>The text area widget height in pixels. Minimum height is 2 lines.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "maxChars",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxChars(Integer maxChars)",
          "name": "maxChars",
          "description": "<p>The maximum number of characters allowed in the text area.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>The text displayed when the text area is empty.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the text area input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Jeamlit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The widget width. Can be &quot;stretch&quot; (default) or a pixel value.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;String&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;String&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function that will be called when the text area value changes.\n The value passed in the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this input is for. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.textArea(String label)"
        }
      ],
      "name": "textArea",
      "description": "<p>Display a multi-line text input widget.</p>",
      "returns": [
        {
          "type_name": "string",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.text": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "body(String body)",
          "name": "body",
          "description": "<p>The string to display.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;content&quot; (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The string to display.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.text(String body)"
        }
      ],
      "name": "text",
      "description": "<p>Write text without Markdown or HTML parsing.\n For monospace text, use <code>Jt#code</code></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.checkbox": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(boolean value)",
          "name": "value",
          "description": "<p>Preselect the checkbox when first rendered.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;Boolean&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function invoked when the checkbox value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the checkbox if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Jeamlit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;content&quot; (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this checkbox is for. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.checkbox(String label)"
        }
      ],
      "name": "checkbox",
      "description": "<p>Display a checkbox widget.</p>",
      "returns": [
        {
          "type_name": "NotNull Boolean",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.selectBox": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "index",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "index(Integer index)",
          "name": "index",
          "description": "<p>The index of the preselected option on first render. If <code>null</code>, initializes empty and returns <code>null</code> until user selection.\n Defaults to 0 (the first option).</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Function&lt;T, String&gt;",
              "default": null,
              "name": "formatFunction",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "formatFunction(function.Function&lt;T, String&gt; formatFunction)",
          "name": "formatFunction",
          "description": "<p>Function to modify the display of the options. The <code>Function</code> receives the raw option object and returns a String that will be used as display label.\n Does not impact the return value of the component.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the widget label. If <code>null</code>, no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;T&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;T&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the selectbox value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the selectbox if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Jeamlit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;content&quot; (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the selectbox in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>Text displayed when no option is selected. Default varies based on widget configuration.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "acceptNewOptions",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "acceptNewOptions(boolean acceptNewOptions)",
          "name": "acceptNewOptions",
          "description": "<p>Whether the user can add a selection that isn&#39;t included in options.\n If this is <code>false</code> (default), the user can only select from the items in options.\n If this is <code>true</code>, the user can enter a new item that doesn&#39;t exist in options.\n <p>\n When a user enters a new item, it is returned by the widget as a string.\n The new item is not added to the widget&#39;s drop-down menu. Jeamlit will use a case-insensitive match\n from options before adding a new item.\n <p>\n Only compatible with selectbox of <code>String</code> values.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this selection is for. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            },
            {
              "type_name": "List&lt;T&gt;",
              "default": null,
              "name": "options",
              "description": "<p>The list of options to choose from</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.selectBox(String label, List&lt;T&gt; options)"
        }
      ],
      "name": "selectBox",
      "description": "<p>Display a select widget.</p>",
      "returns": [
        {
          "type_name": "Nullable T",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.expander": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "expanded",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "expanded(boolean expanded)",
          "name": "expanded",
          "description": "<p>The initial state of the expander. When set to <code>true</code>, the expander starts in the expanded state. When <code>false</code> (default), the expander starts collapsed.\n Note that all content within the expander is computed and sent to the frontend regardless of the initial state.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>A unique string used to identify this expander</p>",
              "is_optional": false
            },
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The label for the expander header</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.expander(String key, String label)"
        }
      ],
      "name": "expander",
      "description": "<p>Insert a multi-element container that can be expanded/collapsed.\n <p>\n Insert a container into your app that can be used to hold multiple elements and can be expanded or collapsed by the user.\n When collapsed, all that is visible is the provided label.\n <p>\n To add elements to the returned expander:\n <pre>\n <code>\n var expander = Jt.expander(&quot;my-expander&quot;, &quot;More details&quot;).use();\n Jt.yourElement().use(expander);\n </code>\n </pre>\n See examples below.</p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.formSubmitButton": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "<p>The button type that determines its appearance and emphasis level. Can be &quot;primary&quot;, &quot;secondary&quot; (default), or &quot;tertiary&quot;.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the button if set to True. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "<p>Controls the button width. If True, the button width matches the parent container width. If False (default), the button width matches its content width. This parameter is deprecated - use width() instead.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onClick",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onClick(function.Consumer&lt;Boolean&gt; onClick)",
          "name": "onClick",
          "description": "<p>An optional callable function that is invoked when the button is clicked.\n The callback receives the previous button click state as a parameter. In this case, the previous click state is always <code>false</code>.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The text to display on the submit button</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.formSubmitButton(String label)"
        }
      ],
      "name": "formSubmitButton",
      "description": "<p>Display a form submit button.\n <p>\n When clicked, all widget values inside the form will be sent from the user&#39;s browser to the Jeamlit server in a batch.\n <p>\n Every form must have at least one <code>Jt.formSubmitButton</code>. A <code>Jt.formSubmitButton</code> cannot exist outside a form.</p>",
      "returns": [
        {
          "type_name": "boolean",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.container": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(Integer height)",
          "name": "height",
          "description": "<p>The height of the container in pixels. When a fixed height is specified, the container will enable scrolling if content exceeds the specified height. It is recommended to use scrolling containers sparingly and avoid heights that exceed 500 pixels for optimal mobile experience.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(Boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the container. If not specified (<code>null</code>), the border is automatically shown when the container has a fixed height, and hidden when height adapts to content.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>A unique string used to identify this container</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.container(String key)"
        }
      ],
      "name": "container",
      "description": "<p>Insert a multi-element container.\n <p>\n Insert an invisible container into your app that can be used to hold multiple elements.\n This allows you to, for example, insert multiple elements into your app out of order.\n <p>\n To add elements to the returned container:\n <pre>\n <code>\n var container = Jt.container(&quot;container-1&quot;).use();\n Jt.yourElement().use(container);\n </code>\n </pre>\n See examples below.</p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.popover": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the popover button if set to True. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "<p>Controls the button width. If True, the button width matches the parent container width. If False (default), the button width matches its content width. This parameter is deprecated - use width() instead.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>A unique string used to identify this popover</p>",
              "is_optional": false
            },
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The label for the popover button. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.popover(String key, String label)"
        }
      ],
      "name": "popover",
      "description": "<p>Insert a popover container.\n <p>\n Inserts a multi-element container as a popover. It consists of a button-like element and a container that opens when the button is clicked.\n <p>\n Opening and closing the popover will not trigger a rerun. Interacting with widgets inside of an open popover will\n rerun the app while keeping the popover open. Clicking outside of the popover will close it.\n <p>\n To add elements to the returned popover:\n <pre>\n <code>\n var popover = Jt.popover(&quot;my-popover&quot;, &quot;Advanced configuration&quot;).use();\n Jt.yourElement().use(popover);\n </code>\n </pre>\n See examples below.</p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.numberInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(T value)",
          "name": "value",
          "description": "<p>The value of this widget when it first renders.\n If <code>null</code>, initializes with no value and returns null until an input is provided to the component.\n The default behavior is to return the minimum value. If the minimum value is not set, the widget initializes\n with a value of <code>0</code>.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "minValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "minValue(T minValue)",
          "name": "minValue",
          "description": "<p>The minimum permitted value. For <code>Integer</code> and <code>Long</code>, defaults to the corresponding minimum\n possible value.\n For <code>Float</code> and <code>Double</code>, no minimum by default.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "maxValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxValue(T maxValue)",
          "name": "maxValue",
          "description": "<p>The maximum permitted value. For <code>Integer</code> and <code>Long</code>, defaults to the corresponding maximum\n possible value.\n For <code>Float</code> and <code>Double</code>, no maximum by default.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "step",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "step(T step)",
          "name": "step",
          "description": "<p>The stepping interval. Defaults to 1 for <code>Integer</code> and <code>Long</code>, 0.01 for floating points.\n Must be strictly positive.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "<p>A printf-style format string controlling how numbers are displayed in the interface.\n The output must be purely numeric. This does not impact the return value of the widget.\n For more information about the formatting specification, see <a href=\"https://github.com/alexei/sprintf.js?tab=readme-ov-file#format-specification\" target=\"_blank\">sprintf.js</a>.\n <p>\n For example, <code>format=&quot;%0.1f&quot;</code> adjusts the displayed decimal precision to only show one digit after the decimal.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the widget label. If <code>null</code>, no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>An optional text displayed when the number input is empty, providing guidance to the user.\n If None, no placeholder is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the number input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Jeamlit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the number input in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;T&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;T&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the number input&#39;s value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this numeric input is for. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.numberInput(String label)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this numeric input is for. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            },
            {
              "type_name": "Class&lt;T&gt;",
              "default": null,
              "name": "valueClass",
              "description": "<p>The number type class (Integer, Double, Float, etc.)</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.numberInput(String label, Class&lt;T&gt; valueClass)"
        }
      ],
      "name": "numberInput",
      "description": "<p>Display a numeric input widget.</p>",
      "returns": [
        {
          "type_name": "T",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.fileUploader": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List&lt;String&gt;",
              "default": null,
              "name": "types",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(List&lt;String&gt; types)",
          "name": "type",
          "description": "<p>The allowed file extensions or MIME types. If <code>null</code>, all file types are allowed. Use file extensions like <code>&quot;.pdf&quot;</code> or MIME types like <code>&quot;image/png&quot;</code>.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.MultipleFiles",
              "default": null,
              "name": "acceptMultipleFiles",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "acceptMultipleFiles(io.jeamlit.components.media.FileUploaderComponent.MultipleFiles acceptMultipleFiles)",
          "name": "acceptMultipleFiles",
          "description": "<p>Whether to accept more than one file in a submission. This can be one of the following values:\n <ul>\n     <li><code>MultipleFiles.FALSE</code> (default): The user can only submit one file at a time.</li>\n     <li><code>MultipleFiles.TRUE</code>: The user can upload multiple files at the same time.</li>\n     <li><code>MultipleFiles.DIRECTORY</code>: The user can select a directory to upload all files in the directory and its subdirectories. If <code>type</code> is set, only files matching those type(s) will be uploaded.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the file uploader if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;List&lt;io.jeamlit.core.JtUploadedFile&gt;&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;List&lt;JtUploadedFile&gt;&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the file uploader&#39;s value changes.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Jeamlit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the text element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this file uploader is for. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.fileUploader(String label)"
        }
      ],
      "name": "fileUploader",
      "description": "<p>Display a file uploader widget.</p>",
      "returns": [
        {
          "type_name": "JtUploadedFile>",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.markdown": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;content&quot; (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The text to display as Markdown.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.markdown(String body)"
        }
      ],
      "name": "markdown",
      "description": "<p>Display string formatted as Markdown.\n <p>\n Supported :\n <ul>\n     <li>Emoji shortcodes, such as <code>:+1:</code> and <code>:sunglasses:</code>. For a list of all supported codes, see <a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\">https://www.webfx.com/tools/emoji-cheat-sheet/</a>.</li>\n     <li>Tables</li>\n     <li>Strikethrough</li>\n     <li>Autolink: turns plain links such as URLs and email addresses into links</li>\n </ul></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.html": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;content&quot; (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.HtmlComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.HtmlComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The HTML code to insert.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.html(String body)"
        },
        {
          "args": [
            {
              "type_name": "java.nio.file.Path",
              "default": null,
              "name": "filePath",
              "description": "<p>The path of the file containing the HTML code to insert.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.html(java.nio.file.Path filePath)"
        }
      ],
      "name": "html",
      "description": "<p>Insert HTML into your app.\n <p>\n Adding custom HTML to your app impacts safety, styling, and maintainability.\n We sanitize HTML with <a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a>, but inserting HTML remains a developer risk.\n Passing untrusted code to Jt.html or dynamically loading external code can increase the risk of vulnerabilities in your app.\n <p>\n <code>Jt.html</code> content is not iframed. Executing JavaScript is not supported.</p>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.columns": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "numColumns",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "numColumns(int numColumns)",
          "name": "numColumns",
          "description": "<p>The number of columns to create. Must be between 2 and 12 inclusive. Each column will have equal width\n unless custom widths are specified.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List&lt;Double&gt;",
              "default": null,
              "name": "widths",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "widths(List&lt;Double&gt; widths)",
          "name": "widths",
          "description": "<p>A list of relative column widths. The list size must match the number of columns. For example, [0.7, 0.3]\n creates two columns with 70% and 30% width respectively. If not specified, all columns have equal width.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.Gap",
              "default": null,
              "name": "gap",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "gap(io.jeamlit.components.layout.ColumnsComponent.Gap gap)",
          "name": "gap",
          "description": "<p>Controls the space between columns. Options are <code>SMALL</code> (<code>1rem</code> gap, default), <code>MEDIUM</code> (<code>2rem</code> gap),\n <code>LARGE</code> (<code>4rem</code> gap), or <code>NONE</code> (no gap between columns).</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.VerticalAlignment",
              "default": null,
              "name": "verticalAlignment",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "verticalAlignment(io.jeamlit.components.layout.ColumnsComponent.VerticalAlignment verticalAlignment)",
          "name": "verticalAlignment",
          "description": "<p>The vertical alignment of the content inside the columns. Options are <code>TOP</code> (default), <code>CENTER</code>, or <code>BOTTOM</code>.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the column containers.\n If this is <code>false</code> (default), no border is shown. If this is <code>true</code>,\n a border is shown around each column.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>A unique string used to identify this columns container</p>",
              "is_optional": false
            },
            {
              "type_name": "int",
              "default": null,
              "name": "numColumns",
              "description": "<p>The number of columns to create</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.columns(String key, int numColumns)"
        }
      ],
      "name": "columns",
      "description": "<p>Insert containers laid out as side-by-side columns.\n <p>\n Inserts a number of multi-element containers laid out side-by-side and returns a list of container objects.\n <p>\n To add elements to the returned columns container:\n <pre>\n <code>\n var cols = Jt.columns(&quot;my-3-cols&quot;, 3).use();\n Jt.yourElement().use(cols.col(1));\n Jt.yourElement().use(cols.col(0));\n Jt.yourElement().use(cols.col(2));\n </code>\n </pre>\n See examples below.</p>",
      "returns": [
        {
          "type_name": "Columns",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.deepCopy": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "original",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "com.fasterxml.jackson.core.type.TypeReference&lt;T&gt;",
              "default": null,
              "name": "typeRef",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "Jt.deepCopy(T original, com.fasterxml.jackson.core.type.TypeReference&lt;T&gt; typeRef)"
        }
      ],
      "name": "deepCopy",
      "description": "<p>Return a deep copy of the provied object.\n <p>\n Utility that may be useful in combination with the cache, to implement a copy on read behavior.\n For instance, you can get a value that is expensive to\n instantiate from the cache, but perform a deep copy to prevent mutations and side effects across sessions.</p>",
      "returns": [
        {
          "type_name": "T",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.tableFromListColumns": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Map&lt;String, Values&gt;",
              "default": null,
              "name": "col2List",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofColumnsLists(Map&lt;String, Values&gt; col2List)",
          "name": "ofColumnsLists",
          "description": "<p>Creates a table from a map where each key is a column name and each value is a list of column data.\n All columns must have the same number of elements.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Map&lt;String, Object[]&gt;",
              "default": null,
              "name": "col2Array",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofColumnsArrays(Map&lt;String, Object[]&gt; col2Array)",
          "name": "ofColumnsArrays",
          "description": "<p>Creates a table from a map where each key is a column name and each value is an array of column data.\n All columns must have the same number of elements.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "SequencedCollection&lt;Object&gt;",
              "default": null,
              "name": "objsList",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofObjsList(SequencedCollection&lt;Object&gt; objsList)",
          "name": "ofObjsList",
          "description": "<p>Creates a table from a list of objects, where each object represents a row and object properties become columns.\n Objects are serialized to extract their fields as table columns.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Object[]",
              "default": null,
              "name": "objsArray",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofObjsArray(Object[] objsArray)",
          "name": "ofObjsArray",
          "description": "<p>Creates a table from an array of objects, where each object represents a row and object properties become columns.\n Objects are serialized to extract their fields as table columns.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "Map&lt;String, Values&gt;",
              "default": null,
              "name": "cols",
              "description": "<p>A map where keys are column names and values are collections of column data</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.tableFromListColumns(Map&lt;String, Values&gt; cols)"
        }
      ],
      "name": "tableFromListColumns",
      "description": "<p>Display a static table.</p>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.empty": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(Integer height)",
          "name": "height",
          "description": "<p>The height of the container in pixels. When a fixed height is specified, the container will enable scrolling if content exceeds the specified height. It is recommended to use scrolling containers sparingly and avoid heights that exceed 500 pixels for optimal mobile experience.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(Boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the container. If not specified (<code>null</code>), the border is automatically shown when the container has a fixed height, and hidden when height adapts to content.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>A unique string used to identify this container</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.empty(String key)"
        }
      ],
      "name": "empty",
      "description": "<p>Insert a single-element container.\n <p>\n Insert a container into your app that can be used to hold a single element.\n This allows you to, for example, remove elements at any point, or replace several elements at once (using a child multi-element container).\n <p>\n To insert/replace/clear an element on the returned container:\n <pre>\n <code>\n var container = Jt.empty(&quot;empty-1&quot;).use();\n Jt.yourElement().use(container);\n </code>\n </pre>\n See examples below.</p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.navigation": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
              "default": null,
              "name": "page",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "addPage(io.jeamlit.components.multipage.JtPage.Builder page)",
          "name": "addPage",
          "description": "<p>Adds a page to the navigation. Pages can be added individually using this method or passed in the constructor.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.NavigationComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "hidden()",
          "name": "hidden",
          "description": "<p>Hides the navigation menu from the user interface. The pages will still be accessible programmatically,\n but no navigation UI will be displayed. Useful for programmatic navigation or single-page apps.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.NavigationComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder[]",
              "default": null,
              "name": "pages",
              "description": "<p>The pages to include in the navigation</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.navigation(io.jeamlit.components.multipage.JtPage.Builder[] pages)"
        }
      ],
      "name": "navigation",
      "description": "<p>Create a navigation component with multiple pages to create a multipage app.\n <p>\n Call <code>Jt.navigation</code> in your entrypoint app class to define the available pages in your app.\n <code>Jt.navigation</code> use() returns the current page.\n <p>\n When using <code>Jt.navigation</code>, your entrypoint app class acts like a frame of common elements around each of your pages.\n <p>\n The set of available pages can be updated with each rerun for dynamic navigation.\n By default, <code>Jt.navogation</code> displays the available pages in the sidebar if there is more than one page.\n This behavior can be changed using the <code>position</code> builder method.</p>",
      "returns": [
        {
          "type_name": "JtPage",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.componentsState": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.componentsState()"
        }
      ],
      "name": "componentsState",
      "description": "<p>Return the components state of the session. A session corresponds to an opened tab of the app.\n <p>\n The current value of any component can be obtained from this map.\n When putting a component in the app, us the <code>.key()</code> method to define a specific key that will be easy\n to access from this map.</p>",
      "returns": [
        {
          "type_name": "io.jeamlit.datastructure.TypedMap",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.switchPage": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class&lt;?&gt;",
              "default": null,
              "name": "pageApp",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "Jt.switchPage(Class&lt;?&gt; pageApp)"
        }
      ],
      "name": "switchPage",
      "description": "<p>Programmatically switch the current page in a multipage app.\n <p>\n When <code>Jt.switchPage</code> is called, the current page execution stops and the specified page runs as if the\n user clicked on it in the sidebar navigation. The specified page must be recognized by Jeamlit&#39;s multipage\n architecture (your main app class or an app class in the available pages).</p>",
      "returns": [],
      "source": ""
    },
    "Jt.button": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "<p>The button appearance type. Can be &quot;primary&quot;, &quot;secondary&quot; (default), or &quot;tertiary&quot;.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed when the button is hovered over.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the button if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "<p>Makes the button fill the width of its container if set to true.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onClick",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onClick(function.Consumer&lt;Boolean&gt; onClick)",
          "name": "onClick",
          "description": "<p>An optional callback invoked when this button is clicked.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this button is for. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.button(String label)"
        }
      ],
      "name": "button",
      "description": "<p>Display a button widget.</p>",
      "returns": [
        {
          "type_name": "boolean",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.dateInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(java.time.LocalDate value)",
          "name": "value",
          "description": "<p>The value of this widget when it first renders. Can be a specific date or <code>null</code> for no initial value.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "minValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "minValue(java.time.LocalDate minValue)",
          "name": "minValue",
          "description": "<p>The minimum selectable date. If <code>null</code>, defaults to ten years before the initial value.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "maxValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxValue(java.time.LocalDate maxValue)",
          "name": "maxValue",
          "description": "<p>The maximum selectable date. If <code>null</code>, defaults to ten years after the initial value.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;java.time.LocalDate&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;java.time.LocalDate&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the date input&#39;s value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "<p>Controls how dates are displayed in the interface. Supported formats: <code>YYYY/MM/DD</code>, <code>DD/MM/YYYY</code>, <code>MM/DD/YYYY</code>.\n You may also use a period (<code>.</code>) or hyphen (<code>-</code>) as separators.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the date input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Jeamlit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>Controls the widget&#39;s width. Can be &quot;stretch&quot; to match parent container or a pixel value as string.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this date input is for. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.dateInput(String label)"
        }
      ],
      "name": "dateInput",
      "description": "<p>Display a date input widget that can be configured to accept a single date or a date range.</p>",
      "returns": [
        {
          "type_name": "LocalDate",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.title": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "anchor",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "anchor(String anchor)",
          "name": "anchor",
          "description": "<p>The anchor name of the header that can be accessed with #anchor in the URL.\n If omitted, it generates an anchor using the body. If False, the anchor is not shown in the UI.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;content&quot; (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The text to display. Markdown is supported, see <code>#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.title(String body)"
        }
      ],
      "name": "title",
      "description": "<p>Display text in title formatting.\n Each document should have a single st.title(), although this is not enforced.</p>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.page": {
      "builderMethods": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "title",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "title(String title)",
          "name": "title",
          "description": "",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "urlPath",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "urlPath(String urlPath)",
          "name": "urlPath",
          "description": "",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "home()",
          "name": "home",
          "description": "<p>make the page the default homepage</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "section",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "section(String section)",
          "name": "section",
          "description": "",
          "returns": [
            {
              "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class&lt;?&gt;",
              "default": null,
              "name": "pageApp",
              "description": "<p>The class containing the main method for this page</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.page(Class&lt;?&gt; pageApp)"
        }
      ],
      "name": "page",
      "description": "<p>Create a page for <code>Jt.navigation</code> in a multipage app.</p>",
      "returns": [
        {
          "type_name": "io.jeamlit.components.multipage.JtPage.Builder",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.error": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "body(String body)",
          "name": "body",
          "description": "<p>The error message content to display. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The error text to display. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.error(String body)"
        }
      ],
      "name": "error",
      "description": "<p>Display error message.</p>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.echarts": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int height)",
          "name": "height",
          "description": "<p>The height of the chart in pixels.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(Integer width)",
          "name": "width",
          "description": "<p>The width of the chart in pixels. If <code>null</code>, the chart will use its default width.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.components.chart.EchartsComponent.Theme",
              "default": null,
              "name": "theme",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "theme(io.jeamlit.components.chart.EchartsComponent.Theme theme)",
          "name": "theme",
          "description": "<p>The chart theme using a predefined theme from the Theme enum.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "theme",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "theme(String theme)",
          "name": "theme",
          "description": "<p>The chart theme using a custom theme name. Custom themes can be loaded through custom headers.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "org.icepear.echarts.Chart&lt;?, ?&gt;",
              "default": null,
              "name": "chart",
              "description": "<p>The ECharts <code>Chart</code> object to display</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(org.icepear.echarts.Chart&lt;?, ?&gt; chart)"
        },
        {
          "args": [
            {
              "type_name": "org.icepear.echarts.Option",
              "default": null,
              "name": "chartOption",
              "description": "<p>The ECharts <code>Option</code> object to display</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(org.icepear.echarts.Option chartOption)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "chartOptionJson",
              "description": "<p>The ECharts option as a JSON string</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(String chartOptionJson)"
        }
      ],
      "name": "echarts",
      "description": "<p>Display a chart using ECharts library.\n See <a href=\"https://echarts.icepear.org/\" target=\"_blank\">echarts-java documentation</a> for more info.</p>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.divider": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;content&quot; (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.divider()"
        }
      ],
      "name": "divider",
      "description": "<p>Display a horizontal rule.</p>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.slider": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "min",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "min(double min)",
          "name": "min",
          "description": "<p>The minimum permitted value.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "max",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "max(double max)",
          "name": "max",
          "description": "<p>The maximum permitted value.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(double value)",
          "name": "value",
          "description": "<p>The initial slider value. Defaults to the <code>min</code> value.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "step",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "step(double step)",
          "name": "step",
          "description": "<p>The stepping interval. Default is 1.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "<p>A printf-style format string controlling how the interface should display numbers. This does not impact the return value.\n <p>\n For information about formatting integers and floats, see <a href=\"https://github.com/alexei/sprintf.js?tab=readme-ov-file#format-specification\" target=\"_blank\">sprintf.js</a>.\n For example, format=&quot;%0.1f&quot; adjusts the displayed decimal precision to only show one digit after the decimal.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the slider if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Jeamlit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Double&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;Double&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function invoked when the slider value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this slider is for. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.slider(String label)"
        }
      ],
      "name": "slider",
      "description": "<p>Display a slider widget.</p>",
      "returns": [
        {
          "type_name": "double",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.radio": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "index",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "index(Integer index)",
          "name": "index",
          "description": "<p>The index of the preselected option on first render. If <code>null</code>, initializes empty and returns <code>null</code> until user selection.\n Defaults to 0 (the first option).</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Function&lt;T, String&gt;",
              "default": null,
              "name": "formatFunction",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "formatFunction(function.Function&lt;T, String&gt; formatFunction)",
          "name": "formatFunction",
          "description": "<p>Function to modify the display of the radio options. The <code>Function</code> receives the raw option object\n and returns a String that will be used as display label.\n Does not impact the return value of the component.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the widget label. If <code>null</code>, no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;T&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;T&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the radio button&#39;s value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the radio buttons if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "horizontal",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "horizontal(boolean horizontal)",
          "name": "horizontal",
          "description": "<p>Orients the radio group horizontally instead of vertically when set to true.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List&lt;String&gt;",
              "default": null,
              "name": "captions",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "captions(List&lt;String&gt; captions)",
          "name": "captions",
          "description": "<p>A list of captions to show below each radio button. If <code>null</code> (default), no captions are shown.\n Must match the size of the options list.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Jeamlit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;content&quot; (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the radio group in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this radio selection is for. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            },
            {
              "type_name": "List&lt;T&gt;",
              "default": null,
              "name": "options",
              "description": "<p>The list of options to choose from</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.radio(String label, List&lt;T&gt; options)"
        }
      ],
      "name": "radio",
      "description": "<p>Display a radio button widget.</p>",
      "returns": [
        {
          "type_name": "Nullable T",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.table": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Map&lt;String, Values&gt;",
              "default": null,
              "name": "col2List",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofColumnsLists(Map&lt;String, Values&gt; col2List)",
          "name": "ofColumnsLists",
          "description": "<p>Creates a table from a map where each key is a column name and each value is a list of column data.\n All columns must have the same number of elements.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Map&lt;String, Object[]&gt;",
              "default": null,
              "name": "col2Array",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofColumnsArrays(Map&lt;String, Object[]&gt; col2Array)",
          "name": "ofColumnsArrays",
          "description": "<p>Creates a table from a map where each key is a column name and each value is an array of column data.\n All columns must have the same number of elements.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "SequencedCollection&lt;Object&gt;",
              "default": null,
              "name": "objsList",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofObjsList(SequencedCollection&lt;Object&gt; objsList)",
          "name": "ofObjsList",
          "description": "<p>Creates a table from a list of objects, where each object represents a row and object properties become columns.\n Objects are serialized to extract their fields as table columns.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Object[]",
              "default": null,
              "name": "objsArray",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofObjsArray(Object[] objsArray)",
          "name": "ofObjsArray",
          "description": "<p>Creates a table from an array of objects, where each object represents a row and object properties become columns.\n Objects are serialized to extract their fields as table columns.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "List&lt;Object&gt;",
              "default": null,
              "name": "rows",
              "description": "<p>The list of objects representing table rows</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(List&lt;Object&gt; rows)"
        },
        {
          "args": [
            {
              "type_name": "Object[]",
              "default": null,
              "name": "rows",
              "description": "<p>The array of objects representing table rows</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(Object[] rows)"
        }
      ],
      "name": "table",
      "description": "<p>Display a static table.</p>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.toggle": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(boolean value)",
          "name": "value",
          "description": "<p>Preselect the toggle when first rendered.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;Boolean&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function invoked when the toggle value changes.\n The value passed in the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the toggle if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Jeamlit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Jeamlit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;content&quot; (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this toggle is for. Markdown is supported, see <code>io.jeamlit.core.Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.toggle(String label)"
        }
      ],
      "name": "toggle",
      "description": "<p>Display a toggle widget.</p>",
      "returns": [
        {
          "type_name": "NotNull Boolean",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.cache": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.cache()"
        }
      ],
      "name": "cache",
      "description": "<p>Return the app cache. The app cache is shared across all sessions.\n Put values in this map that are meant to be shared across all users.\n For instance: database long-lived connections, ML models loaded weights, etc...\n <p>\n See https://docs.jeamlit.io/get-started/fundamentals/advanced-concepts#caching</p>",
      "returns": [
        {
          "type_name": "io.jeamlit.datastructure.TypedMap",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.sessionState": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.sessionState()"
        }
      ],
      "name": "sessionState",
      "description": "<p>Return the session state Map of the session. A session corresponds to an opened tab of the app.\n <p>\n The session state is maintained across re-runs.\n Values can be stored and persisted in this map.</p>",
      "returns": [
        {
          "type_name": "io.jeamlit.datastructure.TypedMap",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.urlQueryParameters": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.urlQueryParameters()"
        }
      ],
      "name": "urlQueryParameters",
      "description": "<p>Return the current query parameters as a map.\n <p>\n For instance: <code>?key1=foo&amp;key2=bar&amp;key2=fizz</code> will return\n {&quot;key1&quot;: [&quot;foo&quot;], &quot;key2&quot;: [&quot;bar&quot;, &quot;fizz&quot;]}</p>",
      "returns": [
        {
          "type_name": "Map&lt;String, List&lt;String&gt;&gt;",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.tableFromArrayColumns": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Map&lt;String, Values&gt;",
              "default": null,
              "name": "col2List",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofColumnsLists(Map&lt;String, Values&gt; col2List)",
          "name": "ofColumnsLists",
          "description": "<p>Creates a table from a map where each key is a column name and each value is a list of column data.\n All columns must have the same number of elements.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Map&lt;String, Object[]&gt;",
              "default": null,
              "name": "col2Array",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofColumnsArrays(Map&lt;String, Object[]&gt; col2Array)",
          "name": "ofColumnsArrays",
          "description": "<p>Creates a table from a map where each key is a column name and each value is an array of column data.\n All columns must have the same number of elements.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "SequencedCollection&lt;Object&gt;",
              "default": null,
              "name": "objsList",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofObjsList(SequencedCollection&lt;Object&gt; objsList)",
          "name": "ofObjsList",
          "description": "<p>Creates a table from a list of objects, where each object represents a row and object properties become columns.\n Objects are serialized to extract their fields as table columns.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Object[]",
              "default": null,
              "name": "objsArray",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "ofObjsArray(Object[] objsArray)",
          "name": "ofObjsArray",
          "description": "<p>Creates a table from an array of objects, where each object represents a row and object properties become columns.\n Objects are serialized to extract their fields as table columns.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.data.TableComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "Map&lt;String, Object[]&gt;",
              "default": null,
              "name": "cols",
              "description": "<p>A map where keys are column names and values are arrays of column data</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.tableFromArrayColumns(Map&lt;String, Object[]&gt; cols)"
        }
      ],
      "name": "tableFromArrayColumns",
      "description": "<p>Display a static table.</p>",
      "returns": [
        {
          "type_name": "void",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.urlPath": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.urlPath()"
        }
      ],
      "name": "urlPath",
      "description": "<p>Return the current url path.\n <p>\n May be used for multipage apps.\n In a single page app, will always return <code>&quot;/&quot;</code>.</p>",
      "returns": [
        {
          "type_name": "String",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.tabs": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.TabsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.TabsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>A unique string used to identify this tabs container</p>",
              "is_optional": false
            },
            {
              "type_name": "List&lt;String&gt;",
              "default": null,
              "name": "tabs",
              "description": "<p>A list of tab labels</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.tabs(String key, List&lt;String&gt; tabs)"
        }
      ],
      "name": "tabs",
      "description": "<p>Insert containers separated into tabs.\n <p>\n Inserts a number of multi-element containers as tabs.\n Tabs are a navigational element that allows users to easily move between groups of related content.\n <p>\n To add elements to the returned tabs container:\n <pre>\n <code>\n var tabs = Jt.tabs(&quot;my-tabs&quot;, List.of(&quot;E-commerce&quot;, &quot;Industry&quot;, &quot;Finance&quot;)).use();\n // get tab by name\n Jt.yourElement().use(tabs.tab(&quot;E-commerce&quot;));\n // get tab by index\n Jt.yourElement().use(tabs.tab(2));\n </code>\n </pre>\n See examples below.</p>",
      "returns": [
        {
          "type_name": "Tabs",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.form": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "clearOnSubmit",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "clearOnSubmit(boolean clearOnSubmit)",
          "name": "clearOnSubmit",
          "description": "<p>If True, all widgets inside the form will be reset to their default values after the user presses the Submit button.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "enterToSubmit",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "enterToSubmit(boolean enterToSubmit)",
          "name": "enterToSubmit",
          "description": "<p>If True (default), pressing Enter while in a form widget is like clicking the first form submit button. If False, the user must click the submit button to submit the form.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the form. Default is <code>true</code>. It is recommended to only remove the border if there is another border or the form is small.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li>&quot;content&quot; (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li>&quot;stretch&quot;: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "<p>The height of the form container. Can be &quot;content&quot; (default - matches height of content), &quot;stretch&quot; (matches content or parent container height), or a specific pixel value (sets a fixed height, enabling scrolling if content exceeds it).</p>",
          "returns": [
            {
              "type_name": "io.jeamlit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.jeamlit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>A unique string used to identify this form</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.form(String key)"
        }
      ],
      "name": "form",
      "description": "<p>Create a form that batches elements together with a &#39;Submit&#39; button.\n <p>\n A form is a container that visually groups other elements and widgets together, and contains a Submit button.\n When the form&#39;s Submit button is pressed, all widget values inside the form will be sent to Jeamlit in a batch.\n <p>\n To add elements to the form:\n <pre>\n <code>\n var form = Jt.form(&quot;my-form-1&quot;).use();\n Jt.yourElement().use(form);\n ...\n Jt.formSubmitButton(&quot;submit form&quot;).use();\n </code>\n </pre>\n <p>\n Forms have a few constraints:\n <ul>\n     <li>Every form must contain a <code>Jt.formSubmitButton)</code></li>\n     <li><code>Jt.button</code> and <code>Jt.downloadButton</code> cannot be added to a form</li>\n     <li>Forms can appear anywhere in your app (sidebar, columns, etc), but they cannot be embedded inside other forms</li>\n     <li>Within a form, the only widget that can have a callback function is <code>Jt.formSubmitButton)</code></li>\n </ul></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    }
  }
}
