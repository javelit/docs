{
  "0.50.0": {
    "Jt.textInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(String value)",
          "name": "value",
          "description": "<p>The text value of this widget when it first renders. Defaults to empty string.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "maxChars",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxChars(Integer maxChars)",
          "name": "maxChars",
          "description": "<p>The maximum number of characters allowed in the text input.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "<p>Can be <code>&quot;default&quot;</code> or <code>&quot;password&quot;</code>. Determines if input masks the user&#39;s typed value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "autocomplete",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "autocomplete(String autocomplete)",
          "name": "autocomplete",
          "description": "<p>An optional value that will be passed to the <input> element&#39;s autocomplete property. If unspecified, this value will be set to <code>&quot;new-password&quot;</code> for <code>&quot;password&quot;</code> inputs, and the empty string for <code>&quot;default&quot;</code> inputs.\n For more details, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete</a>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>An optional string displayed when the text input is empty.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the text input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>Controls the widget width. Can be <code>&quot;stretch&quot;</code> (default) or a pixel value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;String&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;String&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the text input&#39;s value changes.\n The value passed in the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.textInput(String label)"
        }
      ],
      "examples": "<p>Simple text input\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class TextInputApp {\n     public static void main(String[] args) {\n         String name = Jt.textInput(\"Your name\").use();\n\n         if (!name.isEmpty()) {\n             Jt.text(\"Hello, \" + name + \"!\").use();\n         }\n     }\n }\n</code></pre>\n <p>\n Text input with validation\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class ValidatedTextInputApp {\n     public static void main(String[] args) {\n         String email = Jt.textInput(\"Email address\")\n                          .placeholder(\"Enter your email\")\n                          .use();\n\n         if (!email.isEmpty() &amp;&amp; !email.contains(\"@\")) {\n             Jt.error(\"Please enter a valid email address\").use();\n         } else if (!email.isEmpty()) {\n             Jt.text(\"Valid email: \" + email).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "textInput",
      "description": "<p>Display a single-line text input widget.\n <p></p>",
      "returns": [
        {
          "type_name": "string",
          "description": "The current string value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.code": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "language",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "language(String language)",
          "name": "language",
          "description": "<p>The language that the code is written in, for syntax highlighting. This defaults to <code>java</code>.\n If this is <code>null</code>, the code will be plain, monospace text.\n <p>\n For a list of available language values, see list on <a href=\"https://prismjs.com/#supported-languages\">prismjs documentation</a>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "lineNumbers",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "lineNumbers(boolean lineNumbers)",
          "name": "lineNumbers",
          "description": "<p>An optional boolean indicating whether to show line numbers to the left of the code block. This defaults to <code>false</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "wrapLines",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "wrapLines(boolean wrapLines)",
          "name": "wrapLines",
          "description": "<p>An optional boolean indicating whether to wrap lines. This defaults to <code>false</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "<p>The height of the code block element. This can be one of the following:\n <p>\n <ul>\n  <li><code>content</code> (default): The height of the element matches the height of its content.</li>\n  <li><code>stretch</code>: The height of the element matches the height of its content or the height of the parent container, whichever is larger. If the element is not in a parent container, the height of the element matches the height of its content.</li>\n  <li>An integer specifying the height in pixels: The element has a fixed height. If the content is larger than the specified height, scrolling is enabled.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "heightPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int heightPixels)",
          "name": "height",
          "description": "<p>The height of the element in pixels. The element will have a fixed height. If the content is larger than the specified height, scrolling is enabled.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The string to display as code or monospace text.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.code(String body)"
        }
      ],
      "examples": "<p>Simple code block\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class CodeApp {\n     public static void main(String[] args) {\n         Jt.code(\"public class HelloWorld {}\").use();\n     }\n }\n</code></pre>\n <p>\n Multi-line code with syntax highlighting\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class MultilineCodeApp {\n     public static void main(String[] args) {\n         String pythonCode = \"\"\"\n                 import numpy as np\n\n                 a = np.arange(15).reshape(3, 5)\n                 \"\"\";\n         Jt.code(pythonCode).language(\"python\").use();\n     }\n }\n</code></pre></p>",
      "name": "code",
      "description": "<p>Display a code block with optional syntax highlighting.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.pageLink": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "label(String label)",
          "name": "label",
          "description": "<p>The text to display for the link. Markdown is supported, see <code>io.javelit.core.Jt#markdown(String)</code> for more details.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the link if set to true.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the link element. Use <code>&quot;content&quot;</code> to fit content, <code>&quot;stretch&quot;</code> to fill container, or a pixel value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class&lt;?&gt;",
              "default": null,
              "name": "pageClass",
              "description": "<p>The class of the page to link to in a multipage app. If null, target the home page.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.pageLink(Class&lt;?&gt; pageClass)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "url",
              "description": "<p>The URL to link to</p>",
              "is_optional": false
            },
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The text to display for the link. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.pageLink(String url, String label)"
        }
      ],
      "examples": "<p>A multipage app with the sidebar hidden.\n A footer replaces the sidebar. The footer contains links to all pages of the app and an external link.\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class ToDelete {\n\n     public static class FirstPage {\n         public static void main(String[] args) {\n             Jt.title(\"First Page\").use();\n             Jt.text(\"first page content\").use();\n         }\n     }\n\n     public static class SecondPage {\n         public static void main(String[] args) {\n             Jt.title(\"Second Page\").use();\n             Jt.text(\"Second page content\").use();\n         }\n     }\n\n     public static void main(String[] args) {\n         var page = Jt\n                 .navigation(Jt.page(FirstPage.class).title(\"First page\").icon(\"🔥\"),\n                             Jt.page(SecondPage.class).title(\"Second page\").icon(\":favorite:\"))\n                 .hidden()\n                 .use();\n\n         Jt.divider().use();\n         Jt.pageLink(FirstPage.class).use();\n         Jt.pageLink(SecondPage.class).use();\n         Jt.pageLink(\"https://github.com/javelit/javelit\", \"Github project\").icon(\":link:\").use();\n     }\n }\n</code></pre></p>",
      "name": "pageLink",
      "description": "<p>Display a link to another page in a multipage app or to an external page.\n <p>\n If another page in a multipage app is specified, clicking the <code>Jt.pageLink</code> element stops the current page execution\n and runs the specified page as if the user clicked on it in the sidebar navigation.\n <p>\n If an external page is specified, clicking the <code>Jt.pageLink</code> element opens a new tab to the specified page.\n The current script run will continue if not complete.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.textArea": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(String value)",
          "name": "value",
          "description": "<p>The initial text value when the widget renders. Defaults to empty string.\n If <code>null</code>, will initialize empty and return <code>null</code> until the user provides input.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "<p>The text area widget height. This can be &quot;content&quot;, &quot;stretch&quot;, or a pixel value. Minimum height is 2 lines.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "heightInPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int heightInPixels)",
          "name": "height",
          "description": "<p>The text area widget height in pixels. Minimum height is 2 lines.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "maxChars",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxChars(Integer maxChars)",
          "name": "maxChars",
          "description": "<p>The maximum number of characters allowed in the text area.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>The text displayed when the text area is empty.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the text area input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The widget width. Can be <code>&quot;stretch&quot;</code> (default) or a pixel value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;String&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;String&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function that will be called when the text area value changes.\n The value passed in the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.textArea(String label)"
        }
      ],
      "examples": "<p>Simple text area\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class TextAreaApp {\n     public static void main(String[] args) {\n         String feedback = Jt.textArea(\"Your feedback\").use();\n\n         if (!feedback.isEmpty()) {\n             Jt.text(\"Thank you for your feedback!\").use();\n             Jt.text(\"Character count: \" + feedback.length()).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Text area for code input\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class CodeTextAreaApp {\n     public static void main(String[] args) {\n         String code = Jt.textArea(\"Enter your Java code\")\n                         .height(200)\n                         .placeholder(\"public class MyClass {\\n    // Your code here\\n}\")\n                         .use();\n\n         if (!code.isEmpty()) {\n             Jt.text(\"Code preview:\").use();\n             Jt.code(code).language(\"java\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "textArea",
      "description": "<p>Display a multi-line text input widget.\n <p></p>",
      "returns": [
        {
          "type_name": "string",
          "description": "The current string value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.text": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "body(String body)",
          "name": "body",
          "description": "<p>The string to display.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The string to display.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.text(String body)"
        }
      ],
      "examples": "<p><pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class TextApp {\n     public static void main(String[] args) {\n         Jt.text(\"This is some plain text.\").use();\n\n         Jt.text(\"\"\"\n                         This is preformatted text.\n                         It preserves    spacing\n                         and line breaks.\n                         \"\"\").use();\n     }\n }\n</code></pre></p>",
      "name": "text",
      "description": "<p>Write text without Markdown or HTML parsing.\n For monospace text, use <code>Jt#code</code></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.checkbox": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(boolean value)",
          "name": "value",
          "description": "<p>Preselect the checkbox when first rendered.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;Boolean&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function invoked when the checkbox value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the checkbox if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this checkbox is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.checkbox(String label)"
        }
      ],
      "examples": "<p>Basic checkbox usage\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class CheckboxApp {\n     public static void main(String[] args) {\n         boolean agree = Jt.checkbox(\"I agree\").use();\n\n         if (agree) {\n             Jt.text(\"Great!\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "checkbox",
      "description": "<p>Display a checkbox widget.\n <p></p>",
      "returns": [
        {
          "type_name": "NotNull Boolean",
          "description": "The current NotNull Boolean value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.expander": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "expanded",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "expanded(boolean expanded)",
          "name": "expanded",
          "description": "<p>The initial state of the expander. When set to <code>true</code>, the expander starts in the expanded state. When <code>false</code> (default), the expander starts collapsed.\n Note that all content within the expander is computed and sent to the frontend regardless of the initial state.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The label for the expander header</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.expander(String label)"
        }
      ],
      "examples": "<p>Basic expander with explanation content\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class ExpanderApp {\n     public static void main(String[] args) {\n         var expander = Jt.expander(\"See explanation\").use();\n\n         Jt.text(\"\"\"\n                 [A great explanation on the why and how of life.]\n                 \"\"\").use(expander);\n     }\n }\n</code></pre></p>",
      "name": "expander",
      "description": "<p>Insert a multi-element container that can be expanded/collapsed.\n <p>\n Insert a container into your app that can be used to hold multiple elements and can be expanded or collapsed by the user.\n When collapsed, all that is visible is the provided label.\n <p>\n To add elements to the returned expander:\n <pre>\n <code>\n var expander = Jt.expander(&quot;my-expander&quot;, &quot;More details&quot;).use();\n Jt.yourElement().use(expander);\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.formSubmitButton": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "<p>The button type that determines its appearance and emphasis level. Can be <code>&quot;primary&quot;</code>, <code>&quot;secondary&quot;</code> (default), or <code>&quot;tertiary&quot;</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the button if set to True. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "<p>Controls the button width. If True, the button width matches the parent container width. If False (default), the button width matches its content width. This parameter is deprecated - use width() instead.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onClick",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onClick(function.Consumer&lt;Boolean&gt; onClick)",
          "name": "onClick",
          "description": "<p>An optional callable function that is invoked when the button is clicked.\n The callback receives the previous button click state as a parameter. In this case, the previous click state is always <code>false</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The text to display on the submit button</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.formSubmitButton(String label)"
        }
      ],
      "examples": "<p>Basic form submit button\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class FormSubmitApp {\n     public static void main(String[] args) {\n         var form = Jt.form(\"contact\").use();\n\n         String name = Jt.textInput(\"Your Name\").use(form);\n         String message = Jt.textArea(\"Message\").use(form);\n\n         if (Jt.formSubmitButton(\"Send Message\").use(form)) {\n             Jt.text(\"Message sent successfully!\").use();\n             Jt.text(\"From: \" + name).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Multiple submit buttons in same form\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class MultiSubmitApp {\n     public static void main(String[] args) {\n         var form = Jt.form(\"document\").use();\n\n         String title = Jt.textInput(\"Document Title\").use(form);\n         String content = Jt.textArea(\"Content\").use(form);\n\n         if (Jt.formSubmitButton(\"Save Draft\").key(\"save\").use(form)) {\n             Jt.text(\"Draft saved: \" + title).use();\n         }\n\n         if (Jt.formSubmitButton(\"Publish\").key(\"publish\").use(form)) {\n             Jt.text(\"Document published: \" + title).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "formSubmitButton",
      "description": "<p>Display a form submit button.\n <p>\n When clicked, all widget values inside the form will be sent from the user&#39;s browser to the Javelit server in a batch.\n <p>\n Every form must have at least one <code>Jt.formSubmitButton</code>. A <code>Jt.formSubmitButton</code> cannot exist outside a form.\n <p></p>",
      "returns": [
        {
          "type_name": "boolean",
          "description": "The current boolean value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.container": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(Integer height)",
          "name": "height",
          "description": "<p>The height of the container in pixels. When a fixed height is specified, the container will enable scrolling if content exceeds the specified height. It is recommended to use scrolling containers sparingly and avoid heights that exceed 500 pixels for optimal mobile experience.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(Boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the container. If not specified (<code>null</code>), the border is automatically shown when the container has a fixed height, and hidden when height adapts to content.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.container()"
        }
      ],
      "examples": "<p>Basic container usage and adding elements out of order\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class ContainerApp {\n     public static void main(String[] args) {\n         var container = Jt.container().use();\n\n         Jt.text(\"This is inside the container\").use(container);\n         Jt.text(\"This is outside the container\").use();\n         Jt.text(\"This is inside too\").use(container);\n     }\n }\n</code></pre></p>",
      "name": "container",
      "description": "<p>Insert a multi-element container.\n <p>\n Insert an invisible container into your app that can be used to hold multiple elements.\n This allows you to, for example, insert multiple elements into your app out of order.\n <p>\n To add elements to the returned container:\n <pre>\n <code>\n var container = Jt.container(&quot;container-1&quot;).use();\n Jt.yourElement().use(container);\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.popover": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the popover button if set to True. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "<p>Controls the button width. If True, the button width matches the parent container width. If False (default), the button width matches its content width. This parameter is deprecated - use width() instead.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The label for the popover button. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.popover(String label)"
        }
      ],
      "examples": "<p>Settings popover\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n import java.util.List;\n\n public class PopoverApp {\n     public static void main(String[] args) {\n         var settings = Jt.popover(\"⚙️ Settings\").use();\n\n         Jt.text(\"Configure your preferences:\").use(settings);\n         boolean notifications = Jt.checkbox(\"Enable notifications\").use(settings);\n         String theme = Jt.selectbox(\"Theme\", List.of(\"Light\", \"Dark\")).use(settings);\n\n         if (notifications) {\n             Jt.text(\"Notifications are enabled\").use();\n         }\n         Jt.text(\"The selected theme is \" + theme).use();\n     }\n }\n</code></pre>\n <p>\n Help popover with information\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class HelpPopoverApp {\n     public static void main(String[] args) {\n         Jt.text(\"Username:\").use();\n         Jt.textInput(\"Enter username\").use();\n\n         var help = Jt.popover(\"❓ Help\").use();\n         Jt.text(\"**Username requirements:**\").use(help);\n         Jt.text(\"- Must be 3-20 characters long\").use(help);\n         Jt.text(\"- Only letters and numbers allowed\").use(help);\n         Jt.text(\"- Case sensitive\").use(help);\n     }\n }\n</code></pre></p>",
      "name": "popover",
      "description": "<p>Insert a popover container.\n <p>\n Inserts a multi-element container as a popover. It consists of a button-like element and a container that opens when the button is clicked.\n <p>\n Opening and closing the popover will not trigger a rerun. Interacting with widgets inside of an open popover will\n rerun the app while keeping the popover open. Clicking outside of the popover will close it.\n <p>\n To add elements to the returned popover:\n <pre><code class=\"language-java\"> var popover = Jt.popover(\"my-popover\", \"Advanced configuration\").use();\n Jt.yourElement().use(popover);\n</code></pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.numberInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(T value)",
          "name": "value",
          "description": "<p>The value of this widget when it first renders.\n If <code>null</code>, initializes with no value and returns null until an input is provided to the component.\n The default behavior is to return the minimum value. If the minimum value is not set, the widget initializes\n with a value of <code>0</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "minValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "minValue(T minValue)",
          "name": "minValue",
          "description": "<p>The minimum permitted value. For <code>Integer</code> and <code>Long</code>, defaults to the corresponding minimum\n possible value.\n For <code>Float</code> and <code>Double</code>, no minimum by default.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "maxValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxValue(T maxValue)",
          "name": "maxValue",
          "description": "<p>The maximum permitted value. For <code>Integer</code> and <code>Long</code>, defaults to the corresponding maximum\n possible value.\n For <code>Float</code> and <code>Double</code>, no maximum by default.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "step",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "step(T step)",
          "name": "step",
          "description": "<p>The stepping interval. Defaults to 1 for <code>Integer</code> and <code>Long</code>, 0.01 for floating points.\n Must be strictly positive.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "<p>A printf-style format string controlling how numbers are displayed in the interface.\n The output must be purely numeric. This does not impact the return value of the widget.\n For more information about the formatting specification, see <a href=\"https://github.com/alexei/sprintf.js?tab=readme-ov-file#format-specification\" target=\"_blank\">sprintf.js</a>.\n <p>\n For example, <code>format=&quot;%0.1f&quot;</code> adjusts the displayed decimal precision to only show one digit after the decimal.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the widget label. If <code>null</code>, no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>An optional text displayed when the number input is empty, providing guidance to the user.\n If None, no placeholder is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the number input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the number input in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;T&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;T&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the number input&#39;s value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this numeric input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.numberInput(String label)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this numeric input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            },
            {
              "type_name": "Class&lt;T&gt;",
              "default": null,
              "name": "valueClass",
              "description": "<p>The number type class (Integer, Double, Float, etc.)</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.numberInput(String label, Class&lt;T&gt; valueClass)"
        }
      ],
      "examples": "<p>Simple number input\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class NumberInputApp {\n     public static void main(String[] args) {\n         Number quantity = Jt.numberInput(\"Quantity\").minValue(1).maxValue(100).use();\n\n         if (quantity != null) {\n             Jt.text(\"You selected: \" + quantity).use();\n         }\n     }\n }\n</code></pre></p>\n\n<p>Integer input with specific type\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class TypedNumberInputApp {\n     public static void main(String[] args) {\n         Integer age = Jt.numberInput(\"Age\", Integer.class)\n                         .minValue(0)\n                         .maxValue(150)\n                         .use();\n\n         if (age != null) {\n             String category = age &lt; 18 ? \"Minor\" : age &lt; 65 ? \"Adult\" : \"Senior\";\n             Jt.text(\"Category: \" + category).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "numberInput",
      "description": "<p>Display a numeric input widget.\n <p></p>",
      "returns": [
        {
          "type_name": "T",
          "description": "The current T value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.fileUploader": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List&lt;String&gt;",
              "default": null,
              "name": "types",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(List&lt;String&gt; types)",
          "name": "type",
          "description": "<p>The allowed file extensions or MIME types. If <code>null</code>, all file types are allowed. Use file extensions like <code>&quot;.pdf&quot;</code> or MIME types like <code>&quot;image/png&quot;</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.MultipleFiles",
              "default": null,
              "name": "acceptMultipleFiles",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "acceptMultipleFiles(io.javelit.components.media.FileUploaderComponent.MultipleFiles acceptMultipleFiles)",
          "name": "acceptMultipleFiles",
          "description": "<p>Whether to accept more than one file in a submission. This can be one of the following values:\n <ul>\n     <li><code>MultipleFiles.FALSE</code> (default): The user can only submit one file at a time.</li>\n     <li><code>MultipleFiles.TRUE</code>: The user can upload multiple files at the same time.</li>\n     <li><code>MultipleFiles.DIRECTORY</code>: The user can select a directory to upload all files in the directory and its subdirectories. If <code>type</code> is set, only files matching those type(s) will be uploaded.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the file uploader if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;List&lt;io.javelit.core.JtUploadedFile&gt;&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;List&lt;JtUploadedFile&gt;&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the file uploader&#39;s value changes.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the text element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this file uploader is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.fileUploader(String label)"
        }
      ],
      "examples": "<p>Basic file upload with processing\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n import io.javelit.core.JtUploadedFile;\n\n import java.util.List;\n\n public class FileUploadApp {\n     public static void main(String[] args) {\n         var uploadedFiles = Jt.fileUploader(\"Choose a CSV file\")\n                               .type(List.of(\".csv\"))\n                               .use();\n\n         if (!uploadedFiles.isEmpty()) {\n             JtUploadedFile file = uploadedFiles.getFirst();\n             Jt.text(\"Uploaded file: \" + file.filename()).use();\n             Jt.text(\"File size: \" + file.content().length + \" bytes\").use();\n             Jt.text(\"Content type: \" + file.contentType()).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "fileUploader",
      "description": "<p>Display a file uploader widget.\n <p></p>",
      "returns": [
        {
          "type_name": "JtUploadedFile>",
          "description": "The current JtUploadedFile> value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.markdown": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The text to display as Markdown.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.markdown(String body)"
        }
      ],
      "examples": "<p>Basic markdown formatting and colored text styling\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class MarkdownApp {\n     public static void main(String[] args) {\n         // Basic text formatting\n         Jt.markdown(\"*Javelit* is **really** ***cool***.\").use();\n\n         // Divider\n         Jt.markdown(\"---\").use();\n\n         // Emoji and line breaks\n         Jt.markdown(\"Here's a bouquet — :tulip::cherry_blossom::rose::hibiscus::sunflower::blossom:\").use();\n     }\n }\n</code></pre></p>",
      "name": "markdown",
      "description": "<p>Display string formatted as Markdown.\n <p>\n Supported :\n <ul>\n     <li>Emoji shortcodes, such as <code>:+1:</code> and <code>:sunglasses:</code>. For a list of all supported codes, see <a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\">https://www.webfx.com/tools/emoji-cheat-sheet/</a>.</li>\n     <li>Tables</li>\n     <li>Strikethrough</li>\n     <li>Autolink: turns plain links such as URLs and email addresses into links</li>\n </ul>\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.setComponentState": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>The key of the component (as set via <code>.key()</code>)</p>",
              "is_optional": false
            },
            {
              "type_name": "Object",
              "default": null,
              "name": "value",
              "description": "<p>The new value to set</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.setComponentState(String key, Object value)"
        }
      ],
      "examples": "<p>Programmatically update a text input value\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class UpdateStateApp {\n     public static void main(String[] args) {\n         String name = Jt.textInput(\"Name\").key(\"name\").use();\n         Jt.button(\"Clear name\")\n           .onClick(b -&gt; Jt.setComponentState(\"name\", \"\"))\n           .use();\n         Jt.text(\"Hello \" + name).use();\n     }\n }\n</code></pre>\n <p></p>",
      "name": "setComponentState",
      "description": "<p>Update a component&#39;s value by its user-defined key.\n <p>\n This method allows programmatic updating of component state. Limits:\n <ul>\n     <li>You cannot modify the value of a component that has not been rendered with a <code>.key()</code> in the session yet.</li>\n     <li>You cannot modify the value of a component that has already been rendered in the current app run.</li>\n </ul>\n Learn more in the <a href=\"https://docs.javelit.io/develop/concepts/design/buttons#buttons-to-modify-or-reset-other-widgets\">modify widget examples</&gt;.\n <p>\n This method validates that the provided value is of the correct type and respects constraints if any (for instance, value range).\n <p></p>",
      "returns": [],
      "source": ""
    },
    "Jt.html": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.HtmlComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.HtmlComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The HTML code to insert.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.html(String body)"
        },
        {
          "args": [
            {
              "type_name": "java.nio.file.Path",
              "default": null,
              "name": "filePath",
              "description": "<p>The path of the file containing the HTML code to insert.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.html(java.nio.file.Path filePath)"
        }
      ],
      "examples": "<p>Simple HTML content\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class HtmlApp {\n     public static void main(String[] args) {\n         Jt.html(\"&lt;h3&gt;Custom HTML Header&lt;/h3&gt;\").use();\n         Jt.html(\"&lt;p style='color: blue;'&gt;This is blue text&lt;/p&gt;\").use();\n         Jt.html(\"&lt;ul&gt;&lt;li&gt;Item 1&lt;/li&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;li&gt;Item 3&lt;/li&gt;&lt;/ul&gt;\").use();\n     }\n }\n</code></pre></p>\n\n<p>Loading HTML from file\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n import java.nio.file.Path;\n\n public class HtmlFileApp {\n     public static void main(String[] args) {\n         // Assumes you have a file \"content.html\" in your project\n         Jt.html(Path.of(\"content.html\")).use();\n     }\n }\n</code></pre></p>",
      "name": "html",
      "description": "<p>Insert HTML into your app.\n <p>\n Adding custom HTML to your app impacts safety, styling, and maintainability.\n We sanitize HTML with <a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a>, but inserting HTML remains a developer risk.\n Passing untrusted code to Jt.html or dynamically loading external code can increase the risk of vulnerabilities in your app.\n <p>\n <code>Jt.html</code> content is not iframed. Executing JavaScript is not supported.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.columns": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "numColumns",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "numColumns(int numColumns)",
          "name": "numColumns",
          "description": "<p>The number of columns to create. Must be between 2 and 12 inclusive. Each column will have equal width\n unless custom widths are specified.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List&lt;Double&gt;",
              "default": null,
              "name": "widths",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "widths(List&lt;Double&gt; widths)",
          "name": "widths",
          "description": "<p>A list of relative column widths. The list size must match the number of columns. For example, [0.7, 0.3]\n creates two columns with 70% and 30% width respectively. If not specified, all columns have equal width.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Gap",
              "default": null,
              "name": "gap",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "gap(io.javelit.components.layout.ColumnsComponent.Gap gap)",
          "name": "gap",
          "description": "<p>Controls the space between columns. Options are <code>SMALL</code> (<code>1rem</code> gap, default), <code>MEDIUM</code> (<code>2rem</code> gap),\n <code>LARGE</code> (<code>4rem</code> gap), or <code>NONE</code> (no gap between columns).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.VerticalAlignment",
              "default": null,
              "name": "verticalAlignment",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "verticalAlignment(io.javelit.components.layout.ColumnsComponent.VerticalAlignment verticalAlignment)",
          "name": "verticalAlignment",
          "description": "<p>The vertical alignment of the content inside the columns. Options are <code>TOP</code> (default), <code>CENTER</code>, or <code>BOTTOM</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the column containers.\n If this is <code>false</code> (default), no border is shown. If this is <code>true</code>,\n a border is shown around each column.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "numColumns",
              "description": "<p>The number of columns to create</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.columns(int numColumns)"
        }
      ],
      "examples": "<p>Basic three-column layout with headers and content\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class ColumnsApp {\n     public static void main(String[] args) {\n         var cols = Jt.columns(3).use();\n\n         Jt.title(\"A cat\").use(cols.col(0));\n         Jt.title(\"A dog\").use(cols.col(1));\n         Jt.title(\"An owl\").use(cols.col(2));\n     }\n }\n</code></pre></p>",
      "name": "columns",
      "description": "<p>Insert containers laid out as side-by-side columns.\n <p>\n Inserts a number of multi-element containers laid out side-by-side and returns a list of container objects.\n <p>\n To add elements to the returned columns container:\n <pre>\n <code>\n var cols = Jt.columns(&quot;my-3-cols&quot;, 3).use();\n Jt.yourElement().use(cols.col(1));\n Jt.yourElement().use(cols.col(0));\n Jt.yourElement().use(cols.col(2));\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "Columns",
          "description": "The current Columns value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.deepCopy": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "original",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "com.fasterxml.jackson.core.type.TypeReference&lt;T&gt;",
              "default": null,
              "name": "typeRef",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "Jt.deepCopy(T original, com.fasterxml.jackson.core.type.TypeReference&lt;T&gt; typeRef)"
        }
      ],
      "examples": "<p>Safe copying from cache to prevent mutations\n <pre><code class=\"language-java\"> import java.util.ArrayList;\n import java.util.List;\n\n import io.javelit.core.Jt;\n\n import com.fasterxml.jackson.core.type.TypeReference;\n\n public class DeepCopyApp {\n     public static void main(String[] args) {\n         // init\n         List&lt;String&gt; sharedList = (List&lt;String&gt;) Jt.cache().get(\"shared_list\");\n         if (sharedList == null) {\n             sharedList = new ArrayList&lt;&gt;();\n             sharedList.add(\"item1\");\n             sharedList.add(\"item2\");\n             Jt.cache().put(\"shared_list\", sharedList);\n         }\n\n         // Create a safe copy to avoid mutations affecting other sessions\n         List&lt;String&gt; safeCopy = Jt.deepCopy(sharedList, new TypeReference&lt;&gt;() {\n         });\n\n         if (Jt.button(\"remove elements from user lists\").use()) {\n             safeCopy.clear();\n         }\n\n         Jt.text(\"Original list size: \" + sharedList.size()).use();\n         Jt.text(\"Safe copy size: \" + safeCopy.size()).use();\n     }\n }\n</code></pre></p>",
      "name": "deepCopy",
      "description": "<p>Return a deep copy of the provided object.\n <p>\n Utility that may be useful in combination with the cache, to implement a copy on read behavior.\n For instance, you can get a value that is expensive to\n instantiate from the cache, but perform a deep copy to prevent mutations and side effects across sessions.\n <p></p>",
      "returns": [
        {
          "type_name": "T",
          "description": "The current T value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.empty": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(Integer height)",
          "name": "height",
          "description": "<p>The height of the container in pixels. When a fixed height is specified, the container will enable scrolling if content exceeds the specified height. It is recommended to use scrolling containers sparingly and avoid heights that exceed 500 pixels for optimal mobile experience.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(Boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the container. If not specified (<code>null</code>), the border is automatically shown when the container has a fixed height, and hidden when height adapts to content.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.empty()"
        }
      ],
      "examples": "<p>Dynamic content replacement\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n import java.util.List;\n\n public class EmptyApp {\n     public static void main(String[] args) {\n         var placeholder = Jt.empty().use();\n         String selected = Jt.selectbox(\"Choose content\",\n             List.of(\"None\", \"Text\", \"Button\")).use();\n\n         switch (selected) {\n             case \"Text\" -&gt; Jt.text(\"Dynamic text content\").use(placeholder);\n             case \"Button\" -&gt; {\n                 if (Jt.button(\"Dynamic button\").use(placeholder)) {\n                     Jt.text(\"Button clicked!\").use();\n                 }\n             }\n             // case \"None\" -&gt; container remains empty\n         }\n     }\n }\n</code></pre>\n <p>\n Simple animations\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;import tech.catheu.javelit.core.Jt;\n\n public class AnimationEmptyApp {\n     public static void main(String[] args) {\n         var emptyContainer = Jt.empty().use();\n          for (i = 10; i&gt;=1; i--) {\n               Jt.text(i + \"!\").use(emptyContainer);\n                Thread.sleep(1000);\n           }\n           Jt.text(\"Happy new Year !\").use(emptyContainer);\n           Jt.button(\"rerun\").use();\n     }\n }\n</code></pre></p>",
      "name": "empty",
      "description": "<p>Insert a single-element container.\n <p>\n Insert a container into your app that can be used to hold a single element.\n This allows you to, for example, remove elements at any point, or replace several elements at once (using a child multi-element container).\n <p>\n To insert/replace/clear an element on the returned container:\n <pre>\n <code>\n var container = Jt.empty(&quot;empty-1&quot;).use();\n Jt.yourElement().use(container);\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.navigation": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "io.javelit.core.JtPage.Builder[]",
              "default": null,
              "name": "pages",
              "description": "<p>The pages to include in the navigation</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.navigation(JtPage.Builder[] pages)"
        }
      ],
      "examples": "<p>Basic multipage navigation setup\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class NavigationApp {\n     public static class FirstPage {\n         public static void main(String[] args) {\n             Jt.title(\"First Page\").use();\n         }\n     }\n\n     public static class SecondPage {\n         public static void main(String[] args) {\n             Jt.title(\"Second Page\").use();\n         }\n     }\n\n     public static void main(String[] args) {\n         var page = Jt\n                 .navigation(Jt.page(FirstPage.class).title(\"First page\").icon(\"🔥\"),\n                             Jt.page(SecondPage.class).title(\"Second page\").icon(\":favorite:\"))\n                 .use();\n     }\n }\n</code></pre></p>",
      "name": "navigation",
      "description": "<p>Create a navigation component with multiple pages to create a multipage app.\n <p>\n Call <code>Jt.navigation</code> in your entrypoint app class to define the available pages in your app.\n <code>Jt.navigation</code> use() returns the current page.\n <p>\n When using <code>Jt.navigation</code>, your entrypoint app class acts like a frame of common elements around each of your pages.\n <p>\n The set of available pages can be updated with each rerun for dynamic navigation.\n By default, <code>Jt.navigation</code> displays the available pages in the sidebar if there is more than one page.\n This behavior can be changed using the <code>position</code> builder method.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.core.NavigationComponent.Builder",
          "description": "The current io.javelit.core.NavigationComponent.Builder value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.componentsState": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.componentsState()"
        }
      ],
      "examples": "<p>Accessing component values by key\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ComponentsStateApp {\n     public static void main(String[] args) {\n         double volumeFromUse = Jt.slider(\"Volume\").key(\"volume\").min(0).max(100).value(50).use();\n         double volumeFromState = Jt.componentsState().getDouble(\"volume\");\n\n         Jt.text(\"Volume from slider return value: \" + volumeFromUse).use();\n         Jt.text(\"Value from components state map: \" + volumeFromState).use();\n     }\n }\n</code></pre></p>",
      "name": "componentsState",
      "description": "<p>Return the components state of the session. A session corresponds to an opened tab of the app.\n <p>\n The current value of any component can be obtained from this map.\n When putting a component in the app, us the <code>.key()</code> method to define a specific key that will be easy\n to access from this map.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.datastructure.TypedMap",
          "description": "The current io.javelit.datastructure.TypedMap value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.switchPage": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class&lt;?&gt;",
              "default": null,
              "name": "pageApp",
              "description": "<p>The target page. If <code>null</code>, target the home page.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.switchPage(Class&lt;?&gt; pageApp)"
        }
      ],
      "examples": "<p>Conditional page switching with checkboxes\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class SwitchPageApp {\n     public static class WelcomePage {\n         public static void main(String[] args) {\n             Jt.title(\"Welcome Page\").use();\n             Jt.text(\"Please complete the requirements below to proceed:\").use();\n\n             boolean agreedToTerms = Jt.checkbox(\"I agree with Bob\").use();\n             boolean confirmedAge = Jt.checkbox(\"I agree with Alice\").use();\n\n             if (agreedToTerms &amp;&amp; confirmedAge) {\n                 Jt.text(\"All requirements met! Redirecting to dashboard...\").use();\n                 Jt.switchPage(DashboardPage.class);\n             } else {\n                 Jt.text(\"Please check both boxes to continue.\").use();\n             }\n         }\n     }\n\n     public static class DashboardPage {\n         public static void main(String[] args) {\n             Jt.title(\"Dashboard\").use();\n             Jt.text(\"Welcome to your dashboard!\").use();\n             Jt.text(\"You have successfully completed the requirements.\").use();\n         }\n     }\n\n     public static void main(String[] args) {\n         Jt.navigation(Jt.page(WelcomePage.class).title(\"Welcome\").icon(\"👋\").home(),\n                       Jt.page(DashboardPage.class).title(\"Dashboard\").icon(\"📊\"))\n           .hidden()\n           .use();\n     }\n }\n</code></pre></p>",
      "name": "switchPage",
      "description": "<p>Programmatically switch the current page in a multipage app.\n <p>\n When <code>Jt.switchPage</code> is called, the current page execution stops and the specified page runs as if the\n user clicked on it in the sidebar navigation. The specified page must be recognized by Javelit&#39;s multipage\n architecture (your main app class or an app class in the available pages).\n <p></p>",
      "returns": [],
      "source": ""
    },
    "Jt.button": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "<p>The button appearance type. Can be <code>&quot;primary&quot;</code>, <code>&quot;secondary&quot;</code> (default), or <code>&quot;tertiary&quot;</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed when the button is hovered over.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the button if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "<p>Makes the button fill the width of its container if set to true.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onClick",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onClick(function.Consumer&lt;Boolean&gt; onClick)",
          "name": "onClick",
          "description": "<p>An optional callback invoked when this button is clicked.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this button is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.button(String label)"
        }
      ],
      "examples": "<p>Basic button usage and interaction\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class ButtonApp {\n     public static void main(String[] args) {\n         if (Jt.button(\"Say hello\").use()) {\n             Jt.text(\"Why hello there\").use();\n         } else {\n             Jt.text(\"Goodbye\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "button",
      "description": "<p>Display a button widget.\n <p></p>",
      "returns": [
        {
          "type_name": "boolean",
          "description": "The current boolean value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.dateInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(java.time.LocalDate value)",
          "name": "value",
          "description": "<p>The value of this widget when it first renders. Can be a specific date or <code>null</code> for no initial value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "minValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "minValue(java.time.LocalDate minValue)",
          "name": "minValue",
          "description": "<p>The minimum selectable date. If <code>null</code>, defaults to ten years before the initial value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "maxValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxValue(java.time.LocalDate maxValue)",
          "name": "maxValue",
          "description": "<p>The maximum selectable date. If <code>null</code>, defaults to ten years after the initial value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;java.time.LocalDate&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;java.time.LocalDate&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the date input&#39;s value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "<p>Controls how dates are displayed in the interface. Supported formats: <code>YYYY/MM/DD</code>, <code>DD/MM/YYYY</code>, <code>MM/DD/YYYY</code>.\n You may also use a period (<code>.</code>) or hyphen (<code>-</code>) as separators.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the date input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>Controls the widget&#39;s width. Can be <code>&quot;stretch&quot;</code> to match parent container or a pixel value as string.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this date input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.dateInput(String label)"
        }
      ],
      "examples": "<p>Simple date input\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n import java.time.LocalDate;\n import java.time.Period;\n\n public class DateInputApp {\n     public static void main(String[] args) {\n         LocalDate birthday = Jt.dateInput(\"Your birthday\").use();\n\n         if (birthday != null) {\n             int age = Period.between(birthday, LocalDate.now()).getYears();\n             Jt.text(\"You are \" + age + \" years old\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "dateInput",
      "description": "<p>Display a date input widget that can be configured to accept a single date or a date range.\n <p></p>",
      "returns": [
        {
          "type_name": "LocalDate",
          "description": "The current LocalDate value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.title": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "anchor",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "anchor(String anchor)",
          "name": "anchor",
          "description": "<p>The anchor name of the header that can be accessed with #anchor in the URL.\n If omitted, it generates an anchor using the body. If False, the anchor is not shown in the UI.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The text to display. Markdown is supported, see <code>#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.title(String body)"
        }
      ],
      "examples": "<p>Basic title and title with markdown formatting and styling\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class TitleApp {\n     public static void main(String[] args) {\n         // Basic title\n         Jt.title(\"This is a title\").use();\n\n         // Title with Markdown and styling\n         Jt.title(\"_Javelit_ is **cool** :sunglasses:\").use();\n     }\n }\n</code></pre></p>",
      "name": "title",
      "description": "<p>Display text in title formatting.\n Each document should have a single <code>Jt.title()</code>, although this is not enforced.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.page": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class&lt;?&gt;",
              "default": null,
              "name": "pageApp",
              "description": "<p>The class containing the main method for this page</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.page(Class&lt;?&gt; pageApp)"
        }
      ],
      "examples": "<p>Basic page creation with custom title and icon\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class NavigationApp {\n     public static class FirstPage {\n         public static void main(String[] args) {\n             Jt.title(\"First Page\").use();\n         }\n     }\n\n     public static class SecondPage {\n         public static void main(String[] args) {\n             Jt.title(\"Second Page\").use();\n         }\n     }\n\n     public static void main(String[] args) {\n         var page = Jt\n                 .navigation(Jt.page(FirstPage.class).title(\"First page\").icon(\"🔥\"),\n                             Jt.page(SecondPage.class).title(\"Second page\").icon(\":favorite:\"))\n                 .use();\n     }\n }\n</code></pre></p>",
      "name": "page",
      "description": "<p>Create a page for <code>Jt.navigation</code> in a multipage app.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.core.JtPage.Builder",
          "description": "The current io.javelit.core.JtPage.Builder value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.error": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "body(String body)",
          "name": "body",
          "description": "<p>The error message content to display. Markdown is supported, see <code>io.javelit.core.Jt#markdown(String)</code> for more details.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The error text to display. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.error(String body)"
        }
      ],
      "examples": "<p>Simple error message\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class ErrorApp {\n     public static void main(String[] args) {\n         String username = Jt.textInput(\"Username\").use();\n\n         if (username.isEmpty()) {\n             Jt.error(\"Username is required!\").use();\n         } else if (username.length() &lt; 3) {\n             Jt.error(\"Username must be at least 3 characters long.\").use();\n         }\n     }\n }\n</code></pre>\n <p>\n Error with markdown formatting\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class FormattedErrorApp {\n     public static void main(String[] args) {\n         Jt.error(\"**Connection Failed**: Unable to connect to the database. Please check your settings.\").use();\n     }\n }\n</code></pre></p>",
      "name": "error",
      "description": "<p>Display error message.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.echarts": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int height)",
          "name": "height",
          "description": "<p>The height of the chart in pixels.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(Integer width)",
          "name": "width",
          "description": "<p>The width of the chart in pixels. If <code>null</code>, the chart will use its default width.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Theme",
              "default": null,
              "name": "theme",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "theme(io.javelit.components.chart.EchartsComponent.Theme theme)",
          "name": "theme",
          "description": "<p>The chart theme using a predefined theme from the Theme enum.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "theme",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "theme(String theme)",
          "name": "theme",
          "description": "<p>The chart theme using a custom theme name. Custom themes can be loaded through custom headers.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "mapName",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "java.net.URI",
              "default": null,
              "name": "geoJson",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "withMap(String mapName, java.net.URI geoJson)",
          "name": "withMap",
          "description": "<p>A GEO map to register.\n You can register multiple maps by calling this method multiple times.\n The geoJson URI should point to valid geoJson file. If you want Javelit to host the file, see <a href=\"/get-started/fundamentals/additional-features#static-file-serving\" target=\"_blank\">static file serving</a>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "mapName",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "java.net.URI",
              "default": null,
              "name": "geoJson",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "Map&lt;String, io.javelit.components.chart.EchartsComponent.SpecialAreaConfig&gt;",
              "default": null,
              "name": "specialAreas",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "withMap(String mapName, java.net.URI geoJson, Map&lt;String, io.javelit.components.chart.EchartsComponent.SpecialAreaConfig&gt; specialAreas)",
          "name": "withMap",
          "description": "<p>A GEO map to register.\n You can register multiple maps by calling this method multiple times.\n The geoJson URI should point to valid geoJson file. If you want Javelit to host the file, see [static file serving](/get-started/fundamentals/additional-features#static-file-serving).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the container. <code>False</code> by default.\n For more control on the border style, set a border using the echarts chart configuration.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "org.icepear.echarts.Chart&lt;?, ?&gt;",
              "default": null,
              "name": "chart",
              "description": "<p>The ECharts <code>Chart</code> object to display</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(org.icepear.echarts.Chart&lt;?, ?&gt; chart)"
        },
        {
          "args": [
            {
              "type_name": "org.icepear.echarts.Option",
              "default": null,
              "name": "chartOption",
              "description": "<p>The ECharts <code>Option</code> object to display</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(org.icepear.echarts.Option chartOption)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "chartOptionJson",
              "description": "<p>The ECharts option as a JSON string</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(String chartOptionJson)"
        }
      ],
      "examples": "<p>Plot from a <code>Chart</code> (<code>Bar</code> extends <code>Chart</code>).\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n import org.icepear.echarts.Bar;\n\n public class BarChartApp {\n     public static void main(String[] args) {\n         Bar bar = new Bar()\n                 .setLegend()\n                 .setTooltip(\"item\")\n                 .addXAxis(new String[] { \"Matcha Latte\", \"Milk Tea\", \"Cheese Cocoa\", \"Walnut Brownie\" })\n                 .addYAxis()\n                 .addSeries(\"2015\", new Number[] { 43.3, 83.1, 86.4, 72.4 })\n                 .addSeries(\"2016\", new Number[] { 85.8, 73.4, 65.2, 53.9 })\n                 .addSeries(\"2017\", new Number[] { 93.7, 55.1, 82.5, 39.1 });\n\n         Jt.echarts(bar).use();\n     }\n }\n</code></pre></p>\n\n<p>Plot from an <code>Option</code>.\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n import org.icepear.echarts.Option;\n import org.icepear.echarts.charts.bar.BarSeries;\n import org.icepear.echarts.components.coord.cartesian.CategoryAxis;\n import org.icepear.echarts.components.coord.cartesian.ValueAxis;\n import org.icepear.echarts.origin.util.SeriesOption;\n\n public class OptionChartApp {\n     public static void main(String[] args) {\n         CategoryAxis xAxis = new CategoryAxis()\n                 .setType(\"category\")\n                 .setData(new String[] { \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\" });\n\n         ValueAxis yAxis = new ValueAxis().setType(\"value\");\n\n         BarSeries series = new BarSeries()\n                 .setData(new Number[] { 120, 200, 150, 80, 70, 110, 130 })\n                 .setType(\"bar\");\n\n         Option option = new Option()\n                 .setXAxis(xAxis)\n                 .setYAxis(yAxis)\n                 .setSeries(new SeriesOption[] { series });\n\n         Jt.echarts(option).use();\n     }\n }\n</code></pre></p>\n\n<p>Plot from a JSON <code>String</code>\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n import org.icepear.echarts.Option;\n import org.icepear.echarts.charts.bar.BarSeries;\n import org.icepear.echarts.components.coord.cartesian.CategoryAxis;\n import org.icepear.echarts.components.coord.cartesian.ValueAxis;\n import org.icepear.echarts.origin.util.SeriesOption;\n\n public class OptionChartApp {\n     public static void main(String[] args) {\n         String echartsOptionJson = \"\"\"\n                 {\n                   \"xAxis\": {\n                     \"type\": \"category\",\n                     \"data\": [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n                   },\n                   \"yAxis\": {\n                     \"type\": \"value\"\n                   },\n                   \"series\": [\n                     {\n                       \"data\": [150, 230, 224, 218, 135, 147, 260],\n                       \"type\": \"line\"\n                     }\n                   ]\n                 }\n                 \"\"\";\n\n         Jt.echarts(echartsOptionJson).use();\n     }\n }\n</code></pre></p>",
      "name": "echarts",
      "description": "<p>Display a chart using ECharts library.\n See <a href=\"https://echarts.icepear.org/\" target=\"_blank\">echarts-java documentation</a> for more info.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.divider": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.divider()"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>A unique key to avoid collisions when calling this method multiple times.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.divider(String key)"
        }
      ],
      "examples": "<p>Basic section separator\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class DividerApp {\n     public static void main(String[] args) {\n         Jt.title(\"Section 1\").use();\n         Jt.text(\"Content for section 1\").use();\n\n         Jt.divider().use();\n\n         Jt.title(\"Section 2\").use();\n         Jt.text(\"Content for section 2\").use();\n     }\n }\n</code></pre></p>\n\n<p>Basic section separator\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class DividerApp {\n     public static void main(String[] args) {\n         Jt.title(\"Section 1\").use();\n         Jt.text(\"Content for section 1\").use();\n\n         Jt.divider().use();\n\n         Jt.title(\"Section 2\").use();\n         Jt.text(\"Content for section 2\").use();\n     }\n }\n</code></pre></p>",
      "name": "divider",
      "description": "<p>Display a horizontal rule.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.slider": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "min",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "min(double min)",
          "name": "min",
          "description": "<p>The minimum permitted value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "max",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "max(double max)",
          "name": "max",
          "description": "<p>The maximum permitted value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(double value)",
          "name": "value",
          "description": "<p>The initial slider value. Defaults to the <code>min</code> value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "step",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "step(double step)",
          "name": "step",
          "description": "<p>The stepping interval. Default is 1.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "<p>A printf-style format string controlling how the interface should display numbers. This does not impact the return value.\n <p>\n For information about formatting integers and floats, see <a href=\"https://github.com/alexei/sprintf.js?tab=readme-ov-file#format-specification\" target=\"_blank\">sprintf.js</a>.\n For example, <code>format=&quot;%0.1f&quot;</code> adjusts the displayed decimal precision to only show one digit after the decimal.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the slider if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Double&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;Double&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function invoked when the slider value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this slider is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.slider(String label)"
        }
      ],
      "examples": "<p>Basic integer slider usage\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class SliderApp {\n     public static void main(String[] args) {\n         int age = Jt.slider(\"How old are you?\")\n             .min(0)\n             .max(130)\n             .value(25)\n             .use();\n\n         Jt.text(\"I'm \" + age + \" years old\").use();\n     }\n }\n</code></pre></p>",
      "name": "slider",
      "description": "<p>Display a slider widget.\n <p></p>",
      "returns": [
        {
          "type_name": "double",
          "description": "The current double value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.rerun": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "toHome",
              "description": "<p>If <code>true</code>, rerun in <code>/</code> url path. If <code>false</code>, rerun in current path.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.rerun(boolean toHome)"
        },
        {
          "args": [],
          "signature": "Jt.rerun()"
        }
      ],
      "examples": "<p>Updating session state and triggering rerun\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class RerunApp {\n     public static void main(String[] args) {\n          Jt.sessionState().computeIfAbsent(\"value\", \"Title\");\n\n         // Display current value\n         Jt.title(Jt.sessionState().getString(\"value\")).use();\n\n         if (Jt.button(\"Foo\").use()) {\n             Jt.sessionState().put(\"value\", \"Foo\");\n             Jt.rerun(false);\n         }\n     }\n }\n</code></pre></p>",
      "name": "rerun",
      "description": "<p>Rerun the script immediately.\n <p>\n When <code>Jt.rerun()</code> is called, Javelit halts the current app run and executes no further statements. Javelit immediately\n queues the script to rerun. In a multipage app: by default, the rerun is for the same url path (same page). If the rerun could make\n the current page unavailable, pass <code>toHome = true</code> to send back to the home url and avoid 404 errors.\n <p></p>",
      "returns": [],
      "source": ""
    },
    "Jt.radio": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "index",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "index(Integer index)",
          "name": "index",
          "description": "<p>The index of the preselected option on first render. If <code>null</code>, initializes empty and returns <code>null</code> until user selection.\n Defaults to 0 (the first option).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Function&lt;T, String&gt;",
              "default": null,
              "name": "formatFunction",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "formatFunction(function.Function&lt;T, String&gt; formatFunction)",
          "name": "formatFunction",
          "description": "<p>Function to modify the display of the radio options. The <code>Function</code> receives the raw option object\n and returns a String that will be used as display label.\n Does not impact the return value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the widget label. If <code>null</code>, no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;T&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;T&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the radio button&#39;s value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the radio buttons if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "horizontal",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "horizontal(boolean horizontal)",
          "name": "horizontal",
          "description": "<p>Orients the radio group horizontally instead of vertically when set to true.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List&lt;String&gt;",
              "default": null,
              "name": "captions",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "captions(List&lt;String&gt; captions)",
          "name": "captions",
          "description": "<p>A list of captions to show below each radio button. If <code>null</code> (default), no captions are shown.\n Must match the size of the options list.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the radio group in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this radio selection is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            },
            {
              "type_name": "List&lt;T&gt;",
              "default": null,
              "name": "options",
              "description": "<p>The list of options to choose from</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.radio(String label, List&lt;T&gt; options)"
        }
      ],
      "examples": "<p>Simple radio selection\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n import java.util.List;\n\n public class RadioApp {\n     public static void main(String[] args) {\n         String size = Jt.radio(\"Select size\",\n             List.of(\"Small\", \"Medium\", \"Large\")).use();\n\n         if (size != null) {\n             Jt.text(\"Selected size: \" + size).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Radio with custom objects\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class ProductRadioApp {\n     public static void main(String[] args) {\n         record Product(String name, double price) {}\n\n         Product selected = Jt\n                 .radio(\"Choose product\",\n                        List.of(new Product(\"Basic Plan\", 9.99),\n                                new Product(\"Pro Plan\", 19.99),\n                                new Product(\"Enterprise Plan\", 49.99)))\n                 .formatFunction(e -&gt; e.name + \" ($\" + e.price + \")\")\n                 .use();\n\n         if (selected != null) {\n             Jt.text(\"You chose: \" + selected.name()).use();\n             Jt.text(\"Price: $\" + selected.price()).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "radio",
      "description": "<p>Display a radio button widget.\n <p></p>",
      "returns": [
        {
          "type_name": "Nullable T",
          "description": "The current Nullable T value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.selectbox": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "index",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "index(Integer index)",
          "name": "index",
          "description": "<p>The index of the preselected option on first render. If <code>null</code>, initializes empty and returns <code>null</code> until user selection.\n Defaults to 0 (the first option).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Function&lt;T, String&gt;",
              "default": null,
              "name": "formatFunction",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "formatFunction(function.Function&lt;T, String&gt; formatFunction)",
          "name": "formatFunction",
          "description": "<p>Function to modify the display of the options. The <code>Function</code> receives the raw option object and returns a String that will be used as display label.\n Does not impact the return value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the widget label. If <code>null</code>, no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;T&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;T&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the selectbox value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the selectbox if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the selectbox in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>Text displayed when no option is selected. Default varies based on widget configuration.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "acceptNewOptions",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "acceptNewOptions(boolean acceptNewOptions)",
          "name": "acceptNewOptions",
          "description": "<p>Whether the user can add a selection that isn&#39;t included in options.\n If this is <code>false</code> (default), the user can only select from the items in options.\n If this is <code>true</code>, the user can enter a new item that doesn&#39;t exist in options.\n <p>\n When a user enters a new item, it is returned by the widget as a string.\n The new item is not added to the widget&#39;s drop-down menu. Javelit will use a case-insensitive match\n from options before adding a new item.\n <p>\n Only compatible with selectbox of <code>String</code> values.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this selection is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            },
            {
              "type_name": "List&lt;T&gt;",
              "default": null,
              "name": "options",
              "description": "<p>The list of options to choose from</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.selectbox(String label, List&lt;T&gt; options)"
        }
      ],
      "examples": "<p>Simple dropdown selection\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n import java.util.List;\n\n public class SelectBoxApp {\n     public static void main(String[] args) {\n         String country = Jt.selectbox(\"Select your country\",\n                                       List.of(\"United States\", \"Canada\", \"United Kingdom\", \"Germany\", \"France\")).use();\n\n         if (country != null) {\n             Jt.text(\"Selected country: \" + country).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Dropdown with default value\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class ProcessingSelectBoxApp {\n     public static void main(String[] args) {\n         String priority = Jt.selectbox(\"Task priority\",\n                                        List.of(\"Low\", \"Medium\", \"High\", \"Critical\"))\n                             .index(1)\n                             .use();\n         Jt.text(\"Priority: \" + priority).use();\n     }\n }\n</code></pre></p>",
      "name": "selectbox",
      "description": "<p>Display a select widget.\n <p></p>",
      "returns": [
        {
          "type_name": "Nullable T",
          "description": "The current Nullable T value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.table": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "List&lt;E&gt;",
              "default": null,
              "name": "rows",
              "description": "<p>The list of objects representing table rows</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(List&lt;E&gt; rows)"
        },
        {
          "args": [
            {
              "type_name": "Object",
              "default": null,
              "name": "dataframe",
              "description": "<p>A tablesaw Table instance. tablesaw is an optional dependency, so this method is not typed.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(Object dataframe)"
        },
        {
          "args": [
            {
              "type_name": "E[]",
              "default": null,
              "name": "rows",
              "description": "<p>The array of objects representing table rows</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(E[] rows)"
        },
        {
          "args": [
            {
              "type_name": "Map&lt;String, E[]&gt;",
              "default": null,
              "name": "cols",
              "description": "<p>A map where keys are column names and values are arrays of column data</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.tableFromArrayColumns(Map&lt;String, E[]&gt; cols)"
        },
        {
          "args": [
            {
              "type_name": "Map&lt;String, List&lt;Object&gt;&gt;",
              "default": null,
              "name": "cols",
              "description": "<p>A map where keys are column names and values are collections of column data</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.tableFromListColumns(Map&lt;String, List&lt;Object&gt;&gt; cols)"
        }
      ],
      "examples": "<p>Basic table with data objects\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n import java.util.List;\n\n public class TableApp {\n     public static void main(String[] args) {\n         record Person(String name, int age, String city) {\n         }\n\n         List&lt;Object&gt; data = List.of(new Person(\"Alice\", 25, \"New York\"),\n                                     new Person(\"Bob\", 30, \"San Francisco\"),\n                                     new Person(\"Charlie\", 35, \"Chicago\"));\n\n         Jt.table(data).use();\n     }\n }\n</code></pre></p>\n\n<p>Basic table with array of objects\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TableArrayApp {\n     public static void main(String[] args) {\n         record Product(String name, double price, boolean inStock) {}\n\n         Product[] products = {\n             new Product(\"Laptop\", 999.99, true),\n             new Product(\"Mouse\", 25.50, false),\n             new Product(\"Keyboard\", 75.00, true)\n         };\n\n         Jt.table(products).use();\n     }\n }\n</code></pre></p>\n\n<p>Table from column arrays\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.Map;\n\n public class TableColumnsArrayApp {\n     public static void main(String[] args) {\n         Map&lt;String, Object[]&gt; salesData = Map.of(\n                 \"Month\", new String[]{\"Jan\", \"Feb\", \"Mar\", \"Apr\"},\n                 \"Sales\", new Integer[]{1200, 1350, 1100, 1450},\n                 \"Target\", new Integer[]{1000, 1300, 1200, 1400},\n                 \"Achieved\", new Boolean[]{true, true, false, true}\n         );\n\n         Jt.tableFromArrayColumns(salesData).use();\n     }\n }\n</code></pre></p>\n\n<p>Table from column lists\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n import java.util.Map;\n\n public class TableColumnsListApp {\n     public static void main(String[] args) {\n         Map&lt;String, List&lt;Object&gt;&gt; employeeData = Map.of(\n                 \"Name\", List.of(\"Alice\", \"Bob\", \"Charlie\", \"Diana\"),\n                 \"Department\", List.of(\"Engineering\", \"Sales\", \"Marketing\", \"Engineering\"),\n                 \"Salary\", List.of(95000, 75000, 68000, 102000),\n                 \"Remote\", List.of(true, false, true, true)\n         );\n\n         Jt.tableFromListColumns(employeeData).use();\n     }\n }\n</code></pre></p>",
      "name": "table",
      "description": "<p>Display a static table.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.toggle": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(boolean value)",
          "name": "value",
          "description": "<p>Preselect the toggle when first rendered.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;Boolean&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function invoked when the toggle value changes.\n The value passed in the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the toggle if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this toggle is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.toggle(String label)"
        }
      ],
      "examples": "<p>Simple toggle\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class ToggleApp {\n     public static void main(String[] args) {\n         boolean enabled = Jt.toggle(\"Enable notifications\").use();\n\n         Jt.text(\"Notifications: \" + (enabled ? \"Enabled\" : \"Disabled\")).use();\n     }\n }\n</code></pre>\n <p>\n Toggle with default value\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class ToggleDefaultApp {\n     public static void main(String[] args) {\n         boolean autoSave = Jt.toggle(\"Auto-save\")\n             .value(true)\n             .use();\n\n         if (autoSave) {\n             Jt.text(\"Changes will be saved automatically\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "toggle",
      "description": "<p>Display a toggle widget.\n <p></p>",
      "returns": [
        {
          "type_name": "NotNull Boolean",
          "description": "The current NotNull Boolean value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.cache": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.cache()"
        }
      ],
      "examples": "<p>Caching expensive computations\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class CacheApp {\n      public static void main(String[] args) {\n          String cacheKey = \"long_running_operation\";\n          Long result = Jt.cache().getLong(cacheKey);\n\n          if (result == null) {\n              Jt.text(\"Performing a long running operation. This will take a few seconds\").use();\n              result = long_running_operation();\n              Jt.cache().put(cacheKey, result);\n          }\n\n          Jt.text(\"Result of long operation: \" + result).use();\n          Jt.text(\"Refresh or Open the page in another tab: the long running operation result will be cached\").use();\n      }\n\n      private static long long_running_operation(){\n          try {\n              Thread.sleep(5000);\n          } catch (InterruptedException ignored) {\n          }\n          return 42;\n      }\n  }\n</code></pre>\n <p>\n Sharing data across users\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class SharedDataApp {\n     public static void main(String[] args) {\n         // initialization\n         Jt.cache().putIfAbsent(\"counter\", 0);\n         // increment visits\n         int totalVisits = Jt.cache().computeInt(\"counter\", (k, v) -&gt; v + 1);\n\n         Jt.text(\"Total app visits: \" + totalVisits).use();\n     }\n }\n</code></pre>\n <p>\n Deleting values in the cache:\n <pre>\n <code>\n // remove all values\n Jt.cache().clear();\n // remove a single key\n Jt.cache().remove(&quot;my_key&quot;);\n </code>\n </pre>\n <code>TypedMap</code> simply extends the java <code>Map</code> type with quality-of-life\n casting methods like <code>getInt</code>, <code>getDouble</code>, <code>getString</code>, etc...</p>",
      "name": "cache",
      "description": "<p>Return the app cache. The app cache is shared across all sessions.\n Put values in this map that are meant to be shared across all users.\n For instance: database long-lived connections, ML models loaded weights, etc...\n <p>\n See <a href=\"https://docs.javelit.io/get-started/fundamentals/advanced-concepts#caching\">documentation</a>.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.datastructure.TypedMap",
          "description": "The current io.javelit.datastructure.TypedMap value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.sessionState": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.sessionState()"
        }
      ],
      "examples": "<p>Basic counter with session state\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class CounterApp {\n     public static void main(String[] args) {\n         // initialize a counter\n         Jt.sessionState().putIfAbsent(\"counter\", 0);\n\n         if (Jt.button(\"Increment\").use()) {\n             Jt.sessionState().computeInt(\"counter\", (k, v) -&gt; v + 1);\n         }\n\n         Jt.text(\"Counter: \" + Jt.sessionState().get(\"counter\")).use();\n     }\n }\n</code></pre></p>",
      "name": "sessionState",
      "description": "<p>Return the session state Map of the session. A session corresponds to an opened tab of the app.\n <p>\n The session state is maintained across re-runs.\n Values can be stored and persisted in this map.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.datastructure.TypedMap",
          "description": "The current io.javelit.datastructure.TypedMap value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.urlQueryParameters": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.urlQueryParameters()"
        }
      ],
      "examples": "<p>Using query parameters for app configuration\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class QueryParamsApp {\n     public static void main(String[] args) {\n         var params = Jt.urlQueryParameters();\n\n         String name = params.getOrDefault(\"name\", List.of(\"unknown user\")).get(0);\n\n         Jt.title(\"App Settings\").use();\n         Jt.text(\"Hello \" + name).use();\n         // URL: ?name=Alice would show:\n         // Hello Alice\n     }\n }\n</code></pre></p>",
      "name": "urlQueryParameters",
      "description": "<p>Return the current URL query parameters as a map.\n <p>\n For instance: <code>?key1=foo&amp;key2=bar&amp;key2=fizz</code> in the URL will return\n <code>{&quot;key1&quot;: [&quot;foo&quot;], &quot;key2&quot;: [&quot;bar&quot;, &quot;fizz&quot;]}</code>\n <p></p>",
      "returns": [
        {
          "type_name": "Map&lt;String, List&lt;String&gt;&gt;",
          "description": "The current Map&lt;String, List&lt;String&gt;&gt; value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.urlPath": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.urlPath()"
        }
      ],
      "examples": "<p>Conditional content based on current path\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class PathApp {\n     public static void main(String[] args) {\n         Jt.navigation(Jt.page(HomePage.class), Jt.page(DetailsPage.class)).use();\n\n         Jt.text(\"The current path is: \" + Jt.urlPath()).use();\n     }\n\n     public static class HomePage {\n         public static void main(String[] args) {\n             Jt.title(\"Home Page\").use();\n         }\n     }\n\n     public static class DetailsPage {\n         public static void main(String[] args) {\n             Jt.title(\"Details Page\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "urlPath",
      "description": "<p>Return the current url path.\n <p>\n May be used for multipage apps.\n In a single page app, will always return <code>&quot;/&quot;</code>.\n <p></p>",
      "returns": [
        {
          "type_name": "String",
          "description": "The current String value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.tabs": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.TabsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.TabsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "List&lt;String&gt;",
              "default": null,
              "name": "tabs",
              "description": "<p>A list of tab labels</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.tabs(List&lt;String&gt; tabs)"
        }
      ],
      "examples": "<p>Basic tabbed interface\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n import java.util.List;\n\n public class TabsApp {\n     public static void main(String[] args) {\n         var tabs = Jt.tabs(List.of(\"Overview\", \"Details\", \"Settings\")).use();\n\n         Jt.text(\"Welcome to the overview page\").use(tabs.tab(\"Overview\"));\n         Jt.text(\"Here are the details\").use(tabs.tab(\"Details\"));\n         Jt.text(\"Configure your settings here\").use(tabs.tab(\"Settings\"));\n     }\n }\n</code></pre>\n <p>\n Data analysis tabs\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class DataTabsApp {\n     public static void main(String[] args) {\n         var tabs = Jt.tabs(List.of(\"Sales\", \"Marketing\", \"Finance\")).use();\n\n         // Sales tab\n         Jt.title(\"Sales Dashboard\").use(tabs.tab(0));\n         Jt.text(\"Total sales: $100,000\").use(tabs.tab(0));\n\n         // Marketing tab\n         Jt.title(\"Marketing Metrics\").use(tabs.tab(1));\n         Jt.text(\"Conversion rate: 3.5%\").use(tabs.tab(1));\n\n         // Finance tab\n         Jt.title(\"Financial Overview\").use(tabs.tab(2));\n         Jt.text(\"Revenue growth: +15%\").use(tabs.tab(2));\n     }\n }\n</code></pre></p>",
      "name": "tabs",
      "description": "<p>Insert containers separated into tabs.\n <p>\n Inserts a number of multi-element containers as tabs.\n Tabs are a navigational element that allows users to easily move between groups of related content.\n <p>\n To add elements to the returned tabs container:\n <pre>\n <code>\n var tabs = Jt.tabs(&quot;my-tabs&quot;, List.of(&quot;E-commerce&quot;, &quot;Industry&quot;, &quot;Finance&quot;)).use();\n // get tab by name\n Jt.yourElement().use(tabs.tab(&quot;E-commerce&quot;));\n // get tab by index\n Jt.yourElement().use(tabs.tab(2));\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "Tabs",
          "description": "The current Tabs value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.form": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "clearOnSubmit",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "clearOnSubmit(boolean clearOnSubmit)",
          "name": "clearOnSubmit",
          "description": "<p>If True, all widgets inside the form will be reset to their default values after the user presses the Submit button.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "enterToSubmit",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "enterToSubmit(boolean enterToSubmit)",
          "name": "enterToSubmit",
          "description": "<p>If True (default), pressing Enter while in a form widget is like clicking the first form submit button. If False, the user must click the submit button to submit the form.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the form. Default is <code>true</code>. It is recommended to only remove the border if there is another border or the form is small.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "<p>The height of the form container. Can be <code>&quot;content&quot;</code> (default - matches height of content), <code>&quot;stretch&quot;</code> (matches content or parent container height), or a specific pixel value (sets a fixed height, enabling scrolling if content exceeds it).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.form()"
        }
      ],
      "examples": "<p>User registration form\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n public class FormApp {\n     public static void main(String[] args) {\n         var form = Jt.form().use();\n\n         String name = Jt.textInput(\"Full Name\").use(form);\n         String email = Jt.textInput(\"Email\").use(form);\n         int age = Jt.numberInput(\"Age\", Integer.class).min(0).max(120).use(form);\n         boolean subscribe = Jt.checkbox(\"Subscribe to newsletter\").use(form);\n\n         if (Jt.formSubmitButton(\"Register\").use()) {\n             Jt.text(\"Welcome, \" + name + \"!\").use();\n             Jt.text(\"Email: \" + email).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Survey form\n <pre><code class=\"language-java\"> import tech.catheu.javelit.core.Jt;\n\n import java.util.List;\n\n public class SurveyFormApp {\n     public static void main(String[] args) {\n         var form = Jt.form().use();\n         double satisfaction = Jt.slider(\"Satisfaction (1-10)\").min(1).max(10).value(5).use(form);\n         String feedback = Jt.textArea(\"Additional feedback\").use(form);\n         String department = Jt.selectbox(\"Department\",\n                                          List.of(\"Engineering\", \"Marketing\", \"Sales\", \"Support\")).use(form);\n\n         if (Jt.formSubmitButton(\"Submit Survey\").use(form)) {\n             Jt.text(\"Thank you for your feedback!\").use();\n             Jt.text(\"Satisfaction: \" + satisfaction + \"/10\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "form",
      "description": "<p>Create a form that batches elements together with a &#39;Submit&#39; button.\n <p>\n A form is a container that visually groups other elements and widgets together, and contains a Submit button.\n When the form&#39;s Submit button is pressed, all widget values inside the form will be sent to Javelit in a batch.\n <p>\n To add elements to the form:\n <pre>\n <code>\n var form = Jt.form(&quot;my-form-1&quot;).use();\n Jt.yourElement().use(form);\n ...\n Jt.formSubmitButton(&quot;submit form&quot;).use();\n </code>\n </pre>\n <p>\n Forms have a few constraints:\n <ul>\n     <li>Every form must contain a <code>Jt.formSubmitButton)</code></li>\n     <li><code>Jt.button</code> and <code>Jt.downloadButton</code> cannot be added to a form</li>\n     <li>Forms can appear anywhere in your app (sidebar, columns, etc), but they cannot be embedded inside other forms</li>\n     <li>Within a form, the only widget that can have a callback function is <code>Jt.formSubmitButton)</code></li>\n </ul>\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    }
  },
  "0.52.0": {
    "Jt.textInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(String value)",
          "name": "value",
          "description": "<p>The text value of this widget when it first renders. Defaults to empty string.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "maxChars",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxChars(Integer maxChars)",
          "name": "maxChars",
          "description": "<p>The maximum number of characters allowed in the text input.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "<p>Can be <code>&quot;default&quot;</code> or <code>&quot;password&quot;</code>. Determines if input masks the user&#39;s typed value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "autocomplete",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "autocomplete(String autocomplete)",
          "name": "autocomplete",
          "description": "<p>An optional value that will be passed to the <input> element&#39;s autocomplete property. If unspecified, this value will be set to <code>&quot;new-password&quot;</code> for <code>&quot;password&quot;</code> inputs, and the empty string for <code>&quot;default&quot;</code> inputs.\n For more details, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete</a>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>An optional string displayed when the text input is empty.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the text input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>Controls the widget width. Can be <code>&quot;stretch&quot;</code> (default) or a pixel value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;String&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;String&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the text input&#39;s value changes.\n The value passed in the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.textInput(String label)"
        }
      ],
      "examples": "<p>Simple text input\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TextInputApp {\n     public static void main(String[] args) {\n         String name = Jt.textInput(\"Your name\").use();\n\n         if (!name.isEmpty()) {\n             Jt.text(\"Hello, \" + name + \"!\").use();\n         }\n     }\n }\n</code></pre>\n <p>\n Text input with validation\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ValidatedTextInputApp {\n     public static void main(String[] args) {\n         String email = Jt.textInput(\"Email address\")\n                          .placeholder(\"Enter your email\")\n                          .use();\n\n         if (!email.isEmpty() &amp;&amp; !email.contains(\"@\")) {\n             Jt.error(\"Please enter a valid email address\").use();\n         } else if (!email.isEmpty()) {\n             Jt.text(\"Valid email: \" + email).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "textInput",
      "description": "<p>Display a single-line text input widget.\n <p></p>",
      "returns": [
        {
          "type_name": "string",
          "description": "The current string value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.code": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "language",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "language(String language)",
          "name": "language",
          "description": "<p>The language that the code is written in, for syntax highlighting. This defaults to <code>java</code>.\n If this is <code>null</code>, the code will be plain, monospace text.\n <p>\n For a list of available language values, see list on <a href=\"https://prismjs.com/#supported-languages\">prismjs documentation</a>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "lineNumbers",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "lineNumbers(boolean lineNumbers)",
          "name": "lineNumbers",
          "description": "<p>An optional boolean indicating whether to show line numbers to the left of the code block. This defaults to <code>false</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "wrapLines",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "wrapLines(boolean wrapLines)",
          "name": "wrapLines",
          "description": "<p>An optional boolean indicating whether to wrap lines. This defaults to <code>false</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "<p>The height of the code block element. This can be one of the following:\n <p>\n <ul>\n  <li><code>content</code> (default): The height of the element matches the height of its content.</li>\n  <li><code>stretch</code>: The height of the element matches the height of its content or the height of the parent container, whichever is larger. If the element is not in a parent container, the height of the element matches the height of its content.</li>\n  <li>An integer specifying the height in pixels: The element has a fixed height. If the content is larger than the specified height, scrolling is enabled.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "heightPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int heightPixels)",
          "name": "height",
          "description": "<p>The height of the element in pixels. The element will have a fixed height. If the content is larger than the specified height, scrolling is enabled.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The string to display as code or monospace text.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.code(String body)"
        }
      ],
      "examples": "<p>Simple code block\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class CodeApp {\n     public static void main(String[] args) {\n         Jt.code(\"public class HelloWorld {}\").use();\n     }\n }\n</code></pre>\n <p>\n Multi-line code with syntax highlighting\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class MultilineCodeApp {\n     public static void main(String[] args) {\n         String pythonCode = \"\"\"\n                 import numpy as np\n\n                 a = np.arange(15).reshape(3, 5)\n                 \"\"\";\n         Jt.code(pythonCode).language(\"python\").use();\n     }\n }\n</code></pre></p>",
      "name": "code",
      "description": "<p>Display a code block with optional syntax highlighting.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.pageLink": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "label(String label)",
          "name": "label",
          "description": "<p>The text to display for the link. Markdown is supported, see <code>io.javelit.core.Jt#markdown(String)</code> for more details.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the link if set to true.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the link element. Use <code>&quot;content&quot;</code> to fit content, <code>&quot;stretch&quot;</code> to fill container, or a pixel value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class&lt;?&gt;",
              "default": null,
              "name": "pageClass",
              "description": "<p>The class of the page to link to in a multipage app. If null, target the home page.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.pageLink(Class&lt;?&gt; pageClass)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "url",
              "description": "<p>The URL to link to</p>",
              "is_optional": false
            },
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The text to display for the link. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.pageLink(String url, String label)"
        }
      ],
      "examples": "<p>A multipage app with the sidebar hidden.\n A footer replaces the sidebar. The footer contains links to all pages of the app and an external link.\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ToDelete {\n\n     public static class FirstPage {\n         public static void main(String[] args) {\n             Jt.title(\"First Page\").use();\n             Jt.text(\"first page content\").use();\n         }\n     }\n\n     public static class SecondPage {\n         public static void main(String[] args) {\n             Jt.title(\"Second Page\").use();\n             Jt.text(\"Second page content\").use();\n         }\n     }\n\n     public static void main(String[] args) {\n         var page = Jt\n                 .navigation(Jt.page(FirstPage.class).title(\"First page\").icon(\"🔥\"),\n                             Jt.page(SecondPage.class).title(\"Second page\").icon(\":favorite:\"))\n                 .hidden()\n                 .use();\n\n         Jt.divider().use();\n         Jt.pageLink(FirstPage.class).use();\n         Jt.pageLink(SecondPage.class).use();\n         Jt.pageLink(\"https://github.com/javelit/javelit\", \"Github project\").icon(\":link:\").use();\n     }\n }\n</code></pre></p>",
      "name": "pageLink",
      "description": "<p>Display a link to another page in a multipage app or to an external page.\n <p>\n If another page in a multipage app is specified, clicking the <code>Jt.pageLink</code> element stops the current page execution\n and runs the specified page as if the user clicked on it in the sidebar navigation.\n <p>\n If an external page is specified, clicking the <code>Jt.pageLink</code> element opens a new tab to the specified page.\n The current script run will continue if not complete.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.textArea": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(String value)",
          "name": "value",
          "description": "<p>The initial text value when the widget renders. Defaults to empty string.\n If <code>null</code>, will initialize empty and return <code>null</code> until the user provides input.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "<p>The text area widget height. This can be &quot;content&quot;, &quot;stretch&quot;, or a pixel value. Minimum height is 2 lines.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "heightInPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int heightInPixels)",
          "name": "height",
          "description": "<p>The text area widget height in pixels. Minimum height is 2 lines.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "maxChars",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxChars(Integer maxChars)",
          "name": "maxChars",
          "description": "<p>The maximum number of characters allowed in the text area.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>The text displayed when the text area is empty.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the text area input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The widget width. Can be <code>&quot;stretch&quot;</code> (default) or a pixel value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;String&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;String&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function that will be called when the text area value changes.\n The value passed in the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.textArea(String label)"
        }
      ],
      "examples": "<p>Simple text area\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TextAreaApp {\n     public static void main(String[] args) {\n         String feedback = Jt.textArea(\"Your feedback\").use();\n\n         if (!feedback.isEmpty()) {\n             Jt.text(\"Thank you for your feedback!\").use();\n             Jt.text(\"Character count: \" + feedback.length()).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Text area for code input\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class CodeTextAreaApp {\n     public static void main(String[] args) {\n         String code = Jt.textArea(\"Enter your Java code\")\n                         .height(200)\n                         .placeholder(\"public class MyClass {\\n    // Your code here\\n}\")\n                         .use();\n\n         if (!code.isEmpty()) {\n             Jt.text(\"Code preview:\").use();\n             Jt.code(code).language(\"java\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "textArea",
      "description": "<p>Display a multi-line text input widget.\n <p></p>",
      "returns": [
        {
          "type_name": "string",
          "description": "The current string value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.text": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "body(String body)",
          "name": "body",
          "description": "<p>The string to display.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The string to display.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.text(String body)"
        }
      ],
      "examples": "<p><pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TextApp {\n     public static void main(String[] args) {\n         Jt.text(\"This is some plain text.\").use();\n\n         Jt.text(\"\"\"\n                         This is preformatted text.\n                         It preserves    spacing\n                         and line breaks.\n                         \"\"\").use();\n     }\n }\n</code></pre></p>",
      "name": "text",
      "description": "<p>Write text without Markdown or HTML parsing.\n For monospace text, use <code>Jt#code</code></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.checkbox": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(boolean value)",
          "name": "value",
          "description": "<p>Preselect the checkbox when first rendered.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;Boolean&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function invoked when the checkbox value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the checkbox if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this checkbox is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.checkbox(String label)"
        }
      ],
      "examples": "<p>Basic checkbox usage\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class CheckboxApp {\n     public static void main(String[] args) {\n         boolean agree = Jt.checkbox(\"I agree\").use();\n\n         if (agree) {\n             Jt.text(\"Great!\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "checkbox",
      "description": "<p>Display a checkbox widget.\n <p></p>",
      "returns": [
        {
          "type_name": "NotNull Boolean",
          "description": "The current NotNull Boolean value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.expander": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "expanded",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "expanded(boolean expanded)",
          "name": "expanded",
          "description": "<p>The initial state of the expander. When set to <code>true</code>, the expander starts in the expanded state. When <code>false</code> (default), the expander starts collapsed.\n Note that all content within the expander is computed and sent to the frontend regardless of the initial state.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The label for the expander header</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.expander(String label)"
        }
      ],
      "examples": "<p>Basic expander with explanation content\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ExpanderApp {\n     public static void main(String[] args) {\n         var expander = Jt.expander(\"See explanation\").use();\n\n         Jt.text(\"\"\"\n                 [A great explanation on the why and how of life.]\n                 \"\"\").use(expander);\n     }\n }\n</code></pre></p>",
      "name": "expander",
      "description": "<p>Insert a multi-element container that can be expanded/collapsed.\n <p>\n Insert a container into your app that can be used to hold multiple elements and can be expanded or collapsed by the user.\n When collapsed, all that is visible is the provided label.\n <p>\n To add elements to the returned expander:\n <pre>\n <code>\n var expander = Jt.expander(&quot;my-expander&quot;, &quot;More details&quot;).use();\n Jt.yourElement().use(expander);\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.formSubmitButton": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "<p>The button type that determines its appearance and emphasis level. Can be <code>&quot;primary&quot;</code>, <code>&quot;secondary&quot;</code> (default), or <code>&quot;tertiary&quot;</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the button if set to True. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "<p>Controls the button width. If True, the button width matches the parent container width. If False (default), the button width matches its content width. This parameter is deprecated - use width() instead.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onClick",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onClick(function.Consumer&lt;Boolean&gt; onClick)",
          "name": "onClick",
          "description": "<p>An optional callable function that is invoked when the button is clicked.\n The callback receives the previous button click state as a parameter. In this case, the previous click state is always <code>false</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The text to display on the submit button</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.formSubmitButton(String label)"
        }
      ],
      "examples": "<p>Basic form submit button\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class FormSubmitApp {\n     public static void main(String[] args) {\n         var form = Jt.form(\"contact\").use();\n\n         String name = Jt.textInput(\"Your Name\").use(form);\n         String message = Jt.textArea(\"Message\").use(form);\n\n         if (Jt.formSubmitButton(\"Send Message\").use(form)) {\n             Jt.text(\"Message sent successfully!\").use();\n             Jt.text(\"From: \" + name).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Multiple submit buttons in same form\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class MultiSubmitApp {\n     public static void main(String[] args) {\n         var form = Jt.form(\"document\").use();\n\n         String title = Jt.textInput(\"Document Title\").use(form);\n         String content = Jt.textArea(\"Content\").use(form);\n\n         if (Jt.formSubmitButton(\"Save Draft\").key(\"save\").use(form)) {\n             Jt.text(\"Draft saved: \" + title).use();\n         }\n\n         if (Jt.formSubmitButton(\"Publish\").key(\"publish\").use(form)) {\n             Jt.text(\"Document published: \" + title).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "formSubmitButton",
      "description": "<p>Display a form submit button.\n <p>\n When clicked, all widget values inside the form will be sent from the user&#39;s browser to the Javelit server in a batch.\n <p>\n Every form must have at least one <code>Jt.formSubmitButton</code>. A <code>Jt.formSubmitButton</code> cannot exist outside a form.\n <p></p>",
      "returns": [
        {
          "type_name": "boolean",
          "description": "The current boolean value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.container": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(Integer height)",
          "name": "height",
          "description": "<p>The height of the container in pixels. When a fixed height is specified, the container will enable scrolling if content exceeds the specified height. It is recommended to use scrolling containers sparingly and avoid heights that exceed 500 pixels for optimal mobile experience.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(Boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the container. If not specified (<code>null</code>), the border is automatically shown when the container has a fixed height, and hidden when height adapts to content.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.container()"
        }
      ],
      "examples": "<p>Basic container usage and adding elements out of order\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ContainerApp {\n     public static void main(String[] args) {\n         var container = Jt.container().use();\n\n         Jt.text(\"This is inside the container\").use(container);\n         Jt.text(\"This is outside the container\").use();\n         Jt.text(\"This is inside too\").use(container);\n     }\n }\n</code></pre></p>",
      "name": "container",
      "description": "<p>Insert a multi-element container.\n <p>\n Insert an invisible container into your app that can be used to hold multiple elements.\n This allows you to, for example, insert multiple elements into your app out of order.\n <p>\n To add elements to the returned container:\n <pre>\n <code>\n var container = Jt.container(&quot;container-1&quot;).use();\n Jt.yourElement().use(container);\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.popover": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the popover button if set to True. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "<p>Controls the button width. If True, the button width matches the parent container width. If False (default), the button width matches its content width. This parameter is deprecated - use width() instead.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The label for the popover button. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.popover(String label)"
        }
      ],
      "examples": "<p>Settings popover\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class PopoverApp {\n     public static void main(String[] args) {\n         var settings = Jt.popover(\"⚙️ Settings\").use();\n\n         Jt.text(\"Configure your preferences:\").use(settings);\n         boolean notifications = Jt.checkbox(\"Enable notifications\").use(settings);\n         String theme = Jt.selectbox(\"Theme\", List.of(\"Light\", \"Dark\")).use(settings);\n\n         if (notifications) {\n             Jt.text(\"Notifications are enabled\").use();\n         }\n         Jt.text(\"The selected theme is \" + theme).use();\n     }\n }\n</code></pre>\n <p>\n Help popover with information\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class HelpPopoverApp {\n     public static void main(String[] args) {\n         Jt.text(\"Username:\").use();\n         Jt.textInput(\"Enter username\").use();\n\n         var help = Jt.popover(\"❓ Help\").use();\n         Jt.text(\"**Username requirements:**\").use(help);\n         Jt.text(\"- Must be 3-20 characters long\").use(help);\n         Jt.text(\"- Only letters and numbers allowed\").use(help);\n         Jt.text(\"- Case sensitive\").use(help);\n     }\n }\n</code></pre></p>",
      "name": "popover",
      "description": "<p>Insert a popover container.\n <p>\n Inserts a multi-element container as a popover. It consists of a button-like element and a container that opens when the button is clicked.\n <p>\n Opening and closing the popover will not trigger a rerun. Interacting with widgets inside of an open popover will\n rerun the app while keeping the popover open. Clicking outside of the popover will close it.\n <p>\n To add elements to the returned popover:\n <pre><code class=\"language-java\"> var popover = Jt.popover(\"my-popover\", \"Advanced configuration\").use();\n Jt.yourElement().use(popover);\n</code></pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.numberInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(T value)",
          "name": "value",
          "description": "<p>The value of this widget when it first renders.\n If <code>null</code>, initializes with no value and returns null until an input is provided to the component.\n The default behavior is to return the minimum value. If the minimum value is not set, the widget initializes\n with a value of <code>0</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "minValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "minValue(T minValue)",
          "name": "minValue",
          "description": "<p>The minimum permitted value. For <code>Integer</code> and <code>Long</code>, defaults to the corresponding minimum\n possible value.\n For <code>Float</code> and <code>Double</code>, no minimum by default.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "maxValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxValue(T maxValue)",
          "name": "maxValue",
          "description": "<p>The maximum permitted value. For <code>Integer</code> and <code>Long</code>, defaults to the corresponding maximum\n possible value.\n For <code>Float</code> and <code>Double</code>, no maximum by default.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "step",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "step(T step)",
          "name": "step",
          "description": "<p>The stepping interval. Defaults to 1 for <code>Integer</code> and <code>Long</code>, 0.01 for floating points.\n Must be strictly positive.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "<p>A printf-style format string controlling how numbers are displayed in the interface.\n The output must be purely numeric. This does not impact the return value of the widget.\n For more information about the formatting specification, see <a href=\"https://github.com/alexei/sprintf.js?tab=readme-ov-file#format-specification\" target=\"_blank\">sprintf.js</a>.\n <p>\n For example, <code>format=&quot;%0.1f&quot;</code> adjusts the displayed decimal precision to only show one digit after the decimal.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the widget label. If <code>null</code>, no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>An optional text displayed when the number input is empty, providing guidance to the user.\n If None, no placeholder is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the number input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the number input in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;T&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;T&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the number input&#39;s value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this numeric input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.numberInput(String label)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this numeric input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            },
            {
              "type_name": "Class&lt;T&gt;",
              "default": null,
              "name": "valueClass",
              "description": "<p>The number type class (Integer, Double, Float, etc.)</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.numberInput(String label, Class&lt;T&gt; valueClass)"
        }
      ],
      "examples": "<p>Simple number input\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class NumberInputApp {\n     public static void main(String[] args) {\n         Number quantity = Jt.numberInput(\"Quantity\").minValue(1).maxValue(100).use();\n\n         if (quantity != null) {\n             Jt.text(\"You selected: \" + quantity).use();\n         }\n     }\n }\n</code></pre></p>\n\n<p>Integer input with specific type\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TypedNumberInputApp {\n     public static void main(String[] args) {\n         Integer age = Jt.numberInput(\"Age\", Integer.class)\n                         .minValue(0)\n                         .maxValue(150)\n                         .use();\n\n         if (age != null) {\n             String category = age &lt; 18 ? \"Minor\" : age &lt; 65 ? \"Adult\" : \"Senior\";\n             Jt.text(\"Category: \" + category).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "numberInput",
      "description": "<p>Display a numeric input widget.\n <p></p>",
      "returns": [
        {
          "type_name": "T",
          "description": "The current T value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.fileUploader": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List&lt;String&gt;",
              "default": null,
              "name": "types",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(List&lt;String&gt; types)",
          "name": "type",
          "description": "<p>The allowed file extensions or MIME types. If <code>null</code>, all file types are allowed. Use file extensions like <code>&quot;.pdf&quot;</code> or MIME types like <code>&quot;image/png&quot;</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.MultipleFiles",
              "default": null,
              "name": "acceptMultipleFiles",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "acceptMultipleFiles(io.javelit.components.media.FileUploaderComponent.MultipleFiles acceptMultipleFiles)",
          "name": "acceptMultipleFiles",
          "description": "<p>Whether to accept more than one file in a submission. This can be one of the following values:\n <ul>\n     <li><code>MultipleFiles.FALSE</code> (default): The user can only submit one file at a time.</li>\n     <li><code>MultipleFiles.TRUE</code>: The user can upload multiple files at the same time.</li>\n     <li><code>MultipleFiles.DIRECTORY</code>: The user can select a directory to upload all files in the directory and its subdirectories. If <code>type</code> is set, only files matching those type(s) will be uploaded.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the file uploader if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;List&lt;io.javelit.core.JtUploadedFile&gt;&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;List&lt;JtUploadedFile&gt;&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the file uploader&#39;s value changes.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the text element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this file uploader is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.fileUploader(String label)"
        }
      ],
      "examples": "<p>Basic file upload with processing\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n import io.javelit.core.JtUploadedFile;\n\n import java.util.List;\n\n public class FileUploadApp {\n     public static void main(String[] args) {\n         var uploadedFiles = Jt.fileUploader(\"Choose a CSV file\")\n                               .type(List.of(\".csv\"))\n                               .use();\n\n         if (!uploadedFiles.isEmpty()) {\n             JtUploadedFile file = uploadedFiles.getFirst();\n             Jt.text(\"Uploaded file: \" + file.filename()).use();\n             Jt.text(\"File size: \" + file.content().length + \" bytes\").use();\n             Jt.text(\"Content type: \" + file.contentType()).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "fileUploader",
      "description": "<p>Display a file uploader widget.\n <p></p>",
      "returns": [
        {
          "type_name": "JtUploadedFile>",
          "description": "The current JtUploadedFile> value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.markdown": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The text to display as Markdown.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.markdown(String body)"
        }
      ],
      "examples": "<p>Basic markdown formatting and colored text styling\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class MarkdownApp {\n     public static void main(String[] args) {\n         // Basic text formatting\n         Jt.markdown(\"*Javelit* is **really** ***cool***.\").use();\n\n         // Divider\n         Jt.markdown(\"---\").use();\n\n         // Emoji and line breaks\n         Jt.markdown(\"Here's a bouquet — :tulip::cherry_blossom::rose::hibiscus::sunflower::blossom:\").use();\n     }\n }\n</code></pre></p>",
      "name": "markdown",
      "description": "<p>Display string formatted as Markdown.\n <p>\n Supported :\n <ul>\n     <li>Emoji shortcodes, such as <code>:+1:</code> and <code>:sunglasses:</code>. For a list of all supported codes, see <a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\">https://www.webfx.com/tools/emoji-cheat-sheet/</a>.</li>\n     <li>Tables</li>\n     <li>Strikethrough</li>\n     <li>Autolink: turns plain links such as URLs and email addresses into links</li>\n </ul>\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.setComponentState": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>The key of the component (as set via <code>.key()</code>)</p>",
              "is_optional": false
            },
            {
              "type_name": "Object",
              "default": null,
              "name": "value",
              "description": "<p>The new value to set</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.setComponentState(String key, Object value)"
        }
      ],
      "examples": "<p>Programmatically update a text input value\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class UpdateStateApp {\n     public static void main(String[] args) {\n         String name = Jt.textInput(\"Name\").key(\"name\").use();\n         Jt.button(\"Clear name\")\n           .onClick(b -&gt; Jt.setComponentState(\"name\", \"\"))\n           .use();\n         Jt.text(\"Hello \" + name).use();\n     }\n }\n</code></pre>\n <p></p>",
      "name": "setComponentState",
      "description": "<p>Update a component&#39;s value by its user-defined key.\n <p>\n This method allows programmatic updating of component state. Limits:\n <ul>\n     <li>You cannot modify the value of a component that has not been rendered with a <code>.key()</code> in the session yet.</li>\n     <li>You cannot modify the value of a component that has already been rendered in the current app run.</li>\n </ul>\n Learn more in the <a href=\"https://docs.javelit.io/develop/concepts/design/buttons#buttons-to-modify-or-reset-other-widgets\">modify widget examples</&gt;.\n <p>\n This method validates that the provided value is of the correct type and respects constraints if any (for instance, value range).\n <p></p>",
      "returns": [],
      "source": ""
    },
    "Jt.html": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.HtmlComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.HtmlComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The HTML code to insert.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.html(String body)"
        },
        {
          "args": [
            {
              "type_name": "java.nio.file.Path",
              "default": null,
              "name": "filePath",
              "description": "<p>The path of the file containing the HTML code to insert.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.html(java.nio.file.Path filePath)"
        }
      ],
      "examples": "<p>Simple HTML content\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class HtmlApp {\n     public static void main(String[] args) {\n         Jt.html(\"&lt;h3&gt;Custom HTML Header&lt;/h3&gt;\").use();\n         Jt.html(\"&lt;p style='color: blue;'&gt;This is blue text&lt;/p&gt;\").use();\n         Jt.html(\"&lt;ul&gt;&lt;li&gt;Item 1&lt;/li&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;li&gt;Item 3&lt;/li&gt;&lt;/ul&gt;\").use();\n     }\n }\n</code></pre></p>\n\n<p>Loading HTML from file\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.nio.file.Path;\n\n public class HtmlFileApp {\n     public static void main(String[] args) {\n         // Assumes you have a file \"content.html\" in your project\n         Jt.html(Path.of(\"content.html\")).use();\n     }\n }\n</code></pre></p>",
      "name": "html",
      "description": "<p>Insert HTML into your app.\n <p>\n Adding custom HTML to your app impacts safety, styling, and maintainability.\n We sanitize HTML with <a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a>, but inserting HTML remains a developer risk.\n Passing untrusted code to Jt.html or dynamically loading external code can increase the risk of vulnerabilities in your app.\n <p>\n <code>Jt.html</code> content is not iframed. Executing JavaScript is not supported.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.columns": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "numColumns",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "numColumns(int numColumns)",
          "name": "numColumns",
          "description": "<p>The number of columns to create. Must be between 2 and 12 inclusive. Each column will have equal width\n unless custom widths are specified.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List&lt;Double&gt;",
              "default": null,
              "name": "widths",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "widths(List&lt;Double&gt; widths)",
          "name": "widths",
          "description": "<p>A list of relative column widths. The list size must match the number of columns. For example, [0.7, 0.3]\n creates two columns with 70% and 30% width respectively. If not specified, all columns have equal width.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Gap",
              "default": null,
              "name": "gap",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "gap(io.javelit.components.layout.ColumnsComponent.Gap gap)",
          "name": "gap",
          "description": "<p>Controls the space between columns. Options are <code>SMALL</code> (<code>1rem</code> gap, default), <code>MEDIUM</code> (<code>2rem</code> gap),\n <code>LARGE</code> (<code>4rem</code> gap), or <code>NONE</code> (no gap between columns).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.VerticalAlignment",
              "default": null,
              "name": "verticalAlignment",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "verticalAlignment(io.javelit.components.layout.ColumnsComponent.VerticalAlignment verticalAlignment)",
          "name": "verticalAlignment",
          "description": "<p>The vertical alignment of the content inside the columns. Options are <code>TOP</code> (default), <code>CENTER</code>, or <code>BOTTOM</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the column containers.\n If this is <code>false</code> (default), no border is shown. If this is <code>true</code>,\n a border is shown around each column.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "numColumns",
              "description": "<p>The number of columns to create</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.columns(int numColumns)"
        }
      ],
      "examples": "<p>Basic three-column layout with headers and content\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ColumnsApp {\n     public static void main(String[] args) {\n         var cols = Jt.columns(3).use();\n\n         Jt.title(\"A cat\").use(cols.col(0));\n         Jt.title(\"A dog\").use(cols.col(1));\n         Jt.title(\"An owl\").use(cols.col(2));\n     }\n }\n</code></pre></p>",
      "name": "columns",
      "description": "<p>Insert containers laid out as side-by-side columns.\n <p>\n Inserts a number of multi-element containers laid out side-by-side and returns a list of container objects.\n <p>\n To add elements to the returned columns container:\n <pre>\n <code>\n var cols = Jt.columns(&quot;my-3-cols&quot;, 3).use();\n Jt.yourElement().use(cols.col(1));\n Jt.yourElement().use(cols.col(0));\n Jt.yourElement().use(cols.col(2));\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "Columns",
          "description": "The current Columns value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.deepCopy": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "original",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "com.fasterxml.jackson.core.type.TypeReference&lt;T&gt;",
              "default": null,
              "name": "typeRef",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "Jt.deepCopy(T original, com.fasterxml.jackson.core.type.TypeReference&lt;T&gt; typeRef)"
        }
      ],
      "examples": "<p>Safe copying from cache to prevent mutations\n <pre><code class=\"language-java\"> import java.util.ArrayList;\n import java.util.List;\n\n import io.javelit.core.Jt;\n\n import com.fasterxml.jackson.core.type.TypeReference;\n\n public class DeepCopyApp {\n     public static void main(String[] args) {\n         // init\n         List&lt;String&gt; sharedList = (List&lt;String&gt;) Jt.cache().get(\"shared_list\");\n         if (sharedList == null) {\n             sharedList = new ArrayList&lt;&gt;();\n             sharedList.add(\"item1\");\n             sharedList.add(\"item2\");\n             Jt.cache().put(\"shared_list\", sharedList);\n         }\n\n         // Create a safe copy to avoid mutations affecting other sessions\n         List&lt;String&gt; safeCopy = Jt.deepCopy(sharedList, new TypeReference&lt;&gt;() {\n         });\n\n         if (Jt.button(\"remove elements from user lists\").use()) {\n             safeCopy.clear();\n         }\n\n         Jt.text(\"Original list size: \" + sharedList.size()).use();\n         Jt.text(\"Safe copy size: \" + safeCopy.size()).use();\n     }\n }\n</code></pre></p>",
      "name": "deepCopy",
      "description": "<p>Return a deep copy of the provided object.\n <p>\n Utility that may be useful in combination with the cache, to implement a copy on read behavior.\n For instance, you can get a value that is expensive to\n instantiate from the cache, but perform a deep copy to prevent mutations and side effects across sessions.\n <p></p>",
      "returns": [
        {
          "type_name": "T",
          "description": "The current T value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.empty": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(Integer height)",
          "name": "height",
          "description": "<p>The height of the container in pixels. When a fixed height is specified, the container will enable scrolling if content exceeds the specified height. It is recommended to use scrolling containers sparingly and avoid heights that exceed 500 pixels for optimal mobile experience.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(Boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the container. If not specified (<code>null</code>), the border is automatically shown when the container has a fixed height, and hidden when height adapts to content.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.empty()"
        }
      ],
      "examples": "<p>Dynamic content replacement\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class EmptyApp {\n     public static void main(String[] args) {\n         var placeholder = Jt.empty().use();\n         String selected = Jt.selectbox(\"Choose content\",\n             List.of(\"None\", \"Text\", \"Button\")).use();\n\n         switch (selected) {\n             case \"Text\" -&gt; Jt.text(\"Dynamic text content\").use(placeholder);\n             case \"Button\" -&gt; {\n                 if (Jt.button(\"Dynamic button\").use(placeholder)) {\n                     Jt.text(\"Button clicked!\").use();\n                 }\n             }\n             // case \"None\" -&gt; container remains empty\n         }\n     }\n }\n</code></pre>\n <p>\n Simple animations\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;import io.javelit.core.Jt;\n\n public class AnimationEmptyApp {\n     public static void main(String[] args) {\n         var emptyContainer = Jt.empty().use();\n          for (i = 10; i&gt;=1; i--) {\n               Jt.text(i + \"!\").use(emptyContainer);\n                Thread.sleep(1000);\n           }\n           Jt.text(\"Happy new Year !\").use(emptyContainer);\n           Jt.button(\"rerun\").use();\n     }\n }\n</code></pre></p>",
      "name": "empty",
      "description": "<p>Insert a single-element container.\n <p>\n Insert a container into your app that can be used to hold a single element.\n This allows you to, for example, remove elements at any point, or replace several elements at once (using a child multi-element container).\n <p>\n To insert/replace/clear an element on the returned container:\n <pre>\n <code>\n var container = Jt.empty(&quot;empty-1&quot;).use();\n Jt.yourElement().use(container);\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.navigation": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "io.javelit.core.JtPage.Builder[]",
              "default": null,
              "name": "pages",
              "description": "<p>The pages to include in the navigation</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.navigation(JtPage.Builder[] pages)"
        }
      ],
      "examples": "<p>Basic multipage navigation setup\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class NavigationApp {\n     public static class FirstPage {\n         public static void main(String[] args) {\n             Jt.title(\"First Page\").use();\n         }\n     }\n\n     public static class SecondPage {\n         public static void main(String[] args) {\n             Jt.title(\"Second Page\").use();\n         }\n     }\n\n     public static void main(String[] args) {\n         var page = Jt\n                 .navigation(Jt.page(FirstPage.class).title(\"First page\").icon(\"🔥\"),\n                             Jt.page(SecondPage.class).title(\"Second page\").icon(\":favorite:\"))\n                 .use();\n     }\n }\n</code></pre></p>",
      "name": "navigation",
      "description": "<p>Create a navigation component with multiple pages to create a multipage app.\n <p>\n Call <code>Jt.navigation</code> in your entrypoint app class to define the available pages in your app.\n <code>Jt.navigation</code> use() returns the current page.\n <p>\n When using <code>Jt.navigation</code>, your entrypoint app class acts like a frame of common elements around each of your pages.\n <p>\n The set of available pages can be updated with each rerun for dynamic navigation.\n By default, <code>Jt.navigation</code> displays the available pages in the sidebar if there is more than one page.\n This behavior can be changed using the <code>position</code> builder method.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.core.NavigationComponent.Builder",
          "description": "The current io.javelit.core.NavigationComponent.Builder value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.componentsState": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.componentsState()"
        }
      ],
      "examples": "<p>Accessing component values by key\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ComponentsStateApp {\n     public static void main(String[] args) {\n         double volumeFromUse = Jt.slider(\"Volume\").key(\"volume\").min(0).max(100).value(50).use();\n         double volumeFromState = Jt.componentsState().getDouble(\"volume\");\n\n         Jt.text(\"Volume from slider return value: \" + volumeFromUse).use();\n         Jt.text(\"Value from components state map: \" + volumeFromState).use();\n     }\n }\n</code></pre></p>",
      "name": "componentsState",
      "description": "<p>Return the components state of the session. A session corresponds to an opened tab of the app.\n <p>\n The current value of any component can be obtained from this map.\n When putting a component in the app, us the <code>.key()</code> method to define a specific key that will be easy\n to access from this map.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.datastructure.TypedMap",
          "description": "The current io.javelit.datastructure.TypedMap value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.switchPage": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class&lt;?&gt;",
              "default": null,
              "name": "pageApp",
              "description": "<p>The target page. If <code>null</code>, target the home page.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.switchPage(Class&lt;?&gt; pageApp)"
        }
      ],
      "examples": "<p>Conditional page switching with checkboxes\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class SwitchPageApp {\n     public static class WelcomePage {\n         public static void main(String[] args) {\n             Jt.title(\"Welcome Page\").use();\n             Jt.text(\"Please complete the requirements below to proceed:\").use();\n\n             boolean agreedToTerms = Jt.checkbox(\"I agree with Bob\").use();\n             boolean confirmedAge = Jt.checkbox(\"I agree with Alice\").use();\n\n             if (agreedToTerms &amp;&amp; confirmedAge) {\n                 Jt.text(\"All requirements met! Redirecting to dashboard...\").use();\n                 Jt.switchPage(DashboardPage.class);\n             } else {\n                 Jt.text(\"Please check both boxes to continue.\").use();\n             }\n         }\n     }\n\n     public static class DashboardPage {\n         public static void main(String[] args) {\n             Jt.title(\"Dashboard\").use();\n             Jt.text(\"Welcome to your dashboard!\").use();\n             Jt.text(\"You have successfully completed the requirements.\").use();\n         }\n     }\n\n     public static void main(String[] args) {\n         Jt.navigation(Jt.page(WelcomePage.class).title(\"Welcome\").icon(\"👋\").home(),\n                       Jt.page(DashboardPage.class).title(\"Dashboard\").icon(\"📊\"))\n           .hidden()\n           .use();\n     }\n }\n</code></pre></p>",
      "name": "switchPage",
      "description": "<p>Programmatically switch the current page in a multipage app.\n <p>\n When <code>Jt.switchPage</code> is called, the current page execution stops and the specified page runs as if the\n user clicked on it in the sidebar navigation. The specified page must be recognized by Javelit&#39;s multipage\n architecture (your main app class or an app class in the available pages).\n <p></p>",
      "returns": [],
      "source": ""
    },
    "Jt.button": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "<p>The button appearance type. Can be <code>&quot;primary&quot;</code>, <code>&quot;secondary&quot;</code> (default), or <code>&quot;tertiary&quot;</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed when the button is hovered over.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the button if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "<p>Makes the button fill the width of its container if set to true.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onClick",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onClick(function.Consumer&lt;Boolean&gt; onClick)",
          "name": "onClick",
          "description": "<p>An optional callback invoked when this button is clicked.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this button is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.button(String label)"
        }
      ],
      "examples": "<p>Basic button usage and interaction\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ButtonApp {\n     public static void main(String[] args) {\n         if (Jt.button(\"Say hello\").use()) {\n             Jt.text(\"Why hello there\").use();\n         } else {\n             Jt.text(\"Goodbye\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "button",
      "description": "<p>Display a button widget.\n <p></p>",
      "returns": [
        {
          "type_name": "boolean",
          "description": "The current boolean value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.dateInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(java.time.LocalDate value)",
          "name": "value",
          "description": "<p>The value of this widget when it first renders. Can be a specific date or <code>null</code> for no initial value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "minValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "minValue(java.time.LocalDate minValue)",
          "name": "minValue",
          "description": "<p>The minimum selectable date. If <code>null</code>, defaults to ten years before the initial value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "maxValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxValue(java.time.LocalDate maxValue)",
          "name": "maxValue",
          "description": "<p>The maximum selectable date. If <code>null</code>, defaults to ten years after the initial value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;java.time.LocalDate&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;java.time.LocalDate&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the date input&#39;s value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "<p>Controls how dates are displayed in the interface. Supported formats: <code>YYYY/MM/DD</code>, <code>DD/MM/YYYY</code>, <code>MM/DD/YYYY</code>.\n You may also use a period (<code>.</code>) or hyphen (<code>-</code>) as separators.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the date input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>Controls the widget&#39;s width. Can be <code>&quot;stretch&quot;</code> to match parent container or a pixel value as string.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this date input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.dateInput(String label)"
        }
      ],
      "examples": "<p>Simple date input\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.time.LocalDate;\n import java.time.Period;\n\n public class DateInputApp {\n     public static void main(String[] args) {\n         LocalDate birthday = Jt.dateInput(\"Your birthday\").use();\n\n         if (birthday != null) {\n             int age = Period.between(birthday, LocalDate.now()).getYears();\n             Jt.text(\"You are \" + age + \" years old\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "dateInput",
      "description": "<p>Display a date input widget that can be configured to accept a single date or a date range.\n <p></p>",
      "returns": [
        {
          "type_name": "LocalDate",
          "description": "The current LocalDate value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.title": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "anchor",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "anchor(String anchor)",
          "name": "anchor",
          "description": "<p>The anchor name of the header that can be accessed with #anchor in the URL.\n If omitted, it generates an anchor using the body. If False, the anchor is not shown in the UI.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The text to display. Markdown is supported, see <code>#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.title(String body)"
        }
      ],
      "examples": "<p>Basic title and title with markdown formatting and styling\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TitleApp {\n     public static void main(String[] args) {\n         // Basic title\n         Jt.title(\"This is a title\").use();\n\n         // Title with Markdown and styling\n         Jt.title(\"_Javelit_ is **cool** :sunglasses:\").use();\n     }\n }\n</code></pre></p>",
      "name": "title",
      "description": "<p>Display text in title formatting.\n Each document should have a single <code>Jt.title()</code>, although this is not enforced.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.page": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class&lt;?&gt;",
              "default": null,
              "name": "pageApp",
              "description": "<p>The class containing the main method for this page</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.page(Class&lt;?&gt; pageApp)"
        }
      ],
      "examples": "<p>Basic page creation with custom title and icon\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class NavigationApp {\n     public static class FirstPage {\n         public static void main(String[] args) {\n             Jt.title(\"First Page\").use();\n         }\n     }\n\n     public static class SecondPage {\n         public static void main(String[] args) {\n             Jt.title(\"Second Page\").use();\n         }\n     }\n\n     public static void main(String[] args) {\n         var page = Jt\n                 .navigation(Jt.page(FirstPage.class).title(\"First page\").icon(\"🔥\"),\n                             Jt.page(SecondPage.class).title(\"Second page\").icon(\":favorite:\"))\n                 .use();\n     }\n }\n</code></pre></p>",
      "name": "page",
      "description": "<p>Create a page for <code>Jt.navigation</code> in a multipage app.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.core.JtPage.Builder",
          "description": "The current io.javelit.core.JtPage.Builder value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.error": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "body(String body)",
          "name": "body",
          "description": "<p>The error message content to display. Markdown is supported, see <code>io.javelit.core.Jt#markdown(String)</code> for more details.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The error text to display. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.error(String body)"
        }
      ],
      "examples": "<p>Simple error message\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ErrorApp {\n     public static void main(String[] args) {\n         String username = Jt.textInput(\"Username\").use();\n\n         if (username.isEmpty()) {\n             Jt.error(\"Username is required!\").use();\n         } else if (username.length() &lt; 3) {\n             Jt.error(\"Username must be at least 3 characters long.\").use();\n         }\n     }\n }\n</code></pre>\n <p>\n Error with markdown formatting\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class FormattedErrorApp {\n     public static void main(String[] args) {\n         Jt.error(\"**Connection Failed**: Unable to connect to the database. Please check your settings.\").use();\n     }\n }\n</code></pre></p>",
      "name": "error",
      "description": "<p>Display error message.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.echarts": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int height)",
          "name": "height",
          "description": "<p>The height of the chart in pixels.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(Integer width)",
          "name": "width",
          "description": "<p>The width of the chart in pixels. If <code>null</code>, the chart will use its default width.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Theme",
              "default": null,
              "name": "theme",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "theme(io.javelit.components.chart.EchartsComponent.Theme theme)",
          "name": "theme",
          "description": "<p>The chart theme using a predefined theme from the Theme enum.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "theme",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "theme(String theme)",
          "name": "theme",
          "description": "<p>The chart theme using a custom theme name. Custom themes can be loaded through custom headers.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "mapName",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "java.net.URI",
              "default": null,
              "name": "geoJson",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "withMap(String mapName, java.net.URI geoJson)",
          "name": "withMap",
          "description": "<p>A GEO map to register.\n You can register multiple maps by calling this method multiple times.\n The geoJson URI should point to valid geoJson file. If you want Javelit to host the file, see <a href=\"/get-started/fundamentals/additional-features#static-file-serving\" target=\"_blank\">static file serving</a>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "mapName",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "java.net.URI",
              "default": null,
              "name": "geoJson",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "Map&lt;String, io.javelit.components.chart.EchartsComponent.SpecialAreaConfig&gt;",
              "default": null,
              "name": "specialAreas",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "withMap(String mapName, java.net.URI geoJson, Map&lt;String, io.javelit.components.chart.EchartsComponent.SpecialAreaConfig&gt; specialAreas)",
          "name": "withMap",
          "description": "<p>A GEO map to register.\n You can register multiple maps by calling this method multiple times.\n The geoJson URI should point to valid geoJson file. If you want Javelit to host the file, see [static file serving](/get-started/fundamentals/additional-features#static-file-serving).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the container. <code>False</code> by default.\n For more control on the border style, set a border using the echarts chart configuration.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "org.icepear.echarts.Chart&lt;?, ?&gt;",
              "default": null,
              "name": "chart",
              "description": "<p>The ECharts <code>Chart</code> object to display</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(org.icepear.echarts.Chart&lt;?, ?&gt; chart)"
        },
        {
          "args": [
            {
              "type_name": "org.icepear.echarts.Option",
              "default": null,
              "name": "chartOption",
              "description": "<p>The ECharts <code>Option</code> object to display</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(org.icepear.echarts.Option chartOption)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "chartOptionJson",
              "description": "<p>The ECharts option as a JSON string</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(String chartOptionJson)"
        }
      ],
      "examples": "<p>Plot from a <code>Chart</code> (<code>Bar</code> extends <code>Chart</code>).\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import org.icepear.echarts.Bar;\n\n public class BarChartApp {\n     public static void main(String[] args) {\n         Bar bar = new Bar()\n                 .setLegend()\n                 .setTooltip(\"item\")\n                 .addXAxis(new String[] { \"Matcha Latte\", \"Milk Tea\", \"Cheese Cocoa\", \"Walnut Brownie\" })\n                 .addYAxis()\n                 .addSeries(\"2015\", new Number[] { 43.3, 83.1, 86.4, 72.4 })\n                 .addSeries(\"2016\", new Number[] { 85.8, 73.4, 65.2, 53.9 })\n                 .addSeries(\"2017\", new Number[] { 93.7, 55.1, 82.5, 39.1 });\n\n         Jt.echarts(bar).use();\n     }\n }\n</code></pre></p>\n\n<p>Plot from an <code>Option</code>.\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import org.icepear.echarts.Option;\n import org.icepear.echarts.charts.bar.BarSeries;\n import org.icepear.echarts.components.coord.cartesian.CategoryAxis;\n import org.icepear.echarts.components.coord.cartesian.ValueAxis;\n import org.icepear.echarts.origin.util.SeriesOption;\n\n public class OptionChartApp {\n     public static void main(String[] args) {\n         CategoryAxis xAxis = new CategoryAxis()\n                 .setType(\"category\")\n                 .setData(new String[] { \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\" });\n\n         ValueAxis yAxis = new ValueAxis().setType(\"value\");\n\n         BarSeries series = new BarSeries()\n                 .setData(new Number[] { 120, 200, 150, 80, 70, 110, 130 })\n                 .setType(\"bar\");\n\n         Option option = new Option()\n                 .setXAxis(xAxis)\n                 .setYAxis(yAxis)\n                 .setSeries(new SeriesOption[] { series });\n\n         Jt.echarts(option).use();\n     }\n }\n</code></pre></p>\n\n<p>Plot from a JSON <code>String</code>\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import org.icepear.echarts.Option;\n import org.icepear.echarts.charts.bar.BarSeries;\n import org.icepear.echarts.components.coord.cartesian.CategoryAxis;\n import org.icepear.echarts.components.coord.cartesian.ValueAxis;\n import org.icepear.echarts.origin.util.SeriesOption;\n\n public class OptionChartApp {\n     public static void main(String[] args) {\n         String echartsOptionJson = \"\"\"\n                 {\n                   \"xAxis\": {\n                     \"type\": \"category\",\n                     \"data\": [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n                   },\n                   \"yAxis\": {\n                     \"type\": \"value\"\n                   },\n                   \"series\": [\n                     {\n                       \"data\": [150, 230, 224, 218, 135, 147, 260],\n                       \"type\": \"line\"\n                     }\n                   ]\n                 }\n                 \"\"\";\n\n         Jt.echarts(echartsOptionJson).use();\n     }\n }\n</code></pre></p>",
      "name": "echarts",
      "description": "<p>Display a chart using ECharts library.\n See <a href=\"https://echarts.icepear.org/\" target=\"_blank\">echarts-java documentation</a> for more info.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.divider": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.divider()"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>A unique key to avoid collisions when calling this method multiple times.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.divider(String key)"
        }
      ],
      "examples": "<p>Basic section separator\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class DividerApp {\n     public static void main(String[] args) {\n         Jt.title(\"Section 1\").use();\n         Jt.text(\"Content for section 1\").use();\n\n         Jt.divider().use();\n\n         Jt.title(\"Section 2\").use();\n         Jt.text(\"Content for section 2\").use();\n     }\n }\n</code></pre></p>\n\n<p>Basic section separator\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class DividerApp {\n     public static void main(String[] args) {\n         Jt.title(\"Section 1\").use();\n         Jt.text(\"Content for section 1\").use();\n\n         Jt.divider().use();\n\n         Jt.title(\"Section 2\").use();\n         Jt.text(\"Content for section 2\").use();\n     }\n }\n</code></pre></p>",
      "name": "divider",
      "description": "<p>Display a horizontal rule.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.slider": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "min",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "min(double min)",
          "name": "min",
          "description": "<p>The minimum permitted value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "max",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "max(double max)",
          "name": "max",
          "description": "<p>The maximum permitted value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(double value)",
          "name": "value",
          "description": "<p>The initial slider value. Defaults to the <code>min</code> value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "step",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "step(double step)",
          "name": "step",
          "description": "<p>The stepping interval. Default is 1.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "<p>A printf-style format string controlling how the interface should display numbers. This does not impact the return value.\n <p>\n For information about formatting integers and floats, see <a href=\"https://github.com/alexei/sprintf.js?tab=readme-ov-file#format-specification\" target=\"_blank\">sprintf.js</a>.\n For example, <code>format=&quot;%0.1f&quot;</code> adjusts the displayed decimal precision to only show one digit after the decimal.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the slider if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Double&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;Double&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function invoked when the slider value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this slider is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.slider(String label)"
        }
      ],
      "examples": "<p>Basic integer slider usage\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class SliderApp {\n     public static void main(String[] args) {\n         int age = Jt.slider(\"How old are you?\")\n             .min(0)\n             .max(130)\n             .value(25)\n             .use();\n\n         Jt.text(\"I'm \" + age + \" years old\").use();\n     }\n }\n</code></pre></p>",
      "name": "slider",
      "description": "<p>Display a slider widget.\n <p></p>",
      "returns": [
        {
          "type_name": "double",
          "description": "The current double value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.rerun": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "toHome",
              "description": "<p>If <code>true</code>, rerun in <code>/</code> url path. If <code>false</code>, rerun in current path.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.rerun(boolean toHome)"
        },
        {
          "args": [],
          "signature": "Jt.rerun()"
        }
      ],
      "examples": "<p>Updating session state and triggering rerun\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class RerunApp {\n     public static void main(String[] args) {\n          Jt.sessionState().computeIfAbsent(\"value\", \"Title\");\n\n         // Display current value\n         Jt.title(Jt.sessionState().getString(\"value\")).use();\n\n         if (Jt.button(\"Foo\").use()) {\n             Jt.sessionState().put(\"value\", \"Foo\");\n             Jt.rerun(false);\n         }\n     }\n }\n</code></pre></p>",
      "name": "rerun",
      "description": "<p>Rerun the script immediately.\n <p>\n When <code>Jt.rerun()</code> is called, Javelit halts the current app run and executes no further statements. Javelit immediately\n queues the script to rerun. In a multipage app: by default, the rerun is for the same url path (same page). If the rerun could make\n the current page unavailable, pass <code>toHome = true</code> to send back to the home url and avoid 404 errors.\n <p></p>",
      "returns": [],
      "source": ""
    },
    "Jt.radio": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "index",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "index(Integer index)",
          "name": "index",
          "description": "<p>The index of the preselected option on first render. If <code>null</code>, initializes empty and returns <code>null</code> until user selection.\n Defaults to 0 (the first option).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Function&lt;T, String&gt;",
              "default": null,
              "name": "formatFunction",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "formatFunction(function.Function&lt;T, String&gt; formatFunction)",
          "name": "formatFunction",
          "description": "<p>Function to modify the display of the radio options. The <code>Function</code> receives the raw option object\n and returns a String that will be used as display label.\n Does not impact the return value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the widget label. If <code>null</code>, no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;T&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;T&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the radio button&#39;s value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the radio buttons if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "horizontal",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "horizontal(boolean horizontal)",
          "name": "horizontal",
          "description": "<p>Orients the radio group horizontally instead of vertically when set to true.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List&lt;String&gt;",
              "default": null,
              "name": "captions",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "captions(List&lt;String&gt; captions)",
          "name": "captions",
          "description": "<p>A list of captions to show below each radio button. If <code>null</code> (default), no captions are shown.\n Must match the size of the options list.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the radio group in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this radio selection is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            },
            {
              "type_name": "List&lt;T&gt;",
              "default": null,
              "name": "options",
              "description": "<p>The list of options to choose from</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.radio(String label, List&lt;T&gt; options)"
        }
      ],
      "examples": "<p>Simple radio selection\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class RadioApp {\n     public static void main(String[] args) {\n         String size = Jt.radio(\"Select size\",\n             List.of(\"Small\", \"Medium\", \"Large\")).use();\n\n         if (size != null) {\n             Jt.text(\"Selected size: \" + size).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Radio with custom objects\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ProductRadioApp {\n     public static void main(String[] args) {\n         record Product(String name, double price) {}\n\n         Product selected = Jt\n                 .radio(\"Choose product\",\n                        List.of(new Product(\"Basic Plan\", 9.99),\n                                new Product(\"Pro Plan\", 19.99),\n                                new Product(\"Enterprise Plan\", 49.99)))\n                 .formatFunction(e -&gt; e.name + \" ($\" + e.price + \")\")\n                 .use();\n\n         if (selected != null) {\n             Jt.text(\"You chose: \" + selected.name()).use();\n             Jt.text(\"Price: $\" + selected.price()).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "radio",
      "description": "<p>Display a radio button widget.\n <p></p>",
      "returns": [
        {
          "type_name": "Nullable T",
          "description": "The current Nullable T value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.selectbox": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "index",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "index(Integer index)",
          "name": "index",
          "description": "<p>The index of the preselected option on first render. If <code>null</code>, initializes empty and returns <code>null</code> until user selection.\n Defaults to 0 (the first option).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Function&lt;T, String&gt;",
              "default": null,
              "name": "formatFunction",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "formatFunction(function.Function&lt;T, String&gt; formatFunction)",
          "name": "formatFunction",
          "description": "<p>Function to modify the display of the options. The <code>Function</code> receives the raw option object and returns a String that will be used as display label.\n Does not impact the return value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the widget label. If <code>null</code>, no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;T&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;T&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the selectbox value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the selectbox if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the selectbox in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>Text displayed when no option is selected. Default varies based on widget configuration.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "acceptNewOptions",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "acceptNewOptions(boolean acceptNewOptions)",
          "name": "acceptNewOptions",
          "description": "<p>Whether the user can add a selection that isn&#39;t included in options.\n If this is <code>false</code> (default), the user can only select from the items in options.\n If this is <code>true</code>, the user can enter a new item that doesn&#39;t exist in options.\n <p>\n When a user enters a new item, it is returned by the widget as a string.\n The new item is not added to the widget&#39;s drop-down menu. Javelit will use a case-insensitive match\n from options before adding a new item.\n <p>\n Only compatible with selectbox of <code>String</code> values.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this selection is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            },
            {
              "type_name": "List&lt;T&gt;",
              "default": null,
              "name": "options",
              "description": "<p>The list of options to choose from</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.selectbox(String label, List&lt;T&gt; options)"
        }
      ],
      "examples": "<p>Simple dropdown selection\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class SelectBoxApp {\n     public static void main(String[] args) {\n         String country = Jt.selectbox(\"Select your country\",\n                                       List.of(\"United States\", \"Canada\", \"United Kingdom\", \"Germany\", \"France\")).use();\n\n         if (country != null) {\n             Jt.text(\"Selected country: \" + country).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Dropdown with default value\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ProcessingSelectBoxApp {\n     public static void main(String[] args) {\n         String priority = Jt.selectbox(\"Task priority\",\n                                        List.of(\"Low\", \"Medium\", \"High\", \"Critical\"))\n                             .index(1)\n                             .use();\n         Jt.text(\"Priority: \" + priority).use();\n     }\n }\n</code></pre></p>",
      "name": "selectbox",
      "description": "<p>Display a select widget.\n <p></p>",
      "returns": [
        {
          "type_name": "Nullable T",
          "description": "The current Nullable T value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.table": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "List&lt;E&gt;",
              "default": null,
              "name": "rows",
              "description": "<p>The list of objects representing table rows</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(List&lt;E&gt; rows)"
        },
        {
          "args": [
            {
              "type_name": "Object",
              "default": null,
              "name": "dataframe",
              "description": "<p>A tablesaw Table instance. tablesaw is an optional dependency, so this method is not typed.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(Object dataframe)"
        },
        {
          "args": [
            {
              "type_name": "E[]",
              "default": null,
              "name": "rows",
              "description": "<p>The array of objects representing table rows</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(E[] rows)"
        },
        {
          "args": [
            {
              "type_name": "Map&lt;String, E[]&gt;",
              "default": null,
              "name": "cols",
              "description": "<p>A map where keys are column names and values are arrays of column data</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.tableFromArrayColumns(Map&lt;String, E[]&gt; cols)"
        },
        {
          "args": [
            {
              "type_name": "Map&lt;String, List&lt;Object&gt;&gt;",
              "default": null,
              "name": "cols",
              "description": "<p>A map where keys are column names and values are collections of column data</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.tableFromListColumns(Map&lt;String, List&lt;Object&gt;&gt; cols)"
        }
      ],
      "examples": "<p>Basic table with data objects\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class TableApp {\n     public static void main(String[] args) {\n         record Person(String name, int age, String city) {\n         }\n\n         List&lt;Object&gt; data = List.of(new Person(\"Alice\", 25, \"New York\"),\n                                     new Person(\"Bob\", 30, \"San Francisco\"),\n                                     new Person(\"Charlie\", 35, \"Chicago\"));\n\n         Jt.table(data).use();\n     }\n }\n</code></pre></p>\n\n<p>Basic table with array of objects\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TableArrayApp {\n     public static void main(String[] args) {\n         record Product(String name, double price, boolean inStock) {}\n\n         Product[] products = {\n             new Product(\"Laptop\", 999.99, true),\n             new Product(\"Mouse\", 25.50, false),\n             new Product(\"Keyboard\", 75.00, true)\n         };\n\n         Jt.table(products).use();\n     }\n }\n</code></pre></p>\n\n<p>Table from column arrays\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.Map;\n\n public class TableColumnsArrayApp {\n     public static void main(String[] args) {\n         Map&lt;String, Object[]&gt; salesData = Map.of(\n                 \"Month\", new String[]{\"Jan\", \"Feb\", \"Mar\", \"Apr\"},\n                 \"Sales\", new Integer[]{1200, 1350, 1100, 1450},\n                 \"Target\", new Integer[]{1000, 1300, 1200, 1400},\n                 \"Achieved\", new Boolean[]{true, true, false, true}\n         );\n\n         Jt.tableFromArrayColumns(salesData).use();\n     }\n }\n</code></pre></p>\n\n<p>Table from column lists\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n import java.util.Map;\n\n public class TableColumnsListApp {\n     public static void main(String[] args) {\n         Map&lt;String, List&lt;Object&gt;&gt; employeeData = Map.of(\n                 \"Name\", List.of(\"Alice\", \"Bob\", \"Charlie\", \"Diana\"),\n                 \"Department\", List.of(\"Engineering\", \"Sales\", \"Marketing\", \"Engineering\"),\n                 \"Salary\", List.of(95000, 75000, 68000, 102000),\n                 \"Remote\", List.of(true, false, true, true)\n         );\n\n         Jt.tableFromListColumns(employeeData).use();\n     }\n }\n</code></pre></p>",
      "name": "table",
      "description": "<p>Display a static table.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.toggle": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(boolean value)",
          "name": "value",
          "description": "<p>Preselect the toggle when first rendered.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;Boolean&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function invoked when the toggle value changes.\n The value passed in the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the toggle if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this toggle is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.toggle(String label)"
        }
      ],
      "examples": "<p>Simple toggle\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ToggleApp {\n     public static void main(String[] args) {\n         boolean enabled = Jt.toggle(\"Enable notifications\").use();\n\n         Jt.text(\"Notifications: \" + (enabled ? \"Enabled\" : \"Disabled\")).use();\n     }\n }\n</code></pre>\n <p>\n Toggle with default value\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ToggleDefaultApp {\n     public static void main(String[] args) {\n         boolean autoSave = Jt.toggle(\"Auto-save\")\n             .value(true)\n             .use();\n\n         if (autoSave) {\n             Jt.text(\"Changes will be saved automatically\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "toggle",
      "description": "<p>Display a toggle widget.\n <p></p>",
      "returns": [
        {
          "type_name": "NotNull Boolean",
          "description": "The current NotNull Boolean value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.cache": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.cache()"
        }
      ],
      "examples": "<p>Caching expensive computations\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class CacheApp {\n      public static void main(String[] args) {\n          String cacheKey = \"long_running_operation\";\n          Long result = Jt.cache().getLong(cacheKey);\n\n          if (result == null) {\n              Jt.text(\"Performing a long running operation. This will take a few seconds\").use();\n              result = long_running_operation();\n              Jt.cache().put(cacheKey, result);\n          }\n\n          Jt.text(\"Result of long operation: \" + result).use();\n          Jt.text(\"Refresh or Open the page in another tab: the long running operation result will be cached\").use();\n      }\n\n      private static long long_running_operation(){\n          try {\n              Thread.sleep(5000);\n          } catch (InterruptedException ignored) {\n          }\n          return 42;\n      }\n  }\n</code></pre>\n <p>\n Sharing data across users\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class SharedDataApp {\n     public static void main(String[] args) {\n         // initialization\n         Jt.cache().putIfAbsent(\"counter\", 0);\n         // increment visits\n         int totalVisits = Jt.cache().computeInt(\"counter\", (k, v) -&gt; v + 1);\n\n         Jt.text(\"Total app visits: \" + totalVisits).use();\n     }\n }\n</code></pre>\n <p>\n Deleting values in the cache:\n <pre>\n <code>\n // remove all values\n Jt.cache().clear();\n // remove a single key\n Jt.cache().remove(&quot;my_key&quot;);\n </code>\n </pre>\n <code>TypedMap</code> simply extends the java <code>Map</code> type with quality-of-life\n casting methods like <code>getInt</code>, <code>getDouble</code>, <code>getString</code>, etc...</p>",
      "name": "cache",
      "description": "<p>Return the app cache. The app cache is shared across all sessions.\n Put values in this map that are meant to be shared across all users.\n For instance: database long-lived connections, ML models loaded weights, etc...\n <p>\n See <a href=\"https://docs.javelit.io/get-started/fundamentals/advanced-concepts#caching\">documentation</a>.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.datastructure.TypedMap",
          "description": "The current io.javelit.datastructure.TypedMap value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.sessionState": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.sessionState()"
        }
      ],
      "examples": "<p>Basic counter with session state\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class CounterApp {\n     public static void main(String[] args) {\n         // initialize a counter\n         Jt.sessionState().putIfAbsent(\"counter\", 0);\n\n         if (Jt.button(\"Increment\").use()) {\n             Jt.sessionState().computeInt(\"counter\", (k, v) -&gt; v + 1);\n         }\n\n         Jt.text(\"Counter: \" + Jt.sessionState().get(\"counter\")).use();\n     }\n }\n</code></pre></p>",
      "name": "sessionState",
      "description": "<p>Return the session state Map of the session. A session corresponds to an opened tab of the app.\n <p>\n The session state is maintained across re-runs.\n Values can be stored and persisted in this map.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.datastructure.TypedMap",
          "description": "The current io.javelit.datastructure.TypedMap value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.urlQueryParameters": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.urlQueryParameters()"
        }
      ],
      "examples": "<p>Using query parameters for app configuration\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class QueryParamsApp {\n     public static void main(String[] args) {\n         var params = Jt.urlQueryParameters();\n\n         String name = params.getOrDefault(\"name\", List.of(\"unknown user\")).get(0);\n\n         Jt.title(\"App Settings\").use();\n         Jt.text(\"Hello \" + name).use();\n         // URL: ?name=Alice would show:\n         // Hello Alice\n     }\n }\n</code></pre></p>",
      "name": "urlQueryParameters",
      "description": "<p>Return the current URL query parameters as a map.\n <p>\n For instance: <code>?key1=foo&amp;key2=bar&amp;key2=fizz</code> in the URL will return\n <code>{&quot;key1&quot;: [&quot;foo&quot;], &quot;key2&quot;: [&quot;bar&quot;, &quot;fizz&quot;]}</code>\n <p></p>",
      "returns": [
        {
          "type_name": "Map&lt;String, List&lt;String&gt;&gt;",
          "description": "The current Map&lt;String, List&lt;String&gt;&gt; value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.urlPath": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.urlPath()"
        }
      ],
      "examples": "<p>Conditional content based on current path\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class PathApp {\n     public static void main(String[] args) {\n         Jt.navigation(Jt.page(HomePage.class), Jt.page(DetailsPage.class)).use();\n\n         Jt.text(\"The current path is: \" + Jt.urlPath()).use();\n     }\n\n     public static class HomePage {\n         public static void main(String[] args) {\n             Jt.title(\"Home Page\").use();\n         }\n     }\n\n     public static class DetailsPage {\n         public static void main(String[] args) {\n             Jt.title(\"Details Page\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "urlPath",
      "description": "<p>Return the current url path.\n <p>\n May be used for multipage apps.\n In a single page app, will always return <code>&quot;/&quot;</code>.\n <p></p>",
      "returns": [
        {
          "type_name": "String",
          "description": "The current String value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.tabs": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.TabsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.TabsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "List&lt;String&gt;",
              "default": null,
              "name": "tabs",
              "description": "<p>A list of tab labels</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.tabs(List&lt;String&gt; tabs)"
        }
      ],
      "examples": "<p>Basic tabbed interface\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class TabsApp {\n     public static void main(String[] args) {\n         var tabs = Jt.tabs(List.of(\"Overview\", \"Details\", \"Settings\")).use();\n\n         Jt.text(\"Welcome to the overview page\").use(tabs.tab(\"Overview\"));\n         Jt.text(\"Here are the details\").use(tabs.tab(\"Details\"));\n         Jt.text(\"Configure your settings here\").use(tabs.tab(\"Settings\"));\n     }\n }\n</code></pre>\n <p>\n Data analysis tabs\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class DataTabsApp {\n     public static void main(String[] args) {\n         var tabs = Jt.tabs(List.of(\"Sales\", \"Marketing\", \"Finance\")).use();\n\n         // Sales tab\n         Jt.title(\"Sales Dashboard\").use(tabs.tab(0));\n         Jt.text(\"Total sales: $100,000\").use(tabs.tab(0));\n\n         // Marketing tab\n         Jt.title(\"Marketing Metrics\").use(tabs.tab(1));\n         Jt.text(\"Conversion rate: 3.5%\").use(tabs.tab(1));\n\n         // Finance tab\n         Jt.title(\"Financial Overview\").use(tabs.tab(2));\n         Jt.text(\"Revenue growth: +15%\").use(tabs.tab(2));\n     }\n }\n</code></pre></p>",
      "name": "tabs",
      "description": "<p>Insert containers separated into tabs.\n <p>\n Inserts a number of multi-element containers as tabs.\n Tabs are a navigational element that allows users to easily move between groups of related content.\n <p>\n To add elements to the returned tabs container:\n <pre>\n <code>\n var tabs = Jt.tabs(&quot;my-tabs&quot;, List.of(&quot;E-commerce&quot;, &quot;Industry&quot;, &quot;Finance&quot;)).use();\n // get tab by name\n Jt.yourElement().use(tabs.tab(&quot;E-commerce&quot;));\n // get tab by index\n Jt.yourElement().use(tabs.tab(2));\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "Tabs",
          "description": "The current Tabs value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.form": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "clearOnSubmit",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "clearOnSubmit(boolean clearOnSubmit)",
          "name": "clearOnSubmit",
          "description": "<p>If True, all widgets inside the form will be reset to their default values after the user presses the Submit button.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "enterToSubmit",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "enterToSubmit(boolean enterToSubmit)",
          "name": "enterToSubmit",
          "description": "<p>If True (default), pressing Enter while in a form widget is like clicking the first form submit button. If False, the user must click the submit button to submit the form.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the form. Default is <code>true</code>. It is recommended to only remove the border if there is another border or the form is small.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "<p>The height of the form container. Can be <code>&quot;content&quot;</code> (default - matches height of content), <code>&quot;stretch&quot;</code> (matches content or parent container height), or a specific pixel value (sets a fixed height, enabling scrolling if content exceeds it).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.form()"
        }
      ],
      "examples": "<p>User registration form\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class FormApp {\n     public static void main(String[] args) {\n         var form = Jt.form().use();\n\n         String name = Jt.textInput(\"Full Name\").use(form);\n         String email = Jt.textInput(\"Email\").use(form);\n         int age = Jt.numberInput(\"Age\", Integer.class).min(0).max(120).use(form);\n         boolean subscribe = Jt.checkbox(\"Subscribe to newsletter\").use(form);\n\n         if (Jt.formSubmitButton(\"Register\").use()) {\n             Jt.text(\"Welcome, \" + name + \"!\").use();\n             Jt.text(\"Email: \" + email).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Survey form\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class SurveyFormApp {\n     public static void main(String[] args) {\n         var form = Jt.form().use();\n         double satisfaction = Jt.slider(\"Satisfaction (1-10)\").min(1).max(10).value(5).use(form);\n         String feedback = Jt.textArea(\"Additional feedback\").use(form);\n         String department = Jt.selectbox(\"Department\",\n                                          List.of(\"Engineering\", \"Marketing\", \"Sales\", \"Support\")).use(form);\n\n         if (Jt.formSubmitButton(\"Submit Survey\").use(form)) {\n             Jt.text(\"Thank you for your feedback!\").use();\n             Jt.text(\"Satisfaction: \" + satisfaction + \"/10\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "form",
      "description": "<p>Create a form that batches elements together with a &#39;Submit&#39; button.\n <p>\n A form is a container that visually groups other elements and widgets together, and contains a Submit button.\n When the form&#39;s Submit button is pressed, all widget values inside the form will be sent to Javelit in a batch.\n <p>\n To add elements to the form:\n <pre>\n <code>\n var form = Jt.form(&quot;my-form-1&quot;).use();\n Jt.yourElement().use(form);\n ...\n Jt.formSubmitButton(&quot;submit form&quot;).use();\n </code>\n </pre>\n <p>\n Forms have a few constraints:\n <ul>\n     <li>Every form must contain a <code>Jt.formSubmitButton)</code></li>\n     <li><code>Jt.button</code> and <code>Jt.downloadButton</code> cannot be added to a form</li>\n     <li>Forms can appear anywhere in your app (sidebar, columns, etc), but they cannot be embedded inside other forms</li>\n     <li>Within a form, the only widget that can have a callback function is <code>Jt.formSubmitButton)</code></li>\n </ul>\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    }
  },
  "0.54.0": {
    "Jt.textInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(String value)",
          "name": "value",
          "description": "<p>The text value of this widget when it first renders. Defaults to empty string.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "maxChars",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxChars(Integer maxChars)",
          "name": "maxChars",
          "description": "<p>The maximum number of characters allowed in the text input.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "<p>Can be <code>&quot;default&quot;</code> or <code>&quot;password&quot;</code>. Determines if input masks the user&#39;s typed value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "autocomplete",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "autocomplete(String autocomplete)",
          "name": "autocomplete",
          "description": "<p>An optional value that will be passed to the <input> element&#39;s autocomplete property. If unspecified, this value will be set to <code>&quot;new-password&quot;</code> for <code>&quot;password&quot;</code> inputs, and the empty string for <code>&quot;default&quot;</code> inputs.\n For more details, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete</a>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>An optional string displayed when the text input is empty.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the text input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>Controls the widget width. Can be <code>&quot;stretch&quot;</code> (default) or a pixel value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;String&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;String&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the text input&#39;s value changes.\n The value passed in the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.textInput(String label)"
        }
      ],
      "examples": "<p>Simple text input\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TextInputApp {\n     public static void main(String[] args) {\n         String name = Jt.textInput(\"Your name\").use();\n\n         if (!name.isEmpty()) {\n             Jt.text(\"Hello, \" + name + \"!\").use();\n         }\n     }\n }\n</code></pre>\n <p>\n Text input with validation\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ValidatedTextInputApp {\n     public static void main(String[] args) {\n         String email = Jt.textInput(\"Email address\")\n                          .placeholder(\"Enter your email\")\n                          .use();\n\n         if (!email.isEmpty() &amp;&amp; !email.contains(\"@\")) {\n             Jt.error(\"Please enter a valid email address\").use();\n         } else if (!email.isEmpty()) {\n             Jt.text(\"Valid email: \" + email).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "textInput",
      "description": "<p>Display a single-line text input widget.\n <p></p>",
      "returns": [
        {
          "type_name": "string",
          "description": "The current string value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.code": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "language",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "language(String language)",
          "name": "language",
          "description": "<p>The language that the code is written in, for syntax highlighting. This defaults to <code>java</code>.\n If this is <code>null</code>, the code will be plain, monospace text.\n <p>\n For a list of available language values, see list on <a href=\"https://prismjs.com/#supported-languages\">prismjs documentation</a>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "lineNumbers",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "lineNumbers(boolean lineNumbers)",
          "name": "lineNumbers",
          "description": "<p>An optional boolean indicating whether to show line numbers to the left of the code block. This defaults to <code>false</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "wrapLines",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "wrapLines(boolean wrapLines)",
          "name": "wrapLines",
          "description": "<p>An optional boolean indicating whether to wrap lines. This defaults to <code>false</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "<p>The height of the code block element. This can be one of the following:\n <p>\n <ul>\n  <li><code>content</code> (default): The height of the element matches the height of its content.</li>\n  <li><code>stretch</code>: The height of the element matches the height of its content or the height of the parent container, whichever is larger. If the element is not in a parent container, the height of the element matches the height of its content.</li>\n  <li>An integer specifying the height in pixels: The element has a fixed height. If the content is larger than the specified height, scrolling is enabled.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "heightPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int heightPixels)",
          "name": "height",
          "description": "<p>The height of the element in pixels. The element will have a fixed height. If the content is larger than the specified height, scrolling is enabled.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.CodeComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The string to display as code or monospace text.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.code(String body)"
        }
      ],
      "examples": "<p>Simple code block\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class CodeApp {\n     public static void main(String[] args) {\n         Jt.code(\"public class HelloWorld {}\").use();\n     }\n }\n</code></pre>\n <p>\n Multi-line code with syntax highlighting\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class MultilineCodeApp {\n     public static void main(String[] args) {\n         String pythonCode = \"\"\"\n                 import numpy as np\n\n                 a = np.arange(15).reshape(3, 5)\n                 \"\"\";\n         Jt.code(pythonCode).language(\"python\").use();\n     }\n }\n</code></pre></p>",
      "name": "code",
      "description": "<p>Display a code block with optional syntax highlighting.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.pageLink": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "label(String label)",
          "name": "label",
          "description": "<p>The text to display for the link. Markdown is supported, see <code>io.javelit.core.Jt#markdown(String)</code> for more details.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the link if set to true.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the link element. Use <code>&quot;content&quot;</code> to fit content, <code>&quot;stretch&quot;</code> to fill container, or a pixel value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.multipage.PageLinkComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "pagePath",
              "description": "<p>The path of the page to link to in a multipage app. If null, target the home page.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.pageLink(String pagePath)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "url",
              "description": "<p>The URL to link to</p>",
              "is_optional": false
            },
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The text to display for the link. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.pageLink(String url, String label)"
        }
      ],
      "examples": "<p>A multipage app with the sidebar hidden.\n A footer replaces the sidebar. The footer contains links to all pages of the app and an external link.\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class PageLinkApp {\n\n     public static void firstPage() {\n         Jt.title(\"First Page\").use();\n         Jt.text(\"first page content\").use();\n     }\n\n     public static void secondPage() {\n         Jt.title(\"Second Page\").use();\n         Jt.text(\"Second page content\").use();\n     }\n\n     public static void main(String[] args) {\n         var page = Jt\n                 .navigation(Jt.page(\"/page1\", () -&gt; firstPage()).title(\"First page\").icon(\"🔥\"),\n                             Jt.page(\"/page2\", () -&gt; secondPage()).title(\"Second page\").icon(\":favorite:\"))\n                 .hidden()\n                 .use();\n\n         Jt.divider(\"divider\").use();\n         Jt.pageLink(\"/page1\").use();\n         Jt.pageLink(\"/page2\").use();\n         Jt.pageLink(\"https://github.com/javelit/javelit\", \"Github project\").icon(\":link:\").use();\n     }\n }\n</code></pre></p>",
      "name": "pageLink",
      "description": "<p>Display a link to another page in a multipage app or to an external page.\n <p>\n If another page in a multipage app is specified, clicking the <code>Jt.pageLink</code> element stops the current page execution\n and runs the specified page as if the user clicked on it in the sidebar navigation.\n <p>\n If an external page is specified, clicking the <code>Jt.pageLink</code> element opens a new tab to the specified page.\n The current script run will continue if not complete.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.textArea": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(String value)",
          "name": "value",
          "description": "<p>The initial text value when the widget renders. Defaults to empty string.\n If <code>null</code>, will initialize empty and return <code>null</code> until the user provides input.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "<p>The text area widget height. This can be &quot;content&quot;, &quot;stretch&quot;, or a pixel value. Minimum height is 2 lines.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "heightInPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int heightInPixels)",
          "name": "height",
          "description": "<p>The text area widget height in pixels. Minimum height is 2 lines.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "maxChars",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxChars(Integer maxChars)",
          "name": "maxChars",
          "description": "<p>The maximum number of characters allowed in the text area.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>The text displayed when the text area is empty.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the text area input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The widget width. Can be <code>&quot;stretch&quot;</code> (default) or a pixel value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;String&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;String&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function that will be called when the text area value changes.\n The value passed in the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.TextAreaComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.textArea(String label)"
        }
      ],
      "examples": "<p>Simple text area\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TextAreaApp {\n     public static void main(String[] args) {\n         String feedback = Jt.textArea(\"Your feedback\").use();\n\n         if (!feedback.isEmpty()) {\n             Jt.text(\"Thank you for your feedback!\").use();\n             Jt.text(\"Character count: \" + feedback.length()).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Text area for code input\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class CodeTextAreaApp {\n     public static void main(String[] args) {\n         String code = Jt.textArea(\"Enter your Java code\")\n                         .height(200)\n                         .placeholder(\"public class MyClass {\\n    // Your code here\\n}\")\n                         .use();\n\n         if (!code.isEmpty()) {\n             Jt.text(\"Code preview:\").use();\n             Jt.code(code).language(\"java\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "textArea",
      "description": "<p>Display a multi-line text input widget.\n <p></p>",
      "returns": [
        {
          "type_name": "string",
          "description": "The current string value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.text": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "body(String body)",
          "name": "body",
          "description": "<p>The string to display.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TextComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The string to display.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.text(String body)"
        }
      ],
      "examples": "<p><pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TextApp {\n     public static void main(String[] args) {\n         Jt.text(\"This is some plain text.\").use();\n\n         Jt.text(\"\"\"\n                         This is preformatted text.\n                         It preserves    spacing\n                         and line breaks.\n                         \"\"\").use();\n     }\n }\n</code></pre></p>",
      "name": "text",
      "description": "<p>Write text without Markdown or HTML parsing.\n For monospace text, use <code>Jt#code</code></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.checkbox": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(boolean value)",
          "name": "value",
          "description": "<p>Preselect the checkbox when first rendered.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;Boolean&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function invoked when the checkbox value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the checkbox if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.CheckboxComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this checkbox is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.checkbox(String label)"
        }
      ],
      "examples": "<p>Basic checkbox usage\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class CheckboxApp {\n     public static void main(String[] args) {\n         boolean agree = Jt.checkbox(\"I agree\").use();\n\n         if (agree) {\n             Jt.text(\"Great!\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "checkbox",
      "description": "<p>Display a checkbox widget.\n <p></p>",
      "returns": [
        {
          "type_name": "NotNull Boolean",
          "description": "The current NotNull Boolean value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.expander": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "expanded",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "expanded(boolean expanded)",
          "name": "expanded",
          "description": "<p>The initial state of the expander. When set to <code>true</code>, the expander starts in the expanded state. When <code>false</code> (default), the expander starts collapsed.\n Note that all content within the expander is computed and sent to the frontend regardless of the initial state.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ExpanderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The label for the expander header</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.expander(String label)"
        }
      ],
      "examples": "<p>Basic expander with explanation content\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ExpanderApp {\n     public static void main(String[] args) {\n         var expander = Jt.expander(\"See explanation\").use();\n\n         Jt.text(\"\"\"\n                 [A great explanation on the why and how of life.]\n                 \"\"\").use(expander);\n     }\n }\n</code></pre></p>",
      "name": "expander",
      "description": "<p>Insert a multi-element container that can be expanded/collapsed.\n <p>\n Insert a container into your app that can be used to hold multiple elements and can be expanded or collapsed by the user.\n When collapsed, all that is visible is the provided label.\n <p>\n To add elements to the returned expander:\n <pre>\n <code>\n var expander = Jt.expander(&quot;my-expander&quot;, &quot;More details&quot;).use();\n Jt.yourElement().use(expander);\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.formSubmitButton": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "<p>The button type that determines its appearance and emphasis level. Can be <code>&quot;primary&quot;</code>, <code>&quot;secondary&quot;</code> (default), or <code>&quot;tertiary&quot;</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the button if set to True. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "<p>Controls the button width. If True, the button width matches the parent container width. If False (default), the button width matches its content width. This parameter is deprecated - use width() instead.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onClick",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onClick(function.Consumer&lt;Boolean&gt; onClick)",
          "name": "onClick",
          "description": "<p>An optional callable function that is invoked when the button is clicked.\n The callback receives the previous button click state as a parameter. In this case, the previous click state is always <code>false</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormSubmitButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The text to display on the submit button</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.formSubmitButton(String label)"
        }
      ],
      "examples": "<p>Basic form submit button\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class FormSubmitApp {\n     public static void main(String[] args) {\n         var form = Jt.form(\"contact\").use();\n\n         String name = Jt.textInput(\"Your Name\").use(form);\n         String message = Jt.textArea(\"Message\").use(form);\n\n         if (Jt.formSubmitButton(\"Send Message\").use(form)) {\n             Jt.text(\"Message sent successfully!\").use();\n             Jt.text(\"From: \" + name).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Multiple submit buttons in same form\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class MultiSubmitApp {\n     public static void main(String[] args) {\n         var form = Jt.form(\"document\").use();\n\n         String title = Jt.textInput(\"Document Title\").use(form);\n         String content = Jt.textArea(\"Content\").use(form);\n\n         if (Jt.formSubmitButton(\"Save Draft\").key(\"save\").use(form)) {\n             Jt.text(\"Draft saved: \" + title).use();\n         }\n\n         if (Jt.formSubmitButton(\"Publish\").key(\"publish\").use(form)) {\n             Jt.text(\"Document published: \" + title).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "formSubmitButton",
      "description": "<p>Display a form submit button.\n <p>\n When clicked, all widget values inside the form will be sent from the user&#39;s browser to the Javelit server in a batch.\n <p>\n Every form must have at least one <code>Jt.formSubmitButton</code>. A <code>Jt.formSubmitButton</code> cannot exist outside a form.\n <p></p>",
      "returns": [
        {
          "type_name": "boolean",
          "description": "The current boolean value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.container": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(Integer height)",
          "name": "height",
          "description": "<p>The height of the container in pixels. When a fixed height is specified, the container will enable scrolling if content exceeds the specified height. It is recommended to use scrolling containers sparingly and avoid heights that exceed 500 pixels for optimal mobile experience.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(Boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the container. If not specified (<code>null</code>), the border is automatically shown when the container has a fixed height, and hidden when height adapts to content.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.container()"
        }
      ],
      "examples": "<p>Basic container usage and adding elements out of order\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ContainerApp {\n     public static void main(String[] args) {\n         var container = Jt.container().use();\n\n         Jt.text(\"This is inside the container\").use(container);\n         Jt.text(\"This is outside the container\").use();\n         Jt.text(\"This is inside too\").use(container);\n     }\n }\n</code></pre></p>",
      "name": "container",
      "description": "<p>Insert a multi-element container.\n <p>\n Insert an invisible container into your app that can be used to hold multiple elements.\n This allows you to, for example, insert multiple elements into your app out of order.\n <p>\n To add elements to the returned container:\n <pre>\n <code>\n var container = Jt.container(&quot;container-1&quot;).use();\n Jt.yourElement().use(container);\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.popover": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the popover button if set to True. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "<p>Controls the button width. If True, the button width matches the parent container width. If False (default), the button width matches its content width. This parameter is deprecated - use width() instead.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.PopoverComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>The label for the popover button. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.popover(String label)"
        }
      ],
      "examples": "<p>Settings popover\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class PopoverApp {\n     public static void main(String[] args) {\n         var settings = Jt.popover(\"⚙️ Settings\").use();\n\n         Jt.text(\"Configure your preferences:\").use(settings);\n         boolean notifications = Jt.checkbox(\"Enable notifications\").use(settings);\n         String theme = Jt.selectbox(\"Theme\", List.of(\"Light\", \"Dark\")).use(settings);\n\n         if (notifications) {\n             Jt.text(\"Notifications are enabled\").use();\n         }\n         Jt.text(\"The selected theme is \" + theme).use();\n     }\n }\n</code></pre>\n <p>\n Help popover with information\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class HelpPopoverApp {\n     public static void main(String[] args) {\n         Jt.text(\"Username:\").use();\n         Jt.textInput(\"Enter username\").use();\n\n         var help = Jt.popover(\"❓ Help\").use();\n         Jt.text(\"**Username requirements:**\").use(help);\n         Jt.text(\"- Must be 3-20 characters long\").use(help);\n         Jt.text(\"- Only letters and numbers allowed\").use(help);\n         Jt.text(\"- Case sensitive\").use(help);\n     }\n }\n</code></pre></p>",
      "name": "popover",
      "description": "<p>Insert a popover container.\n <p>\n Inserts a multi-element container as a popover. It consists of a button-like element and a container that opens when the button is clicked.\n <p>\n Opening and closing the popover will not trigger a rerun. Interacting with widgets inside of an open popover will\n rerun the app while keeping the popover open. Clicking outside of the popover will close it.\n <p>\n To add elements to the returned popover:\n <pre><code class=\"language-java\"> var popover = Jt.popover(\"my-popover\", \"Advanced configuration\").use();\n Jt.yourElement().use(popover);\n</code></pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.numberInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(T value)",
          "name": "value",
          "description": "<p>The value of this widget when it first renders.\n If <code>null</code>, initializes with no value and returns null until an input is provided to the component.\n The default behavior is to return the minimum value. If the minimum value is not set, the widget initializes\n with a value of <code>0</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "minValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "minValue(T minValue)",
          "name": "minValue",
          "description": "<p>The minimum permitted value. For <code>Integer</code> and <code>Long</code>, defaults to the corresponding minimum\n possible value.\n For <code>Float</code> and <code>Double</code>, no minimum by default.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "maxValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxValue(T maxValue)",
          "name": "maxValue",
          "description": "<p>The maximum permitted value. For <code>Integer</code> and <code>Long</code>, defaults to the corresponding maximum\n possible value.\n For <code>Float</code> and <code>Double</code>, no maximum by default.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "step",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "step(T step)",
          "name": "step",
          "description": "<p>The stepping interval. Defaults to 1 for <code>Integer</code> and <code>Long</code>, 0.01 for floating points.\n Must be strictly positive.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "<p>A printf-style format string controlling how numbers are displayed in the interface.\n The output must be purely numeric. This does not impact the return value of the widget.\n For more information about the formatting specification, see <a href=\"https://github.com/alexei/sprintf.js?tab=readme-ov-file#format-specification\" target=\"_blank\">sprintf.js</a>.\n <p>\n For example, <code>format=&quot;%0.1f&quot;</code> adjusts the displayed decimal precision to only show one digit after the decimal.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the widget label. If <code>null</code>, no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>An optional text displayed when the number input is empty, providing guidance to the user.\n If None, no placeholder is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the number input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the number input in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;T&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;T&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the number input&#39;s value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.NumberInputComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this numeric input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.numberInput(String label)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this numeric input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            },
            {
              "type_name": "Class&lt;T&gt;",
              "default": null,
              "name": "valueClass",
              "description": "<p>The number type class (Integer, Double, Float, etc.)</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.numberInput(String label, Class&lt;T&gt; valueClass)"
        }
      ],
      "examples": "<p>Simple number input\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class NumberInputApp {\n     public static void main(String[] args) {\n         Number quantity = Jt.numberInput(\"Quantity\").minValue(1).maxValue(100).use();\n\n         if (quantity != null) {\n             Jt.text(\"You selected: \" + quantity).use();\n         }\n     }\n }\n</code></pre></p>\n\n<p>Integer input with specific type\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TypedNumberInputApp {\n     public static void main(String[] args) {\n         Integer age = Jt.numberInput(\"Age\", Integer.class)\n                         .minValue(0)\n                         .maxValue(150)\n                         .use();\n\n         if (age != null) {\n             String category = age &lt; 18 ? \"Minor\" : age &lt; 65 ? \"Adult\" : \"Senior\";\n             Jt.text(\"Category: \" + category).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "numberInput",
      "description": "<p>Display a numeric input widget.\n <p></p>",
      "returns": [
        {
          "type_name": "T",
          "description": "The current T value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.fileUploader": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List&lt;String&gt;",
              "default": null,
              "name": "types",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(List&lt;String&gt; types)",
          "name": "type",
          "description": "<p>The allowed file extensions or MIME types. If <code>null</code>, all file types are allowed. Use file extensions like <code>&quot;.pdf&quot;</code> or MIME types like <code>&quot;image/png&quot;</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.MultipleFiles",
              "default": null,
              "name": "acceptMultipleFiles",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "acceptMultipleFiles(io.javelit.components.media.FileUploaderComponent.MultipleFiles acceptMultipleFiles)",
          "name": "acceptMultipleFiles",
          "description": "<p>Whether to accept more than one file in a submission. This can be one of the following values:\n <ul>\n     <li><code>MultipleFiles.FALSE</code> (default): The user can only submit one file at a time.</li>\n     <li><code>MultipleFiles.TRUE</code>: The user can upload multiple files at the same time.</li>\n     <li><code>MultipleFiles.DIRECTORY</code>: The user can select a directory to upload all files in the directory and its subdirectories. If <code>type</code> is set, only files matching those type(s) will be uploaded.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the file uploader if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;List&lt;io.javelit.core.JtUploadedFile&gt;&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;List&lt;JtUploadedFile&gt;&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the file uploader&#39;s value changes.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the text element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.media.FileUploaderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this file uploader is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.fileUploader(String label)"
        }
      ],
      "examples": "<p>Basic file upload with processing\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n import io.javelit.core.JtUploadedFile;\n\n import java.util.List;\n\n public class FileUploadApp {\n     public static void main(String[] args) {\n         var uploadedFiles = Jt.fileUploader(\"Choose a CSV file\")\n                               .type(List.of(\".csv\"))\n                               .use();\n\n         if (!uploadedFiles.isEmpty()) {\n             JtUploadedFile file = uploadedFiles.getFirst();\n             Jt.text(\"Uploaded file: \" + file.filename()).use();\n             Jt.text(\"File size: \" + file.content().length + \" bytes\").use();\n             Jt.text(\"Content type: \" + file.contentType()).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "fileUploader",
      "description": "<p>Display a file uploader widget.\n <p></p>",
      "returns": [
        {
          "type_name": "JtUploadedFile>",
          "description": "The current JtUploadedFile> value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.markdown": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The text to display as Markdown.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.markdown(String body)"
        }
      ],
      "examples": "<p>Basic markdown formatting and colored text styling\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class MarkdownApp {\n     public static void main(String[] args) {\n         // Basic text formatting\n         Jt.markdown(\"*Javelit* is **really** ***cool***.\").use();\n\n         // Divider\n         Jt.markdown(\"---\").use();\n\n         // Emoji and line breaks\n         Jt.markdown(\"Here's a bouquet — :tulip::cherry_blossom::rose::hibiscus::sunflower::blossom:\").use();\n     }\n }\n</code></pre></p>",
      "name": "markdown",
      "description": "<p>Display string formatted as Markdown.\n <p>\n Supported :\n <ul>\n     <li>Emoji shortcodes, such as <code>:+1:</code> and <code>:sunglasses:</code>. For a list of all supported codes, see <a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\">https://www.webfx.com/tools/emoji-cheat-sheet/</a>.</li>\n     <li>Tables</li>\n     <li>Strikethrough</li>\n     <li>Autolink: turns plain links such as URLs and email addresses into links</li>\n </ul>\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.setComponentState": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>The key of the component (as set via <code>.key()</code>)</p>",
              "is_optional": false
            },
            {
              "type_name": "Object",
              "default": null,
              "name": "value",
              "description": "<p>The new value to set</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.setComponentState(String key, Object value)"
        }
      ],
      "examples": "<p>Programmatically update a text input value\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class UpdateStateApp {\n     public static void main(String[] args) {\n         String name = Jt.textInput(\"Name\").key(\"name\").use();\n         Jt.button(\"Clear name\")\n           .onClick(b -&gt; Jt.setComponentState(\"name\", \"\"))\n           .use();\n         Jt.text(\"Hello \" + name).use();\n     }\n }\n</code></pre>\n <p></p>",
      "name": "setComponentState",
      "description": "<p>Update a component&#39;s value by its user-defined key.\n <p>\n This method allows programmatic updating of component state. Limits:\n <ul>\n     <li>You cannot modify the value of a component that has not been rendered with a <code>.key()</code> in the session yet.</li>\n     <li>You cannot modify the value of a component that has already been rendered in the current app run.</li>\n </ul>\n Learn more in the <a href=\"https://docs.javelit.io/develop/concepts/design/buttons#buttons-to-modify-or-reset-other-widgets\">modify widget examples</&gt;.\n <p>\n This method validates that the provided value is of the correct type and respects constraints if any (for instance, value range).\n <p></p>",
      "returns": [],
      "source": ""
    },
    "Jt.html": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.HtmlComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.HtmlComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The HTML code to insert.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.html(String body)"
        },
        {
          "args": [
            {
              "type_name": "java.nio.file.Path",
              "default": null,
              "name": "filePath",
              "description": "<p>The path of the file containing the HTML code to insert.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.html(java.nio.file.Path filePath)"
        }
      ],
      "examples": "<p>Simple HTML content\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class HtmlApp {\n     public static void main(String[] args) {\n         Jt.html(\"&lt;h3&gt;Custom HTML Header&lt;/h3&gt;\").use();\n         Jt.html(\"&lt;p style='color: blue;'&gt;This is blue text&lt;/p&gt;\").use();\n         Jt.html(\"&lt;ul&gt;&lt;li&gt;Item 1&lt;/li&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;li&gt;Item 3&lt;/li&gt;&lt;/ul&gt;\").use();\n     }\n }\n</code></pre></p>\n\n<p>Loading HTML from file\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.nio.file.Path;\n\n public class HtmlFileApp {\n     public static void main(String[] args) {\n         // Assumes you have a file \"content.html\" in your project\n         Jt.html(Path.of(\"content.html\")).use();\n     }\n }\n</code></pre></p>",
      "name": "html",
      "description": "<p>Insert HTML into your app.\n <p>\n Adding custom HTML to your app impacts safety, styling, and maintainability.\n We sanitize HTML with <a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a>, but inserting HTML remains a developer risk.\n Passing untrusted code to Jt.html or dynamically loading external code can increase the risk of vulnerabilities in your app.\n <p>\n <code>Jt.html</code> content is not iframed. Executing JavaScript is not supported.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.columns": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "numColumns",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "numColumns(int numColumns)",
          "name": "numColumns",
          "description": "<p>The number of columns to create. Must be between 2 and 12 inclusive. Each column will have equal width\n unless custom widths are specified.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List&lt;Double&gt;",
              "default": null,
              "name": "widths",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "widths(List&lt;Double&gt; widths)",
          "name": "widths",
          "description": "<p>A list of relative column widths. The list size must match the number of columns. For example, [0.7, 0.3]\n creates two columns with 70% and 30% width respectively. If not specified, all columns have equal width.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Gap",
              "default": null,
              "name": "gap",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "gap(io.javelit.components.layout.ColumnsComponent.Gap gap)",
          "name": "gap",
          "description": "<p>Controls the space between columns. Options are <code>SMALL</code> (<code>1rem</code> gap, default), <code>MEDIUM</code> (<code>2rem</code> gap),\n <code>LARGE</code> (<code>4rem</code> gap), or <code>NONE</code> (no gap between columns).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.VerticalAlignment",
              "default": null,
              "name": "verticalAlignment",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "verticalAlignment(io.javelit.components.layout.ColumnsComponent.VerticalAlignment verticalAlignment)",
          "name": "verticalAlignment",
          "description": "<p>The vertical alignment of the content inside the columns. Options are <code>TOP</code> (default), <code>CENTER</code>, or <code>BOTTOM</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the column containers.\n If this is <code>false</code> (default), no border is shown. If this is <code>true</code>,\n a border is shown around each column.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ColumnsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "numColumns",
              "description": "<p>The number of columns to create</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.columns(int numColumns)"
        }
      ],
      "examples": "<p>Basic three-column layout with headers and content\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ColumnsApp {\n     public static void main(String[] args) {\n         var cols = Jt.columns(3).use();\n\n         Jt.title(\"A cat\").use(cols.col(0));\n         Jt.title(\"A dog\").use(cols.col(1));\n         Jt.title(\"An owl\").use(cols.col(2));\n     }\n }\n</code></pre></p>",
      "name": "columns",
      "description": "<p>Insert containers laid out as side-by-side columns.\n <p>\n Inserts a number of multi-element containers laid out side-by-side and returns a list of container objects.\n <p>\n To add elements to the returned columns container:\n <pre>\n <code>\n var cols = Jt.columns(&quot;my-3-cols&quot;, 3).use();\n Jt.yourElement().use(cols.col(1));\n Jt.yourElement().use(cols.col(0));\n Jt.yourElement().use(cols.col(2));\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "Columns",
          "description": "The current Columns value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.deepCopy": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "T",
              "default": null,
              "name": "original",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "com.fasterxml.jackson.core.type.TypeReference&lt;T&gt;",
              "default": null,
              "name": "typeRef",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "Jt.deepCopy(T original, com.fasterxml.jackson.core.type.TypeReference&lt;T&gt; typeRef)"
        }
      ],
      "examples": "<p>Safe copying from cache to prevent mutations\n <pre><code class=\"language-java\"> import java.util.ArrayList;\n import java.util.List;\n\n import io.javelit.core.Jt;\n\n import com.fasterxml.jackson.core.type.TypeReference;\n\n public class DeepCopyApp {\n     public static void main(String[] args) {\n         // init\n         List&lt;String&gt; sharedList = (List&lt;String&gt;) Jt.cache().get(\"shared_list\");\n         if (sharedList == null) {\n             sharedList = new ArrayList&lt;&gt;();\n             sharedList.add(\"item1\");\n             sharedList.add(\"item2\");\n             Jt.cache().put(\"shared_list\", sharedList);\n         }\n\n         // Create a safe copy to avoid mutations affecting other sessions\n         List&lt;String&gt; safeCopy = Jt.deepCopy(sharedList, new TypeReference&lt;&gt;() {\n         });\n\n         if (Jt.button(\"remove elements from user lists\").use()) {\n             safeCopy.clear();\n         }\n\n         Jt.text(\"Original list size: \" + sharedList.size()).use();\n         Jt.text(\"Safe copy size: \" + safeCopy.size()).use();\n     }\n }\n</code></pre></p>",
      "name": "deepCopy",
      "description": "<p>Return a deep copy of the provided object.\n <p>\n Utility that may be useful in combination with the cache, to implement a copy on read behavior.\n For instance, you can get a value that is expensive to\n instantiate from the cache, but perform a deep copy to prevent mutations and side effects across sessions.\n <p></p>",
      "returns": [
        {
          "type_name": "T",
          "description": "The current T value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.empty": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(Integer height)",
          "name": "height",
          "description": "<p>The height of the container in pixels. When a fixed height is specified, the container will enable scrolling if content exceeds the specified height. It is recommended to use scrolling containers sparingly and avoid heights that exceed 500 pixels for optimal mobile experience.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(Boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the container. If not specified (<code>null</code>), the border is automatically shown when the container has a fixed height, and hidden when height adapts to content.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.ContainerComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.empty()"
        }
      ],
      "examples": "<p>Dynamic content replacement\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class EmptyApp {\n     public static void main(String[] args) {\n         var placeholder = Jt.empty().use();\n         String selected = Jt.selectbox(\"Choose content\",\n             List.of(\"None\", \"Text\", \"Button\")).use();\n\n         switch (selected) {\n             case \"Text\" -&gt; Jt.text(\"Dynamic text content\").use(placeholder);\n             case \"Button\" -&gt; {\n                 if (Jt.button(\"Dynamic button\").use(placeholder)) {\n                     Jt.text(\"Button clicked!\").use();\n                 }\n             }\n             // case \"None\" -&gt; container remains empty\n         }\n     }\n }\n</code></pre>\n <p>\n Simple animations\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;import io.javelit.core.Jt;\n\n public class AnimationEmptyApp {\n     public static void main(String[] args) {\n         var emptyContainer = Jt.empty().use();\n          for (i = 10; i&gt;=1; i--) {\n               Jt.text(i + \"!\").use(emptyContainer);\n                Thread.sleep(1000);\n           }\n           Jt.text(\"Happy new Year !\").use(emptyContainer);\n           Jt.button(\"rerun\").use();\n     }\n }\n</code></pre></p>",
      "name": "empty",
      "description": "<p>Insert a single-element container.\n <p>\n Insert a container into your app that can be used to hold a single element.\n This allows you to, for example, remove elements at any point, or replace several elements at once (using a child multi-element container).\n <p>\n To insert/replace/clear an element on the returned container:\n <pre>\n <code>\n var container = Jt.empty(&quot;empty-1&quot;).use();\n Jt.yourElement().use(container);\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.navigation": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "io.javelit.core.JtPage.Builder[]",
              "default": null,
              "name": "pages",
              "description": "<p>The pages to include in the navigation</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.navigation(JtPage.Builder[] pages)"
        }
      ],
      "examples": "<p>Basic multipage navigation setup\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class NavigationApp {\n     public static void firstPage() {\n         Jt.title(\"First Page\").use();\n     }\n\n     public static void secondPage() {\n         Jt.title(\"Second Page\").use();\n     }\n\n     public static void main(String[] args) {\n         var page = Jt\n                 .navigation(Jt.page(\"/page1\", () -&gt; firstPage()).title(\"First page\").icon(\"🔥\"),\n                             Jt.page(\"/page2\", () -&gt; secondPage()).title(\"Second page\").icon(\":favorite:\"))\n                 .use();\n     }\n }\n</code></pre></p>",
      "name": "navigation",
      "description": "<p>Create a navigation component with multiple pages to create a multipage app.\n <p>\n Call <code>Jt.navigation</code> in your entrypoint app class to define the available pages in your app.\n <code>Jt.navigation</code> use() returns the current page.\n <p>\n When using <code>Jt.navigation</code>, your entrypoint app class acts like a frame of common elements around each of your pages.\n <p>\n The set of available pages can be updated with each rerun for dynamic navigation.\n By default, <code>Jt.navigation</code> displays the available pages in the sidebar if there is more than one page.\n This behavior can be changed using the <code>position</code> builder method.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.core.NavigationComponent.Builder",
          "description": "The current io.javelit.core.NavigationComponent.Builder value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.componentsState": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.componentsState()"
        }
      ],
      "examples": "<p>Accessing component values by key\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ComponentsStateApp {\n     public static void main(String[] args) {\n         double volumeFromUse = Jt.slider(\"Volume\").key(\"volume\").min(0).max(100).value(50).use();\n         double volumeFromState = Jt.componentsState().getDouble(\"volume\");\n\n         Jt.text(\"Volume from slider return value: \" + volumeFromUse).use();\n         Jt.text(\"Value from components state map: \" + volumeFromState).use();\n     }\n }\n</code></pre></p>",
      "name": "componentsState",
      "description": "<p>Return the components state of the session. A session corresponds to an opened tab of the app.\n <p>\n The current value of any component can be obtained from this map.\n When putting a component in the app, us the <code>.key()</code> method to define a specific key that will be easy\n to access from this map.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.datastructure.TypedMap",
          "description": "The current io.javelit.datastructure.TypedMap value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.switchPage": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "path",
              "description": "<p>The target page path. If <code>null</code>, target the home page.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.switchPage(String path)"
        }
      ],
      "examples": "<p>Conditional page switching with checkboxes\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class SwitchPageApp {\n     public static void welcome() {\n         Jt.title(\"Welcome Page\").use();\n         Jt.text(\"Please complete the requirements below to proceed:\").use();\n\n         boolean agreedToTerms = Jt.checkbox(\"I agree with Bob\").use();\n         boolean confirmedAge = Jt.checkbox(\"I agree with Alice\").use();\n\n         if (agreedToTerms &amp;&amp; confirmedAge) {\n             Jt.text(\"All requirements met! Redirecting to dashboard...\").use();\n             Jt.switchPage(\"/dashboard\");\n         } else {\n             Jt.text(\"Please check both boxes to continue.\").use();\n         }\n     }\n\n     public static void dashboard() {\n         Jt.title(\"Dashboard\").use();\n         Jt.text(\"Welcome to your dashboard!\").use();\n         Jt.text(\"You have successfully completed the requirements.\").use();\n     }\n\n     public static void main(String[] args) {\n         Jt.navigation(Jt.page(\"/welcome\", () -&gt; welcome()).title(\"Welcome\").icon(\"👋\").home(),\n                       Jt.page(\"/dashboard\", () -&gt; dashboard()).title(\"Dashboard\").icon(\"📊\"))\n           .hidden()\n           .use();\n     }\n }\n</code></pre></p>",
      "name": "switchPage",
      "description": "<p>Programmatically switch the current page in a multipage app.\n <p>\n When <code>Jt.switchPage</code> is called, the current page execution stops and the specified page runs as if the\n user clicked on it in the sidebar navigation. The specified page must be recognized by Javelit&#39;s multipage\n architecture (your main app class or an app class in the available pages).\n <p></p>",
      "returns": [],
      "source": ""
    },
    "Jt.button": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "type",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "type(String type)",
          "name": "type",
          "description": "<p>The button appearance type. Can be <code>&quot;primary&quot;</code>, <code>&quot;secondary&quot;</code> (default), or <code>&quot;tertiary&quot;</code>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed when the button is hovered over.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the button if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "useContainerWidth",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "useContainerWidth(boolean useContainerWidth)",
          "name": "useContainerWidth",
          "description": "<p>Makes the button fill the width of its container if set to true.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onClick",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onClick(function.Consumer&lt;Boolean&gt; onClick)",
          "name": "onClick",
          "description": "<p>An optional callback invoked when this button is clicked.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ButtonComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this button is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.button(String label)"
        }
      ],
      "examples": "<p>Basic button usage and interaction\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ButtonApp {\n     public static void main(String[] args) {\n         if (Jt.button(\"Say hello\").use()) {\n             Jt.text(\"Why hello there\").use();\n         } else {\n             Jt.text(\"Goodbye\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "button",
      "description": "<p>Display a button widget.\n <p></p>",
      "returns": [
        {
          "type_name": "boolean",
          "description": "The current boolean value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.dateInput": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(java.time.LocalDate value)",
          "name": "value",
          "description": "<p>The value of this widget when it first renders. Can be a specific date or <code>null</code> for no initial value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "minValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "minValue(java.time.LocalDate minValue)",
          "name": "minValue",
          "description": "<p>The minimum selectable date. If <code>null</code>, defaults to ten years before the initial value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "java.time.LocalDate",
              "default": null,
              "name": "maxValue",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "maxValue(java.time.LocalDate maxValue)",
          "name": "maxValue",
          "description": "<p>The maximum selectable date. If <code>null</code>, defaults to ten years after the initial value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;java.time.LocalDate&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;java.time.LocalDate&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the date input&#39;s value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "<p>Controls how dates are displayed in the interface. Supported formats: <code>YYYY/MM/DD</code>, <code>DD/MM/YYYY</code>, <code>MM/DD/YYYY</code>.\n You may also use a period (<code>.</code>) or hyphen (<code>-</code>) as separators.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the date input if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>Controls the widget&#39;s width. Can be <code>&quot;stretch&quot;</code> to match parent container or a pixel value as string.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.DateInputComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this date input is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.dateInput(String label)"
        }
      ],
      "examples": "<p>Simple date input\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.time.LocalDate;\n import java.time.Period;\n\n public class DateInputApp {\n     public static void main(String[] args) {\n         LocalDate birthday = Jt.dateInput(\"Your birthday\").use();\n\n         if (birthday != null) {\n             int age = Period.between(birthday, LocalDate.now()).getYears();\n             Jt.text(\"You are \" + age + \" years old\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "dateInput",
      "description": "<p>Display a date input widget that can be configured to accept a single date or a date range.\n <p></p>",
      "returns": [
        {
          "type_name": "LocalDate",
          "description": "The current LocalDate value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.title": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "anchor",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "anchor(String anchor)",
          "name": "anchor",
          "description": "<p>The anchor name of the header that can be accessed with #anchor in the URL.\n If omitted, it generates an anchor using the body. If False, the anchor is not shown in the UI.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.TitleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The text to display. Markdown is supported, see <code>#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.title(String body)"
        }
      ],
      "examples": "<p>Basic title and title with markdown formatting and styling\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TitleApp {\n     public static void main(String[] args) {\n         // Basic title\n         Jt.title(\"This is a title\").use();\n\n         // Title with Markdown and styling\n         Jt.title(\"_Javelit_ is **cool** :sunglasses:\").use();\n     }\n }\n</code></pre></p>",
      "name": "title",
      "description": "<p>Display text in title formatting.\n Each document should have a single <code>Jt.title()</code>, although this is not enforced.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.page": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "Class&lt;?&gt;",
              "default": null,
              "name": "pageApp",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "Jt.page(Class&lt;?&gt; pageApp)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "path",
              "description": "<p>The url path where the page should be found</p>",
              "is_optional": false
            },
            {
              "type_name": "Runnable",
              "default": null,
              "name": "page",
              "description": "<p>The page app logic</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.page(String path, Runnable page)"
        }
      ],
      "examples": "<p>Basic page creation with custom title and icon\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class NavigationApp {\n         public static void page1() {\n             Jt.title(\"First Page\").use();\n         }\n\n         public static void page2() {\n             Jt.title(\"Second Page\").use();\n         }\n\n     public static void main(String[] args) {\n         var page = Jt\n                 .navigation(Jt.page(\"page1\", NavigationApp::page1).title(\"First page\").icon(\"🔥\"),\n                             Jt.page(\"page2\", NavigationApp::page2).title(\"Second page\").icon(\":favorite:\"))\n                 .use();\n     }\n }\n</code></pre></p>",
      "name": "page",
      "returns": [
        {
          "type_name": "io.javelit.core.JtPage.Builder",
          "description": "The current io.javelit.core.JtPage.Builder value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.error": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "body(String body)",
          "name": "body",
          "description": "<p>The error message content to display. Markdown is supported, see <code>io.javelit.core.Jt#markdown(String)</code> for more details.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "icon",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "icon(String icon)",
          "name": "icon",
          "description": "<p>An icon to display with the error message. The following values are valid:\n <ul>\n     <li>A single-character emoji. For example: <code>🔥</code>. Emoji short codes are not supported.</li>\n     <li>An icon from the Material Symbols library (rounded style) in the format <code>:icon_name:</code> where <code>icon_name</code> is the name of the icon in snake case. For example: <code>:search:</code>. See full list of icons <a href=\"https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded&selected=Material+Symbols+Rounded:search:FILL@0;wght@400;GRAD@0;opsz@24&icon.size=24&icon.color=%231f1f1f\" target=\"_blank\">here</a>.</li>\n </ul>\n If <code>null</code> (default), no icon is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.status.ErrorComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "body",
              "description": "<p>The error text to display. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.error(String body)"
        }
      ],
      "examples": "<p>Simple error message\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ErrorApp {\n     public static void main(String[] args) {\n         String username = Jt.textInput(\"Username\").use();\n\n         if (username.isEmpty()) {\n             Jt.error(\"Username is required!\").use();\n         } else if (username.length() &lt; 3) {\n             Jt.error(\"Username must be at least 3 characters long.\").use();\n         }\n     }\n }\n</code></pre>\n <p>\n Error with markdown formatting\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class FormattedErrorApp {\n     public static void main(String[] args) {\n         Jt.error(\"**Connection Failed**: Unable to connect to the database. Please check your settings.\").use();\n     }\n }\n</code></pre></p>",
      "name": "error",
      "description": "<p>Display error message.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.echarts": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(int height)",
          "name": "height",
          "description": "<p>The height of the chart in pixels.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(Integer width)",
          "name": "width",
          "description": "<p>The width of the chart in pixels. If <code>null</code>, the chart will use its default width.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Theme",
              "default": null,
              "name": "theme",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "theme(io.javelit.components.chart.EchartsComponent.Theme theme)",
          "name": "theme",
          "description": "<p>The chart theme using a predefined theme from the Theme enum.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "theme",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "theme(String theme)",
          "name": "theme",
          "description": "<p>The chart theme using a custom theme name. Custom themes can be loaded through custom headers.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "mapName",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "java.net.URI",
              "default": null,
              "name": "geoJson",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "withMap(String mapName, java.net.URI geoJson)",
          "name": "withMap",
          "description": "<p>A GEO map to register.\n You can register multiple maps by calling this method multiple times.\n The geoJson URI should point to valid geoJson file. If you want Javelit to host the file, see <a href=\"/get-started/fundamentals/additional-features#static-file-serving\" target=\"_blank\">static file serving</a>.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "mapName",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "java.net.URI",
              "default": null,
              "name": "geoJson",
              "description": "",
              "is_optional": false
            },
            {
              "type_name": "Map&lt;String, io.javelit.components.chart.EchartsComponent.SpecialAreaConfig&gt;",
              "default": null,
              "name": "specialAreas",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "withMap(String mapName, java.net.URI geoJson, Map&lt;String, io.javelit.components.chart.EchartsComponent.SpecialAreaConfig&gt; specialAreas)",
          "name": "withMap",
          "description": "<p>A GEO map to register.\n You can register multiple maps by calling this method multiple times.\n The geoJson URI should point to valid geoJson file. If you want Javelit to host the file, see [static file serving](/get-started/fundamentals/additional-features#static-file-serving).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the container. <code>False</code> by default.\n For more control on the border style, set a border using the echarts chart configuration.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.chart.EchartsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "org.icepear.echarts.Chart&lt;?, ?&gt;",
              "default": null,
              "name": "chart",
              "description": "<p>The ECharts <code>Chart</code> object to display</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(org.icepear.echarts.Chart&lt;?, ?&gt; chart)"
        },
        {
          "args": [
            {
              "type_name": "org.icepear.echarts.Option",
              "default": null,
              "name": "chartOption",
              "description": "<p>The ECharts <code>Option</code> object to display</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(org.icepear.echarts.Option chartOption)"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "chartOptionJson",
              "description": "<p>The ECharts option as a JSON string</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.echarts(String chartOptionJson)"
        }
      ],
      "examples": "<p>Plot from a <code>Chart</code> (<code>Bar</code> extends <code>Chart</code>).\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import org.icepear.echarts.Bar;\n\n public class BarChartApp {\n     public static void main(String[] args) {\n         Bar bar = new Bar()\n                 .setLegend()\n                 .setTooltip(\"item\")\n                 .addXAxis(new String[] { \"Matcha Latte\", \"Milk Tea\", \"Cheese Cocoa\", \"Walnut Brownie\" })\n                 .addYAxis()\n                 .addSeries(\"2015\", new Number[] { 43.3, 83.1, 86.4, 72.4 })\n                 .addSeries(\"2016\", new Number[] { 85.8, 73.4, 65.2, 53.9 })\n                 .addSeries(\"2017\", new Number[] { 93.7, 55.1, 82.5, 39.1 });\n\n         Jt.echarts(bar).use();\n     }\n }\n</code></pre></p>\n\n<p>Plot from an <code>Option</code>.\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import org.icepear.echarts.Option;\n import org.icepear.echarts.charts.bar.BarSeries;\n import org.icepear.echarts.components.coord.cartesian.CategoryAxis;\n import org.icepear.echarts.components.coord.cartesian.ValueAxis;\n import org.icepear.echarts.origin.util.SeriesOption;\n\n public class OptionChartApp {\n     public static void main(String[] args) {\n         CategoryAxis xAxis = new CategoryAxis()\n                 .setType(\"category\")\n                 .setData(new String[] { \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\" });\n\n         ValueAxis yAxis = new ValueAxis().setType(\"value\");\n\n         BarSeries series = new BarSeries()\n                 .setData(new Number[] { 120, 200, 150, 80, 70, 110, 130 })\n                 .setType(\"bar\");\n\n         Option option = new Option()\n                 .setXAxis(xAxis)\n                 .setYAxis(yAxis)\n                 .setSeries(new SeriesOption[] { series });\n\n         Jt.echarts(option).use();\n     }\n }\n</code></pre></p>\n\n<p>Plot from a JSON <code>String</code>\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import org.icepear.echarts.Option;\n import org.icepear.echarts.charts.bar.BarSeries;\n import org.icepear.echarts.components.coord.cartesian.CategoryAxis;\n import org.icepear.echarts.components.coord.cartesian.ValueAxis;\n import org.icepear.echarts.origin.util.SeriesOption;\n\n public class OptionChartApp {\n     public static void main(String[] args) {\n         String echartsOptionJson = \"\"\"\n                 {\n                   \"xAxis\": {\n                     \"type\": \"category\",\n                     \"data\": [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n                   },\n                   \"yAxis\": {\n                     \"type\": \"value\"\n                   },\n                   \"series\": [\n                     {\n                       \"data\": [150, 230, 224, 218, 135, 147, 260],\n                       \"type\": \"line\"\n                     }\n                   ]\n                 }\n                 \"\"\";\n\n         Jt.echarts(echartsOptionJson).use();\n     }\n }\n</code></pre></p>",
      "name": "echarts",
      "description": "<p>Display a chart using ECharts library.\n See <a href=\"https://echarts.icepear.org/\" target=\"_blank\">echarts-java documentation</a> for more info.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.divider": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.text.MarkdownComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.divider()"
        },
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "<p>A unique key to avoid collisions when calling this method multiple times.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.divider(String key)"
        }
      ],
      "examples": "<p>Basic section separator\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class DividerApp {\n     public static void main(String[] args) {\n         Jt.title(\"Section 1\").use();\n         Jt.text(\"Content for section 1\").use();\n\n         Jt.divider().use();\n\n         Jt.title(\"Section 2\").use();\n         Jt.text(\"Content for section 2\").use();\n     }\n }\n</code></pre></p>\n\n<p>Basic section separator\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class DividerApp {\n     public static void main(String[] args) {\n         Jt.title(\"Section 1\").use();\n         Jt.text(\"Content for section 1\").use();\n\n         Jt.divider().use();\n\n         Jt.title(\"Section 2\").use();\n         Jt.text(\"Content for section 2\").use();\n     }\n }\n</code></pre></p>",
      "name": "divider",
      "description": "<p>Display a horizontal rule.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.slider": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "min",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "min(double min)",
          "name": "min",
          "description": "<p>The minimum permitted value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "max",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "max(double max)",
          "name": "max",
          "description": "<p>The maximum permitted value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(double value)",
          "name": "value",
          "description": "<p>The initial slider value. Defaults to the <code>min</code> value.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "double",
              "default": null,
              "name": "step",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "step(double step)",
          "name": "step",
          "description": "<p>The stepping interval. Default is 1.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "format",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "format(String format)",
          "name": "format",
          "description": "<p>A printf-style format string controlling how the interface should display numbers. This does not impact the return value.\n <p>\n For information about formatting integers and floats, see <a href=\"https://github.com/alexei/sprintf.js?tab=readme-ov-file#format-specification\" target=\"_blank\">sprintf.js</a>.\n For example, <code>format=&quot;%0.1f&quot;</code> adjusts the displayed decimal precision to only show one digit after the decimal.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disable the slider if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Double&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;Double&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function invoked when the slider value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SliderComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this slider is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.slider(String label)"
        }
      ],
      "examples": "<p>Basic integer slider usage\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class SliderApp {\n     public static void main(String[] args) {\n         int age = Jt.slider(\"How old are you?\")\n             .min(0)\n             .max(130)\n             .value(25)\n             .use();\n\n         Jt.text(\"I'm \" + age + \" years old\").use();\n     }\n }\n</code></pre></p>",
      "name": "slider",
      "description": "<p>Display a slider widget.\n <p></p>",
      "returns": [
        {
          "type_name": "double",
          "description": "The current double value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.rerun": {
      "overloads": [
        {
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "toHome",
              "description": "<p>If <code>true</code>, rerun in <code>/</code> url path. If <code>false</code>, rerun in current path.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.rerun(boolean toHome)"
        },
        {
          "args": [],
          "signature": "Jt.rerun()"
        }
      ],
      "examples": "<p>Updating session state and triggering rerun\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class RerunApp {\n     public static void main(String[] args) {\n          Jt.sessionState().computeIfAbsent(\"value\", \"Title\");\n\n         // Display current value\n         Jt.title(Jt.sessionState().getString(\"value\")).use();\n\n         if (Jt.button(\"Foo\").use()) {\n             Jt.sessionState().put(\"value\", \"Foo\");\n             Jt.rerun(false);\n         }\n     }\n }\n</code></pre></p>",
      "name": "rerun",
      "description": "<p>Rerun the script immediately.\n <p>\n When <code>Jt.rerun()</code> is called, Javelit halts the current app run and executes no further statements. Javelit immediately\n queues the script to rerun. In a multipage app: by default, the rerun is for the same url path (same page). If the rerun could make\n the current page unavailable, pass <code>toHome = true</code> to send back to the home url and avoid 404 errors.\n <p></p>",
      "returns": [],
      "source": ""
    },
    "Jt.radio": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "index",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "index(Integer index)",
          "name": "index",
          "description": "<p>The index of the preselected option on first render. If <code>null</code>, initializes empty and returns <code>null</code> until user selection.\n Defaults to 0 (the first option).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Function&lt;T, String&gt;",
              "default": null,
              "name": "formatFunction",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "formatFunction(function.Function&lt;T, String&gt; formatFunction)",
          "name": "formatFunction",
          "description": "<p>Function to modify the display of the radio options. The <code>Function</code> receives the raw option object\n and returns a String that will be used as display label.\n Does not impact the return value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the widget label. If <code>null</code>, no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;T&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;T&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the radio button&#39;s value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the radio buttons if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "horizontal",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "horizontal(boolean horizontal)",
          "name": "horizontal",
          "description": "<p>Orients the radio group horizontally instead of vertically when set to true.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "List&lt;String&gt;",
              "default": null,
              "name": "captions",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "captions(List&lt;String&gt; captions)",
          "name": "captions",
          "description": "<p>A list of captions to show below each radio button. If <code>null</code> (default), no captions are shown.\n Must match the size of the options list.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the radio group in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.RadioComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this radio selection is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            },
            {
              "type_name": "List&lt;T&gt;",
              "default": null,
              "name": "options",
              "description": "<p>The list of options to choose from</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.radio(String label, List&lt;T&gt; options)"
        }
      ],
      "examples": "<p>Simple radio selection\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class RadioApp {\n     public static void main(String[] args) {\n         String size = Jt.radio(\"Select size\",\n             List.of(\"Small\", \"Medium\", \"Large\")).use();\n\n         if (size != null) {\n             Jt.text(\"Selected size: \" + size).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Radio with custom objects\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ProductRadioApp {\n     public static void main(String[] args) {\n         record Product(String name, double price) {}\n\n         Product selected = Jt\n                 .radio(\"Choose product\",\n                        List.of(new Product(\"Basic Plan\", 9.99),\n                                new Product(\"Pro Plan\", 19.99),\n                                new Product(\"Enterprise Plan\", 49.99)))\n                 .formatFunction(e -&gt; e.name + \" ($\" + e.price + \")\")\n                 .use();\n\n         if (selected != null) {\n             Jt.text(\"You chose: \" + selected.name()).use();\n             Jt.text(\"Price: $\" + selected.price()).use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "radio",
      "description": "<p>Display a radio button widget.\n <p></p>",
      "returns": [
        {
          "type_name": "Nullable T",
          "description": "The current Nullable T value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.selectbox": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Integer",
              "default": null,
              "name": "index",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "index(Integer index)",
          "name": "index",
          "description": "<p>The index of the preselected option on first render. If <code>null</code>, initializes empty and returns <code>null</code> until user selection.\n Defaults to 0 (the first option).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Function&lt;T, String&gt;",
              "default": null,
              "name": "formatFunction",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "formatFunction(function.Function&lt;T, String&gt; formatFunction)",
          "name": "formatFunction",
          "description": "<p>Function to modify the display of the options. The <code>Function</code> receives the raw option object and returns a String that will be used as display label.\n Does not impact the return value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the widget label. If <code>null</code>, no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;T&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;T&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback invoked when the selectbox value changes.\n The value passed to the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the selectbox if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the selectbox in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "placeholder",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "placeholder(String placeholder)",
          "name": "placeholder",
          "description": "<p>Text displayed when no option is selected. Default varies based on widget configuration.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "acceptNewOptions",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "acceptNewOptions(boolean acceptNewOptions)",
          "name": "acceptNewOptions",
          "description": "<p>Whether the user can add a selection that isn&#39;t included in options.\n If this is <code>false</code> (default), the user can only select from the items in options.\n If this is <code>true</code>, the user can enter a new item that doesn&#39;t exist in options.\n <p>\n When a user enters a new item, it is returned by the widget as a string.\n The new item is not added to the widget&#39;s drop-down menu. Javelit will use a case-insensitive match\n from options before adding a new item.\n <p>\n Only compatible with selectbox of <code>String</code> values.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.SelectBoxComponent.Builder&lt;T&gt;",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this selection is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            },
            {
              "type_name": "List&lt;T&gt;",
              "default": null,
              "name": "options",
              "description": "<p>The list of options to choose from</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.selectbox(String label, List&lt;T&gt; options)"
        }
      ],
      "examples": "<p>Simple dropdown selection\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class SelectBoxApp {\n     public static void main(String[] args) {\n         String country = Jt.selectbox(\"Select your country\",\n                                       List.of(\"United States\", \"Canada\", \"United Kingdom\", \"Germany\", \"France\")).use();\n\n         if (country != null) {\n             Jt.text(\"Selected country: \" + country).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Dropdown with default value\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ProcessingSelectBoxApp {\n     public static void main(String[] args) {\n         String priority = Jt.selectbox(\"Task priority\",\n                                        List.of(\"Low\", \"Medium\", \"High\", \"Critical\"))\n                             .index(1)\n                             .use();\n         Jt.text(\"Priority: \" + priority).use();\n     }\n }\n</code></pre></p>",
      "name": "selectbox",
      "description": "<p>Display a select widget.\n <p></p>",
      "returns": [
        {
          "type_name": "Nullable T",
          "description": "The current Nullable T value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.table": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "List&lt;E&gt;",
              "default": null,
              "name": "rows",
              "description": "<p>The list of objects representing table rows</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(List&lt;E&gt; rows)"
        },
        {
          "args": [
            {
              "type_name": "Object",
              "default": null,
              "name": "dataframe",
              "description": "<p>A tablesaw Table instance. tablesaw is an optional dependency, so this method is not typed.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(Object dataframe)"
        },
        {
          "args": [
            {
              "type_name": "E[]",
              "default": null,
              "name": "rows",
              "description": "<p>The array of objects representing table rows</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.table(E[] rows)"
        },
        {
          "args": [
            {
              "type_name": "Map&lt;String, E[]&gt;",
              "default": null,
              "name": "cols",
              "description": "<p>A map where keys are column names and values are arrays of column data</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.tableFromArrayColumns(Map&lt;String, E[]&gt; cols)"
        },
        {
          "args": [
            {
              "type_name": "Map&lt;String, List&lt;Object&gt;&gt;",
              "default": null,
              "name": "cols",
              "description": "<p>A map where keys are column names and values are collections of column data</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.tableFromListColumns(Map&lt;String, List&lt;Object&gt;&gt; cols)"
        }
      ],
      "examples": "<p>Basic table with data objects\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class TableApp {\n     public static void main(String[] args) {\n         record Person(String name, int age, String city) {\n         }\n\n         List&lt;Object&gt; data = List.of(new Person(\"Alice\", 25, \"New York\"),\n                                     new Person(\"Bob\", 30, \"San Francisco\"),\n                                     new Person(\"Charlie\", 35, \"Chicago\"));\n\n         Jt.table(data).use();\n     }\n }\n</code></pre></p>\n\n<p>Basic table with array of objects\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class TableArrayApp {\n     public static void main(String[] args) {\n         record Product(String name, double price, boolean inStock) {}\n\n         Product[] products = {\n             new Product(\"Laptop\", 999.99, true),\n             new Product(\"Mouse\", 25.50, false),\n             new Product(\"Keyboard\", 75.00, true)\n         };\n\n         Jt.table(products).use();\n     }\n }\n</code></pre></p>\n\n<p>Table from column arrays\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.Map;\n\n public class TableColumnsArrayApp {\n     public static void main(String[] args) {\n         Map&lt;String, Object[]&gt; salesData = Map.of(\n                 \"Month\", new String[]{\"Jan\", \"Feb\", \"Mar\", \"Apr\"},\n                 \"Sales\", new Integer[]{1200, 1350, 1100, 1450},\n                 \"Target\", new Integer[]{1000, 1300, 1200, 1400},\n                 \"Achieved\", new Boolean[]{true, true, false, true}\n         );\n\n         Jt.tableFromArrayColumns(salesData).use();\n     }\n }\n</code></pre></p>\n\n<p>Table from column lists\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n import java.util.Map;\n\n public class TableColumnsListApp {\n     public static void main(String[] args) {\n         Map&lt;String, List&lt;Object&gt;&gt; employeeData = Map.of(\n                 \"Name\", List.of(\"Alice\", \"Bob\", \"Charlie\", \"Diana\"),\n                 \"Department\", List.of(\"Engineering\", \"Sales\", \"Marketing\", \"Engineering\"),\n                 \"Salary\", List.of(95000, 75000, 68000, 102000),\n                 \"Remote\", List.of(true, false, true, true)\n         );\n\n         Jt.tableFromListColumns(employeeData).use();\n     }\n }\n</code></pre></p>",
      "name": "table",
      "description": "<p>Display a static table.\n <p></p>",
      "returns": [
        {
          "type_name": "void",
          "description": "The current void value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.toggle": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "value",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "value(boolean value)",
          "name": "value",
          "description": "<p>Preselect the toggle when first rendered.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "Consumer&lt;Boolean&gt;",
              "default": null,
              "name": "onChange",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "onChange(function.Consumer&lt;Boolean&gt; onChange)",
          "name": "onChange",
          "description": "<p>An optional callback function invoked when the toggle value changes.\n The value passed in the callback is the previous value of the component.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "help",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "help(String help)",
          "name": "help",
          "description": "<p>A tooltip that gets displayed next to the text. If this is <code>null</code> (default), no tooltip is displayed.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "disabled",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "disabled(boolean disabled)",
          "name": "disabled",
          "description": "<p>Disables the toggle if set to true. When disabled, users cannot interact with the widget.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtComponent.LabelVisibility",
              "default": null,
              "name": "labelVisibility",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "labelVisibility(JtComponent.LabelVisibility labelVisibility)",
          "name": "labelVisibility",
          "description": "<p>The visibility of the label. The default is <code>VISIBLE</code>.\n If this is <code>HIDDEN</code>, Javelit displays an empty spacer instead of the label, which can help keep the\n widget aligned with other widgets. If this is <code>COLLAPSED</code>, Javelit displays no label or spacer.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.input.ToggleComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "label",
              "description": "<p>A short label explaining to the user what this toggle is for. Markdown is supported, see <code>Jt#markdown(String)</code> for more details.</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.toggle(String label)"
        }
      ],
      "examples": "<p>Simple toggle\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ToggleApp {\n     public static void main(String[] args) {\n         boolean enabled = Jt.toggle(\"Enable notifications\").use();\n\n         Jt.text(\"Notifications: \" + (enabled ? \"Enabled\" : \"Disabled\")).use();\n     }\n }\n</code></pre>\n <p>\n Toggle with default value\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class ToggleDefaultApp {\n     public static void main(String[] args) {\n         boolean autoSave = Jt.toggle(\"Auto-save\")\n             .value(true)\n             .use();\n\n         if (autoSave) {\n             Jt.text(\"Changes will be saved automatically\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "toggle",
      "description": "<p>Display a toggle widget.\n <p></p>",
      "returns": [
        {
          "type_name": "NotNull Boolean",
          "description": "The current NotNull Boolean value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.cache": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.cache()"
        }
      ],
      "examples": "<p>Caching expensive computations\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class CacheApp {\n      public static void main(String[] args) {\n          String cacheKey = \"long_running_operation\";\n          Long result = Jt.cache().getLong(cacheKey);\n\n          if (result == null) {\n              Jt.text(\"Performing a long running operation. This will take a few seconds\").use();\n              result = long_running_operation();\n              Jt.cache().put(cacheKey, result);\n          }\n\n          Jt.text(\"Result of long operation: \" + result).use();\n          Jt.text(\"Refresh or Open the page in another tab: the long running operation result will be cached\").use();\n      }\n\n      private static long long_running_operation(){\n          try {\n              Thread.sleep(5000);\n          } catch (InterruptedException ignored) {\n          }\n          return 42;\n      }\n  }\n</code></pre>\n <p>\n Sharing data across users\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class SharedDataApp {\n     public static void main(String[] args) {\n         // initialization\n         Jt.cache().putIfAbsent(\"counter\", 0);\n         // increment visits\n         int totalVisits = Jt.cache().computeInt(\"counter\", (k, v) -&gt; v + 1);\n\n         Jt.text(\"Total app visits: \" + totalVisits).use();\n     }\n }\n</code></pre>\n <p>\n Deleting values in the cache:\n <pre>\n <code>\n // remove all values\n Jt.cache().clear();\n // remove a single key\n Jt.cache().remove(&quot;my_key&quot;);\n </code>\n </pre>\n <code>TypedMap</code> simply extends the java <code>Map</code> type with quality-of-life\n casting methods like <code>getInt</code>, <code>getDouble</code>, <code>getString</code>, etc...</p>",
      "name": "cache",
      "description": "<p>Return the app cache. The app cache is shared across all sessions.\n Put values in this map that are meant to be shared across all users.\n For instance: database long-lived connections, ML models loaded weights, etc...\n <p>\n See <a href=\"https://docs.javelit.io/get-started/fundamentals/advanced-concepts#caching\">documentation</a>.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.datastructure.TypedMap",
          "description": "The current io.javelit.datastructure.TypedMap value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.sessionState": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.sessionState()"
        }
      ],
      "examples": "<p>Basic counter with session state\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class CounterApp {\n     public static void main(String[] args) {\n         // initialize a counter\n         Jt.sessionState().putIfAbsent(\"counter\", 0);\n\n         if (Jt.button(\"Increment\").use()) {\n             Jt.sessionState().computeInt(\"counter\", (k, v) -&gt; v + 1);\n         }\n\n         Jt.text(\"Counter: \" + Jt.sessionState().get(\"counter\")).use();\n     }\n }\n</code></pre></p>",
      "name": "sessionState",
      "description": "<p>Return the session state Map of the session. A session corresponds to an opened tab of the app.\n <p>\n The session state is maintained across re-runs.\n Values can be stored and persisted in this map.\n <p></p>",
      "returns": [
        {
          "type_name": "io.javelit.datastructure.TypedMap",
          "description": "The current io.javelit.datastructure.TypedMap value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.urlQueryParameters": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.urlQueryParameters()"
        }
      ],
      "examples": "<p>Using query parameters for app configuration\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class QueryParamsApp {\n     public static void main(String[] args) {\n         var params = Jt.urlQueryParameters();\n\n         String name = params.getOrDefault(\"name\", List.of(\"unknown user\")).get(0);\n\n         Jt.title(\"App Settings\").use();\n         Jt.text(\"Hello \" + name).use();\n         // URL: ?name=Alice would show:\n         // Hello Alice\n     }\n }\n</code></pre></p>",
      "name": "urlQueryParameters",
      "description": "<p>Return the current URL query parameters as a map.\n <p>\n For instance: <code>?key1=foo&amp;key2=bar&amp;key2=fizz</code> in the URL will return\n <code>{&quot;key1&quot;: [&quot;foo&quot;], &quot;key2&quot;: [&quot;bar&quot;, &quot;fizz&quot;]}</code>\n <p></p>",
      "returns": [
        {
          "type_name": "Map&lt;String, List&lt;String&gt;&gt;",
          "description": "The current Map&lt;String, List&lt;String&gt;&gt; value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.urlPath": {
      "overloads": [
        {
          "args": [],
          "signature": "Jt.urlPath()"
        }
      ],
      "examples": "<p>Conditional content based on current path\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class PathApp {\n     public static void main(String[] args) {\n         Jt.navigation(\n                  Jt.page(\"/home\", () -&gt; home()),\n                  Jt.page(\"/details\", () -&gt; details())).use();\n\n         Jt.text(\"The current path is: \" + Jt.urlPath()).use();\n     }\n\n         public static void home() {\n             Jt.title(\"Home Page\").use();\n         }\n\n         public static void details() {\n             Jt.title(\"Details Page\").use();\n         }\n }\n</code></pre></p>",
      "name": "urlPath",
      "description": "<p>Return the current url path.\n <p>\n May be used for multipage apps.\n In a single page app, will always return <code>&quot;/&quot;</code>.\n <p></p>",
      "returns": [
        {
          "type_name": "String",
          "description": "The current String value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.tabs": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.TabsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.TabsComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [
            {
              "type_name": "List&lt;String&gt;",
              "default": null,
              "name": "tabs",
              "description": "<p>A list of tab labels</p>",
              "is_optional": false
            }
          ],
          "signature": "Jt.tabs(List&lt;String&gt; tabs)"
        }
      ],
      "examples": "<p>Basic tabbed interface\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class TabsApp {\n     public static void main(String[] args) {\n         var tabs = Jt.tabs(List.of(\"Overview\", \"Details\", \"Settings\")).use();\n\n         Jt.text(\"Welcome to the overview page\").use(tabs.tab(\"Overview\"));\n         Jt.text(\"Here are the details\").use(tabs.tab(\"Details\"));\n         Jt.text(\"Configure your settings here\").use(tabs.tab(\"Settings\"));\n     }\n }\n</code></pre>\n <p>\n Data analysis tabs\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class DataTabsApp {\n     public static void main(String[] args) {\n         var tabs = Jt.tabs(List.of(\"Sales\", \"Marketing\", \"Finance\")).use();\n\n         // Sales tab\n         Jt.title(\"Sales Dashboard\").use(tabs.tab(0));\n         Jt.text(\"Total sales: $100,000\").use(tabs.tab(0));\n\n         // Marketing tab\n         Jt.title(\"Marketing Metrics\").use(tabs.tab(1));\n         Jt.text(\"Conversion rate: 3.5%\").use(tabs.tab(1));\n\n         // Finance tab\n         Jt.title(\"Financial Overview\").use(tabs.tab(2));\n         Jt.text(\"Revenue growth: +15%\").use(tabs.tab(2));\n     }\n }\n</code></pre></p>",
      "name": "tabs",
      "description": "<p>Insert containers separated into tabs.\n <p>\n Inserts a number of multi-element containers as tabs.\n Tabs are a navigational element that allows users to easily move between groups of related content.\n <p>\n To add elements to the returned tabs container:\n <pre>\n <code>\n var tabs = Jt.tabs(&quot;my-tabs&quot;, List.of(&quot;E-commerce&quot;, &quot;Industry&quot;, &quot;Finance&quot;)).use();\n // get tab by name\n Jt.yourElement().use(tabs.tab(&quot;E-commerce&quot;));\n // get tab by index\n Jt.yourElement().use(tabs.tab(2));\n </code>\n </pre>\n See examples below.\n <p></p>",
      "returns": [
        {
          "type_name": "Tabs",
          "description": "The current Tabs value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    },
    "Jt.form": {
      "builderMethods": [
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "clearOnSubmit",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "clearOnSubmit(boolean clearOnSubmit)",
          "name": "clearOnSubmit",
          "description": "<p>If True, all widgets inside the form will be reset to their default values after the user presses the Submit button.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "enterToSubmit",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "enterToSubmit(boolean enterToSubmit)",
          "name": "enterToSubmit",
          "description": "<p>If True (default), pressing Enter while in a form widget is like clicking the first form submit button. If False, the user must click the submit button to submit the form.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "boolean",
              "default": null,
              "name": "border",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "border(boolean border)",
          "name": "border",
          "description": "<p>Whether to show a border around the form. Default is <code>true</code>. It is recommended to only remove the border if there is another border or the form is small.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "width",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(String width)",
          "name": "width",
          "description": "<p>The width of the element. This can be one of the following:\n <ul>\n <li><code>content</code> (default): The width of the element matches the width of its content, but doesn&#39;t exceed the width of the parent container.</li>\n <li><code>stretch</code>: The width of the element matches the width of the parent container.</li>\n <li>An integer specifying the width in pixels: The element has a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</li>\n </ul></p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "int",
              "default": null,
              "name": "widthPixels",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "width(int widthPixels)",
          "name": "width",
          "description": "<p>The width of the element in pixels. The element will have a fixed width. If the specified width is greater than the width of the parent container, the width of the element matches the width of the parent container.</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "height",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "height(String height)",
          "name": "height",
          "description": "<p>The height of the form container. Can be <code>&quot;content&quot;</code> (default - matches height of content), <code>&quot;stretch&quot;</code> (matches content or parent container height), or a specific pixel value (sets a fixed height, enabling scrolling if content exceeds it).</p>",
          "returns": [
            {
              "type_name": "io.javelit.components.layout.FormComponent.Builder",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "String",
              "default": null,
              "name": "key",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "key(String key)",
          "name": "key",
          "description": "<p>A string to use as the unique key for the widget.\n If this is omitted, a key will be generated for the widget based on its content.\n No two widgets may have the same key.</p>",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "args": [],
          "signature": "noPersist()",
          "name": "noPersist",
          "description": "",
          "returns": [
            {
              "type_name": "SELF",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [],
          "signature": "use()",
          "name": "use",
          "description": "<p>Put the widget in the app, in the <code>MAIN</code> container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        },
        {
          "paramDescriptions": {},
          "args": [
            {
              "type_name": "io.javelit.core.JtContainer",
              "default": null,
              "name": "container",
              "description": "",
              "is_optional": false
            }
          ],
          "signature": "use(JtContainer container)",
          "name": "use",
          "description": "<p>Put the widget in the app, in the provided container.</p>",
          "returns": [
            {
              "type_name": "B",
              "description": "",
              "is_generator": false,
              "return_name": null
            }
          ],
          "source": ""
        }
      ],
      "overloads": [
        {
          "args": [],
          "signature": "Jt.form()"
        }
      ],
      "examples": "<p>User registration form\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n public class FormApp {\n     public static void main(String[] args) {\n         var form = Jt.form().use();\n\n         String name = Jt.textInput(\"Full Name\").use(form);\n         String email = Jt.textInput(\"Email\").use(form);\n         int age = Jt.numberInput(\"Age\", Integer.class).min(0).max(120).use(form);\n         boolean subscribe = Jt.checkbox(\"Subscribe to newsletter\").use(form);\n\n         if (Jt.formSubmitButton(\"Register\").use()) {\n             Jt.text(\"Welcome, \" + name + \"!\").use();\n             Jt.text(\"Email: \" + email).use();\n         }\n     }\n }\n</code></pre>\n <p>\n Survey form\n <pre><code class=\"language-java\"> import io.javelit.core.Jt;\n\n import java.util.List;\n\n public class SurveyFormApp {\n     public static void main(String[] args) {\n         var form = Jt.form().use();\n         double satisfaction = Jt.slider(\"Satisfaction (1-10)\").min(1).max(10).value(5).use(form);\n         String feedback = Jt.textArea(\"Additional feedback\").use(form);\n         String department = Jt.selectbox(\"Department\",\n                                          List.of(\"Engineering\", \"Marketing\", \"Sales\", \"Support\")).use(form);\n\n         if (Jt.formSubmitButton(\"Submit Survey\").use(form)) {\n             Jt.text(\"Thank you for your feedback!\").use();\n             Jt.text(\"Satisfaction: \" + satisfaction + \"/10\").use();\n         }\n     }\n }\n</code></pre></p>",
      "name": "form",
      "description": "<p>Create a form that batches elements together with a &#39;Submit&#39; button.\n <p>\n A form is a container that visually groups other elements and widgets together, and contains a Submit button.\n When the form&#39;s Submit button is pressed, all widget values inside the form will be sent to Javelit in a batch.\n <p>\n To add elements to the form:\n <pre>\n <code>\n var form = Jt.form(&quot;my-form-1&quot;).use();\n Jt.yourElement().use(form);\n ...\n Jt.formSubmitButton(&quot;submit form&quot;).use();\n </code>\n </pre>\n <p>\n Forms have a few constraints:\n <ul>\n     <li>Every form must contain a <code>Jt.formSubmitButton)</code></li>\n     <li><code>Jt.button</code> and <code>Jt.downloadButton</code> cannot be added to a form</li>\n     <li>Forms can appear anywhere in your app (sidebar, columns, etc), but they cannot be embedded inside other forms</li>\n     <li>Within a form, the only widget that can have a callback function is <code>Jt.formSubmitButton)</code></li>\n </ul>\n <p></p>",
      "returns": [
        {
          "type_name": "JtContainer",
          "description": "The current JtContainer value of the component.",
          "is_generator": false,
          "return_name": null
        }
      ],
      "source": ""
    }
  }
}