<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:world.hey.com,2005:/cdecatheu/feed</id>
  <link rel="alternate" type="text/html" href="https://world.hey.com/cdecatheu"/>
  <link rel="self" type="application/atom+xml" href="https://world.hey.com/cdecatheu/feed.atom"/>
  <title>Cyril de Catheu</title>
  <updated>2025-10-26T21:30:15Z</updated>
  <entry>
    <id>tag:world.hey.com,2005:World::Post/45493</id>
    <published>2025-10-26T17:06:02Z</published>
    <updated>2025-10-26T21:30:15Z</updated>
    <link rel="alternate" type="text/html" href="https://world.hey.com/cdecatheu/javelit-diary-01-naming-and-renaming-this-project-cb6994f7"/>
    <title>Javelit Diary #01 - Naming (and renaming) this project </title>
    <content type="html">&lt;div class="trix-content"&gt;
  &lt;div&gt;&lt;em&gt;New here? Javelit is Streamlit for Java. Find it on &lt;/em&gt;&lt;a href="https://github.com/javelit/javelit"&gt;&lt;em&gt;GitHub&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;br&gt;&lt;/em&gt;&lt;br&gt;&lt;/div&gt;&lt;h1&gt;New articles about Javelit!&amp;nbsp;&lt;/h1&gt;&lt;div&gt;This week Guillaume Laforge from Google Cloud shared not one, but two articles about Javelit!&lt;br&gt;- &lt;a href="https://glaforge.dev/posts/2025/10/24/javelit-to-create-quick-interactive-app-frontends-in-java/"&gt;Building a Nano Banana playground webapp using the Gemini GenAI SDK&lt;/a&gt;&lt;br&gt;- &lt;a href="https://glaforge.dev/posts/2025/10/25/creating-a-javelit-chat-interface-for-langchain4j/"&gt;Building a chatbot interface with LangChain4j&lt;/a&gt;&lt;br&gt;Very cool! Check them out!&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;h1&gt;New in Javelit&lt;/h1&gt;&lt;div&gt;Javelit just got 5 new components:&amp;nbsp; &lt;br&gt;- &lt;a href="https://docs.javelit.io/develop/api-reference/status/jt.warning"&gt;warning&lt;/a&gt;, &lt;a href="https://docs.javelit.io/develop/api-reference/status/jt.success"&gt;success&lt;/a&gt;, and &lt;a href="https://docs.javelit.io/develop/api-reference/status/jt.info"&gt;info&lt;/a&gt; status&lt;br&gt;- &lt;a href="https://docs.javelit.io/develop/api-reference/text/jt.header"&gt;header&lt;/a&gt; and &lt;a href="https://docs.javelit.io/develop/api-reference/text/jt.subheader"&gt;subheader&lt;/a&gt;&lt;br&gt;  &lt;figure class="attachment attachment--preview attachment--lightboxable attachment--png"&gt;
      &lt;a download="status_and_headers.png" title="Download status_and_headers.png" data-click-proxy-target="lightbox_link_blob_2314083475" href="https://world.hey.com/cdecatheu/cb6994f7/blobs/eyJfcmFpbHMiOnsiZGF0YSI6MjMxNDA4MzQ3NSwicHVyIjoiYmxvYl9pZCJ9fQ--6016b6d03e7ca392d3e57fd219eb92f3027de92813f484f2397fa58e2f69a0f0/status_and_headers.png?disposition=attachment"&gt;
        &lt;img src="https://world.hey.com/cdecatheu/cb6994f7/representations/eyJfcmFpbHMiOnsiZGF0YSI6MjMxNDA4MzQ3NSwicHVyIjoiYmxvYl9pZCJ9fQ--6016b6d03e7ca392d3e57fd219eb92f3027de92813f484f2397fa58e2f69a0f0/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemVfdG9fbGltaXQiOlszODQwLDI1NjBdLCJxdWFsaXR5Ijo2MCwibG9hZGVyIjp7InBhZ2UiOm51bGx9LCJjb2FsZXNjZSI6dHJ1ZX0sInB1ciI6InZhcmlhdGlvbiJ9fQ--7edc7b21f6fad97fa22412618822c4d19725431f296c7ce47dc174b61535d27c/status_and_headers.png" alt="status_and_headers.png" decoding="async" loading="lazy"&gt;
&lt;/a&gt;
  &lt;/figure&gt;&lt;br&gt;According to the statistics computed from Streamlit projects I presented &lt;a href="https://world.hey.com/cdecatheu/javelit-diary-00-building-a-roadmap-as-a-late-mover-32be2b52"&gt;last week&lt;/a&gt;, these components are often used! I hope they'll be useful to Javelit's users. &lt;br&gt;&lt;br&gt;The developer experience has also been improved. &lt;br&gt;Have you ever spent minutes trying to understand why a component is not appearing in your app, just to realize you forgot to call &lt;em&gt;.use()&lt;/em&gt; on it? I did! Javelit now detects this mistake and warns you in the app:&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;pre&gt;// works fine
Jt.text("Hello").use();

&lt;em&gt;// I forgot to call .use() !  
&lt;/em&gt;Jt.markdown("World");&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;figure class="attachment attachment--preview attachment--lightboxable attachment--png"&gt;
      &lt;a download="call_use.png" title="Download call_use.png" data-click-proxy-target="lightbox_link_blob_2314086289" href="https://world.hey.com/cdecatheu/cb6994f7/blobs/eyJfcmFpbHMiOnsiZGF0YSI6MjMxNDA4NjI4OSwicHVyIjoiYmxvYl9pZCJ9fQ--7e846d5951b135ba700f93d29160d4eb6978f659a845e240268f7eb45e45b495/call_use.png?disposition=attachment"&gt;
        &lt;img src="https://world.hey.com/cdecatheu/cb6994f7/representations/eyJfcmFpbHMiOnsiZGF0YSI6MjMxNDA4NjI4OSwicHVyIjoiYmxvYl9pZCJ9fQ--7e846d5951b135ba700f93d29160d4eb6978f659a845e240268f7eb45e45b495/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemVfdG9fbGltaXQiOlszODQwLDI1NjBdLCJxdWFsaXR5Ijo2MCwibG9hZGVyIjp7InBhZ2UiOm51bGx9LCJjb2FsZXNjZSI6dHJ1ZX0sInB1ciI6InZhcmlhdGlvbiJ9fQ--7edc7b21f6fad97fa22412618822c4d19725431f296c7ce47dc174b61535d27c/call_use.png" alt="call_use.png" decoding="async" loading="lazy"&gt;
&lt;/a&gt;
  &lt;/figure&gt;&lt;/div&gt;&lt;div&gt;&lt;em&gt;By the way, I made sure the code for this toast element is reusable for a future &lt;/em&gt;&lt;a href="https://docs.streamlit.io/develop/api-reference/status/st.toast"&gt;&lt;em&gt;toast&lt;/em&gt;&lt;/a&gt;&lt;em&gt; component.&lt;br&gt;&lt;br&gt;&lt;/em&gt;The message when the app is empty is now more helpful:&lt;br&gt;  &lt;figure class="attachment attachment--preview attachment--lightboxable attachment--png"&gt;
      &lt;a download="empty_app.png" title="Download empty_app.png" data-click-proxy-target="lightbox_link_blob_2314090281" href="https://world.hey.com/cdecatheu/cb6994f7/blobs/eyJfcmFpbHMiOnsiZGF0YSI6MjMxNDA5MDI4MSwicHVyIjoiYmxvYl9pZCJ9fQ--9318d4840f205dbdef38e2b5f8d84a3b003e39f17ee1528a791d81729a974495/empty_app.png?disposition=attachment"&gt;
        &lt;img src="https://world.hey.com/cdecatheu/cb6994f7/representations/eyJfcmFpbHMiOnsiZGF0YSI6MjMxNDA5MDI4MSwicHVyIjoiYmxvYl9pZCJ9fQ--9318d4840f205dbdef38e2b5f8d84a3b003e39f17ee1528a791d81729a974495/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemVfdG9fbGltaXQiOlszODQwLDI1NjBdLCJxdWFsaXR5Ijo2MCwibG9hZGVyIjp7InBhZ2UiOm51bGx9LCJjb2FsZXNjZSI6dHJ1ZX0sInB1ciI6InZhcmlhdGlvbiJ9fQ--7edc7b21f6fad97fa22412618822c4d19725431f296c7ce47dc174b61535d27c/empty_app.png" alt="empty_app.png" decoding="async" loading="lazy"&gt;
&lt;/a&gt;
  &lt;/figure&gt;&lt;br&gt;The compilation failure modal was improved:&lt;br&gt;   &lt;figure class="attachment attachment--preview attachment--lightboxable attachment--png"&gt;
      &lt;a download="compilation_error.png" title="Download compilation_error.png" data-click-proxy-target="lightbox_link_blob_2314101012" href="https://world.hey.com/cdecatheu/cb6994f7/blobs/eyJfcmFpbHMiOnsiZGF0YSI6MjMxNDEwMTAxMiwicHVyIjoiYmxvYl9pZCJ9fQ--28999f726ffe8af5f0058594eb1c7c8ce2f6d5ddb9fd071bb5c5d17a3165ae1f/compilation_error.png?disposition=attachment"&gt;
        &lt;img src="https://world.hey.com/cdecatheu/cb6994f7/representations/eyJfcmFpbHMiOnsiZGF0YSI6MjMxNDEwMTAxMiwicHVyIjoiYmxvYl9pZCJ9fQ--28999f726ffe8af5f0058594eb1c7c8ce2f6d5ddb9fd071bb5c5d17a3165ae1f/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemVfdG9fbGltaXQiOlszODQwLDI1NjBdLCJxdWFsaXR5Ijo2MCwibG9hZGVyIjp7InBhZ2UiOm51bGx9LCJjb2FsZXNjZSI6dHJ1ZX0sInB1ciI6InZhcmlhdGlvbiJ9fQ--7edc7b21f6fad97fa22412618822c4d19725431f296c7ce47dc174b61535d27c/compilation_error.png" alt="compilation_error.png" decoding="async" loading="lazy"&gt;
&lt;/a&gt;
  &lt;/figure&gt;&lt;em&gt;&lt;br&gt;&lt;br&gt;&lt;/em&gt;The hot-reload experience was also improved, I'll write about it next week!&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;h1&gt;&lt;strong&gt;Naming and renaming this project &amp;nbsp;&lt;/strong&gt;&lt;/h1&gt;&lt;div&gt;This project was originally called Jeamlit. I didn't put too much thought into this name, as I needed something quick. The project has c&lt;em&gt;ontainer&lt;/em&gt;, &lt;em&gt;layout&lt;/em&gt; and c&lt;em&gt;omponent&lt;/em&gt; abstractions. There are already so many projects using these abstractions. Adding yet another class named "Container" is not kind to the IDE auto-imports and the developer experience: &lt;br&gt;  &lt;figure class="attachment attachment--preview attachment--lightboxable attachment--png"&gt;
      &lt;a download="container_classes.png" title="Download container_classes.png" data-click-proxy-target="lightbox_link_blob_2313781185" href="https://world.hey.com/cdecatheu/cb6994f7/blobs/eyJfcmFpbHMiOnsiZGF0YSI6MjMxMzc4MTE4NSwicHVyIjoiYmxvYl9pZCJ9fQ--4510ec8eed20f93a87f0c7457ae6b8ad12c3be7c9817807e46138d94caf13373/container_classes.png?disposition=attachment"&gt;
        &lt;img src="https://world.hey.com/cdecatheu/cb6994f7/representations/eyJfcmFpbHMiOnsiZGF0YSI6MjMxMzc4MTE4NSwicHVyIjoiYmxvYl9pZCJ9fQ--4510ec8eed20f93a87f0c7457ae6b8ad12c3be7c9817807e46138d94caf13373/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemVfdG9fbGltaXQiOlszODQwLDI1NjBdLCJxdWFsaXR5Ijo2MCwibG9hZGVyIjp7InBhZ2UiOm51bGx9LCJjb2FsZXNjZSI6dHJ1ZX0sInB1ciI6InZhcmlhdGlvbiJ9fQ--7edc7b21f6fad97fa22412618822c4d19725431f296c7ce47dc174b61535d27c/container_classes.png" alt="container_classes.png" decoding="async" loading="lazy"&gt;
&lt;/a&gt;
  &lt;/figure&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;em&gt;The list goes on...&lt;/em&gt;&amp;nbsp; &lt;br&gt;so I wanted a simple prefix I could add to all classes of the public API. &lt;br&gt;I took Streamlit, java-ified the name a bit and tadam! &lt;strong&gt;J&lt;/strong&gt;eamlit was born. Not creative but good enough:&amp;nbsp; &lt;br&gt;  &lt;figure class="attachment attachment--preview attachment--lightboxable attachment--png"&gt;
      &lt;a download="jt_api_2.png" title="Download jt_api_2.png" data-click-proxy-target="lightbox_link_blob_2313785498" href="https://world.hey.com/cdecatheu/cb6994f7/blobs/eyJfcmFpbHMiOnsiZGF0YSI6MjMxMzc4NTQ5OCwicHVyIjoiYmxvYl9pZCJ9fQ--aed501815a8612f4802b9132bc2b4f2500f8a2508d43d231283f470fc3568e93/jt_api_2.png?disposition=attachment"&gt;
        &lt;img src="https://world.hey.com/cdecatheu/cb6994f7/representations/eyJfcmFpbHMiOnsiZGF0YSI6MjMxMzc4NTQ5OCwicHVyIjoiYmxvYl9pZCJ9fQ--aed501815a8612f4802b9132bc2b4f2500f8a2508d43d231283f470fc3568e93/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemVfdG9fbGltaXQiOlszODQwLDI1NjBdLCJxdWFsaXR5Ijo2MCwibG9hZGVyIjp7InBhZ2UiOm51bGx9LCJjb2FsZXNjZSI6dHJ1ZX0sInB1ciI6InZhcmlhdGlvbiJ9fQ--7edc7b21f6fad97fa22412618822c4d19725431f296c7ce47dc174b61535d27c/jt_api_2.png" alt="jt_api_2.png" decoding="async" loading="lazy"&gt;
&lt;/a&gt;
  &lt;/figure&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;em&gt;IDE friendly API&lt;/em&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;I bought the &lt;em&gt;jeamlit.io&lt;/em&gt;, &lt;em&gt;.app&lt;/em&gt;, and &lt;em&gt;.com&lt;/em&gt; domains and moved on. I even shared the project on &lt;a href="https://www.reddit.com/r/java/comments/1o788bn/i_built_jeamlit_a_streamlit_alternative_for_java/"&gt;Reddit&lt;/a&gt; under the &lt;em&gt;Jeamlit&lt;/em&gt; name. &lt;br&gt;Why the last minute change, then? Let's say an email from Streamlit's legal team convinced me I could find something better 😉&amp;nbsp; &lt;br&gt;I didn't want to change the prefix though. Renaming the classes in the code and the package name was simple, but updating the documentation was painful and error-prone. This means I had to find a name looking like &lt;em&gt;J______t&lt;/em&gt;. &lt;br&gt;I quickly thought about &lt;em&gt;Javelot&lt;/em&gt;, which is the French word for &lt;em&gt;Javelin &lt;/em&gt;and incidentally starts like &lt;em&gt;Java&lt;/em&gt;, but the domains were already taken by a tech project. &lt;br&gt;I ended up with &lt;em&gt;Javelit &lt;/em&gt;because it was close and the domain names were available.&lt;br&gt;&lt;br&gt;So here goes my alternate-reality official rationale for the Javelit name:&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;"&lt;em&gt;Javelot is the French word for Javelin. A &lt;/em&gt;&lt;strong&gt;&lt;em&gt;javel&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;in is light and fast. This project is &lt;/em&gt;&lt;a href="https://www.dictionary.com/e/slang/its-lit/"&gt;&lt;strong&gt;&lt;em&gt;lit&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;. &lt;/em&gt;&lt;strong&gt;&lt;em&gt;Javelit."&lt;br&gt;&lt;br&gt;&lt;/em&gt;&lt;/strong&gt;Yes. Sorry.&lt;em&gt;&lt;br&gt;&lt;br&gt;&lt;/em&gt;That's all for this week. The next weeks will get more technical as I'll explain how the hot-reload is implemented in Javelit. Unlike most Java hot-reload mechanisms, Javelit supports adding dependencies, files, and classes on the fly. This involves interesting trade-offs and design considerations. Stay tuned!&amp;nbsp; &lt;br&gt;&lt;br&gt;Take care.&lt;br&gt;Cyril&lt;br&gt;&lt;br&gt;&lt;em&gt;Thanks for reading. No AI was used in any way to write this blog. I am not a native English speaker. I'd be happy to get your (human) feedback on the writing.&lt;/em&gt;&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;
</content>
    <author>
      <name>Cyril de Catheu</name>
      <email>cdecatheu@hey.com</email>
    </author>
  </entry>
  <entry>
    <id>tag:world.hey.com,2005:World::Post/45407</id>
    <published>2025-10-19T22:37:54Z</published>
    <updated>2025-10-20T20:11:48Z</updated>
    <link rel="alternate" type="text/html" href="https://world.hey.com/cdecatheu/javelit-diary-00-building-a-roadmap-as-a-late-mover-32be2b52"/>
    <title>Javelit Diary #00 - Building a roadmap as a late mover</title>
    <content type="html">&lt;div class="trix-content"&gt;
  &lt;div&gt;Yes, #00. &lt;em&gt;Of course we'd count from 0.&lt;br&gt;New here? Javelit is Streamlit for Java. Find it on &lt;/em&gt;&lt;a href="https://github.com/javelit/javelit"&gt;&lt;em&gt;GitHub&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;h1&gt;Sharing is &lt;del&gt;caring&lt;/del&gt;&amp;nbsp; stressing&lt;/h1&gt;&lt;div&gt;Being a solo developer 100% focused on building, with no one to hinder you with reporting, feature asks and catch-up meetings. Such a great feeling. Such a great road to failure. &lt;br&gt;After 3 months building Javelit with no feedback, only for friends that would make &lt;a href="https://www.momtestbook.com/"&gt;Mom's Test&lt;/a&gt; moms sound like Cruella, it was time for a reality check. &lt;br&gt;This week I finally shared Javelit, first with a selected few, then on &lt;a href="https://www.reddit.com/r/java/comments/1o788bn/i_built_jeamlit_a_streamlit_alternative_for_java/"&gt;Reddit&lt;/a&gt;. &lt;br&gt;  &lt;figure class="attachment attachment--preview attachment--lightboxable attachment--png"&gt;
      &lt;a download="Screenshot 2025-10-20 at 13.55.36.png" title="Download Screenshot 2025-10-20 at 13.55.36.png" data-click-proxy-target="lightbox_link_blob_2306391025" href="https://world.hey.com/cdecatheu/32be2b52/blobs/eyJfcmFpbHMiOnsiZGF0YSI6MjMwNjM5MTAyNSwicHVyIjoiYmxvYl9pZCJ9fQ--576f2764d2058da955fce47f7d3b7175309128d1ebc0f34bbf4b793fc3221bc0/Screenshot%202025-10-20%20at%2013.55.36.png?disposition=attachment"&gt;
        &lt;img src="https://world.hey.com/cdecatheu/32be2b52/representations/eyJfcmFpbHMiOnsiZGF0YSI6MjMwNjM5MTAyNSwicHVyIjoiYmxvYl9pZCJ9fQ--576f2764d2058da955fce47f7d3b7175309128d1ebc0f34bbf4b793fc3221bc0/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemVfdG9fbGltaXQiOlszODQwLDI1NjBdLCJxdWFsaXR5Ijo2MCwibG9hZGVyIjp7InBhZ2UiOm51bGx9LCJjb2FsZXNjZSI6dHJ1ZX0sInB1ciI6InZhcmlhdGlvbiJ9fQ--7edc7b21f6fad97fa22412618822c4d19725431f296c7ce47dc174b61535d27c/Screenshot%202025-10-20%20at%2013.55.36.png" alt="Screenshot 2025-10-20 at 13.55.36.png" decoding="async" loading="lazy"&gt;
&lt;/a&gt;
  &lt;/figure&gt;&lt;br&gt;Glad to see the project was well received! &lt;br&gt;Javelit even got hacked to showcase the new &lt;a href="https://www.jbang.dev/learn/java-in-places-you-do-not-expect-it/"&gt;JBang-powered Jupyter notebook&lt;/a&gt;. Way to go!&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h1&gt;What's new in Javelit?&lt;/h1&gt;&lt;div&gt;So many things... it's the first iteration of this dev log after all. &lt;br&gt;What you need to know at this point: Javelit does not support all of Streamlit's components yet, but this will come with time. Javelit already supports &lt;a href="https://docs.javelit.io/develop/api-reference"&gt;30+ components&lt;/a&gt;, &lt;a href="https://docs.javelit.io/get-started/tutorials/create-a-multipage-app"&gt;multipage apps&lt;/a&gt; and &lt;a href="https://docs.javelit.io/develop/concepts/architecture/forms"&gt;forms&lt;/a&gt;.&amp;nbsp; &lt;br&gt; &lt;br&gt;  &lt;figure class="attachment attachment--preview attachment--lightboxable attachment--gif"&gt;
      &lt;a download="demo(2).gif" title="Download demo(2).gif" data-click-proxy-target="lightbox_link_blob_2305894971" href="https://world.hey.com/cdecatheu/32be2b52/blobs/eyJfcmFpbHMiOnsiZGF0YSI6MjMwNTg5NDk3MSwicHVyIjoiYmxvYl9pZCJ9fQ--9d077795c1796611a3994039ee2a621f817b8c447b085081937abb7063d827fc/demo(2).gif?disposition=attachment"&gt;
        &lt;img src="https://world.hey.com/cdecatheu/32be2b52/representations/eyJfcmFpbHMiOnsiZGF0YSI6MjMwNTg5NDk3MSwicHVyIjoiYmxvYl9pZCJ9fQ--9d077795c1796611a3994039ee2a621f817b8c447b085081937abb7063d827fc/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJnaWYiLCJyZXNpemVfdG9fbGltaXQiOlszODQwLDI1NjBdLCJxdWFsaXR5Ijo2MCwibG9hZGVyIjp7InBhZ2UiOm51bGx9LCJjb2FsZXNjZSI6dHJ1ZX0sInB1ciI6InZhcmlhdGlvbiJ9fQ--fa14265cdeaa7bfc361e7132c504746e1a27380cdc2502a56d65c43cc633e405/demo(2).gif" alt="demo(2).gif" decoding="async" loading="lazy"&gt;
&lt;/a&gt;
  &lt;/figure&gt;&lt;/div&gt;&lt;h1&gt;Building a roadmap in a vacuum&amp;nbsp;&lt;/h1&gt;&lt;div&gt;Not talking to people. Not supporting all features. So how did I prioritize?&amp;nbsp; Mostly by exploiting the &lt;a href="https://dictionary.cambridge.org/dictionary/english/last-mover-advantage"&gt;late mover advantage&lt;/a&gt; to it's fullest.&amp;nbsp; &lt;br&gt;&lt;br&gt;&lt;strong&gt;Phase 1&lt;/strong&gt;&lt;br&gt;The core of Streamlit is its development model: the user updates a state in the frontend --&amp;gt; the backend reruns the app with the new state to re-render the frontend. The app runs top to bottom, and every component called is stacked in the frontend, in the same order. Easy enough: a list of states, some key and a diff operation would do. Claude Code doable.&lt;br&gt;This quickly gets more hairy though: out-of-order positioning, components nesting, forms support, multiple pages, re-render optimization, etc... all of this is supported by Streamlit.&lt;br&gt;&lt;br&gt;In the first months, my roadmap was simple: design and build to support all the features above. Smells like over-engineering? This is not. Javelit's &lt;a href="https://github.com/javelit/javelit/blob/main/src/main/java/io/javelit/core/StateManager.java"&gt;core logic&lt;/a&gt; is tiny and actually way simpler than Streamlit's. Streamlit had to evolve an existing codebase, adapting to unanticipated use cases as they emerge. I just had to look into Streamlit's doc to get a 360 view of which use cases are impacting the core logic, and rethink everything from a clean slate. &lt;br&gt;Learn from others' experience, as they say.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Phase 2&lt;/strong&gt;&lt;br&gt;The meat of Streamlit is its components. For anything you might need in a webapp, Streamlit has a ready-to-use answer in its library of 110+ components.&amp;nbsp;&lt;br&gt;A simple way to know which components should be prioritized is to estimate usage statistics from public GitHub projects.&lt;/div&gt;&lt;div&gt;Using GitHub API, we can count the number of times &lt;em&gt;st.title&lt;/em&gt; is used with the following query:&lt;/div&gt;&lt;pre&gt;// look at code
url = "&lt;a href="https://api.github.com/search/code?q"&gt;https://api.github.com/search/code?q&lt;/a&gt;="
// look for st.title( in Python projects that uses streamlit  
query = '"st.title(" language:Python "import streamlit"'&lt;/pre&gt;&lt;div&gt;Repeat this for every component and you get a ranking:&amp;nbsp; &lt;br&gt;&amp;nbsp;&lt;br&gt;  &lt;figure class="attachment attachment--preview attachment--lightboxable attachment--png"&gt;
      &lt;a download="Screenshot 2025-10-19 at 23.28.28.png" title="Download Screenshot 2025-10-19 at 23.28.28.png" data-click-proxy-target="lightbox_link_blob_2305933991" href="https://world.hey.com/cdecatheu/32be2b52/blobs/eyJfcmFpbHMiOnsiZGF0YSI6MjMwNTkzMzk5MSwicHVyIjoiYmxvYl9pZCJ9fQ--530edd644703d8429ad96045a7fcd5bb0e10a8b1283511c3deac8d74176a4750/Screenshot%202025-10-19%20at%2023.28.28.png?disposition=attachment"&gt;
        &lt;img src="https://world.hey.com/cdecatheu/32be2b52/representations/eyJfcmFpbHMiOnsiZGF0YSI6MjMwNTkzMzk5MSwicHVyIjoiYmxvYl9pZCJ9fQ--530edd644703d8429ad96045a7fcd5bb0e10a8b1283511c3deac8d74176a4750/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemVfdG9fbGltaXQiOlszODQwLDI1NjBdLCJxdWFsaXR5Ijo2MCwibG9hZGVyIjp7InBhZ2UiOm51bGx9LCJjb2FsZXNjZSI6dHJ1ZX0sInB1ciI6InZhcmlhdGlvbiJ9fQ--7edc7b21f6fad97fa22412618822c4d19725431f296c7ce47dc174b61535d27c/Screenshot%202025-10-19%20at%2023.28.28.png" alt="Screenshot 2025-10-19 at 23.28.28.png" decoding="async" loading="lazy"&gt;
&lt;/a&gt;
  &lt;/figure&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;em&gt;the list goes on...&lt;/em&gt;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;Of course there are many hypothesis that may not hold true here:&lt;br&gt;- I did not exclude Streamlit (the company) repos.&amp;nbsp; Streamlit repos may not be faithful to "real" usage, biasing the statistics &lt;br&gt;- the Java and Python communities may have different use cases for Javelit/Streamlit&lt;br&gt;- Timeliness: old components will have more use than newer ones... just because they are older.&lt;br&gt;&lt;br&gt;A good example of the last point was for chat_inputs and chat_message components. These components make it simple to build LLM chats interface. While the usage statistics for these components was pretty low, I quickly got the feedback this week - from real humans! - that they were much desired. Sounds obvious: chatbots are all the rage these days. Yet not obvious from GitHub stats! &lt;br&gt;&lt;br&gt;While the late mover advantage was effective to get a head-start at design and high-level prioritization, it's now time for me to talk to people!&amp;nbsp; Find Javelit's roadmap here: &lt;a href="https://github.com/jeamlit/jeamlit"&gt;https://github.com/javelit/javelit/discussions/39&lt;/a&gt;&lt;br&gt;&lt;br&gt;Take care.&lt;br&gt;Cyril&lt;br&gt;&lt;br&gt;&lt;em&gt;Thanks for reading. No AI was used in any way to write this blog. I am not a native English speaker. I'd be happy to get your (human) feedback on the writing.&lt;/em&gt;&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;
</content>
    <author>
      <name>Cyril de Catheu</name>
      <email>cdecatheu@hey.com</email>
    </author>
  </entry>
  <entry>
    <id>tag:world.hey.com,2005:World::Post/9816</id>
    <published>2021-04-20T13:04:45Z</published>
    <updated>2025-10-20T19:40:00Z</updated>
    <link rel="alternate" type="text/html" href="https://world.hey.com/cdecatheu/introducing-javelit-8b1ccb18"/>
    <title>Introducing Javelit</title>
    <content type="html">&lt;div class="trix-content"&gt;
  &lt;div&gt;Hello, World!&lt;br&gt;&lt;br&gt;Javelit, a Streamlit-inspired framework for Java, is now live on &lt;a href="https://github.com/javelit/javelit"&gt;GitHub&lt;/a&gt;!&lt;br&gt;&lt;br&gt;Subscribe to this newsletter to follow along with the dev journey.&lt;/div&gt;
&lt;/div&gt;
</content>
    <author>
      <name>Cyril de Catheu</name>
      <email>cdecatheu@hey.com</email>
    </author>
  </entry>
</feed>
